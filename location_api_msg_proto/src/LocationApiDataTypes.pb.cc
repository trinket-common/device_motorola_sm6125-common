/* Copyright (c) 2020 The Linux Foundation. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 *       copyright notice, this list of conditions and the following
 *       disclaimer in the documentation and/or other materials provided
 *       with the distribution.
 *     * Neither the name of The Linux Foundation nor the names of its
 *       contributors may be used to endorse or promote products derived
 *       from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
 * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LocationApiDataTypes.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "LocationApiDataTypes.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class PBLocationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PBLocation> {
} _PBLocation_default_instance_;
class PBLocationOptionsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PBLocationOptions> {
} _PBLocationOptions_default_instance_;
class PBAidingDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PBAidingData> {
} _PBAidingData_default_instance_;
class PBLocApiGnssSvDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PBLocApiGnssSv> {
} _PBLocApiGnssSv_default_instance_;
class PBLocApiGnssSvNotificationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PBLocApiGnssSvNotification> {
} _PBLocApiGnssSvNotification_default_instance_;
class PBGnssMeasurementsClockDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PBGnssMeasurementsClock> {
} _PBGnssMeasurementsClock_default_instance_;
class PBGnssMeasurementsDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PBGnssMeasurementsData> {
} _PBGnssMeasurementsData_default_instance_;
class PBLocApiGnssLocationPositionDynamicsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PBLocApiGnssLocationPositionDynamics> {
} _PBLocApiGnssLocationPositionDynamics_default_instance_;
class PBLocApiSystemTimeStructUnionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PBLocApiSystemTimeStructUnion> {
  public:
  const ::PBLocApiGnssSystemTimeStructType* gpssystemtime_;
  const ::PBLocApiGnssSystemTimeStructType* galsystemtime_;
  const ::PBLocApiGnssSystemTimeStructType* bdssystemtime_;
  const ::PBLocApiGnssSystemTimeStructType* qzsssystemtime_;
  const ::PBLocApiGnssGloTimeStructType* glosystemtime_;
  const ::PBLocApiGnssSystemTimeStructType* navicsystemtime_;
} _PBLocApiSystemTimeStructUnion_default_instance_;
class PBLocApiGnssSystemTimeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PBLocApiGnssSystemTime> {
} _PBLocApiGnssSystemTime_default_instance_;
class PBGnssLocationSvUsedInPositionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PBGnssLocationSvUsedInPosition> {
} _PBGnssLocationSvUsedInPosition_default_instance_;
class PBGnssMeasUsageInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PBGnssMeasUsageInfo> {
} _PBGnssMeasUsageInfo_default_instance_;
class PBGnssLocationInfoNotificationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PBGnssLocationInfoNotification> {
} _PBGnssLocationInfoNotification_default_instance_;
class PBGnssDataNotificationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PBGnssDataNotification> {
} _PBGnssDataNotification_default_instance_;
class PBGnssMeasurementsNotificationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PBGnssMeasurementsNotification> {
} _PBGnssMeasurementsNotification_default_instance_;
class PBLocApiGnssSystemTimeStructTypeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PBLocApiGnssSystemTimeStructType> {
} _PBLocApiGnssSystemTimeStructType_default_instance_;
class PBLocApiGnssGloTimeStructTypeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PBLocApiGnssGloTimeStructType> {
} _PBLocApiGnssGloTimeStructType_default_instance_;
class PBLLAInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PBLLAInfo> {
} _PBLLAInfo_default_instance_;
class PBLeapSecondSystemInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PBLeapSecondSystemInfo> {
} _PBLeapSecondSystemInfo_default_instance_;
class PBLeapSecondChangeInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PBLeapSecondChangeInfo> {
} _PBLeapSecondChangeInfo_default_instance_;
class PBLocationSystemInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PBLocationSystemInfo> {
} _PBLocationSystemInfo_default_instance_;
class PBGnssConfigRobustLocationVersionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PBGnssConfigRobustLocationVersion> {
} _PBGnssConfigRobustLocationVersion_default_instance_;
class PBGnssConfigRobustLocationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PBGnssConfigRobustLocation> {
} _PBGnssConfigRobustLocation_default_instance_;
class PBGnssSvTypeConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PBGnssSvTypeConfig> {
} _PBGnssSvTypeConfig_default_instance_;
class PBGnssSvIdConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PBGnssSvIdConfig> {
} _PBGnssSvIdConfig_default_instance_;
class PBLIALeverArmParamsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PBLIALeverArmParams> {
} _PBLIALeverArmParams_default_instance_;
class PBLIALeverArmConfigInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PBLIALeverArmConfigInfo> {
} _PBLIALeverArmConfigInfo_default_instance_;
class PBLIABodyToSensorMountParamsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PBLIABodyToSensorMountParams> {
} _PBLIABodyToSensorMountParams_default_instance_;
class PBDeadReckoningEngineConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PBDeadReckoningEngineConfig> {
} _PBDeadReckoningEngineConfig_default_instance_;

namespace protobuf_LocationApiDataTypes_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[29];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[36];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLocation, flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLocation, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLocation, latitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLocation, longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLocation, altitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLocation, speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLocation, bearing_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLocation, horizontalaccuracy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLocation, verticalaccuracy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLocation, speedaccuracy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLocation, bearingaccuracy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLocation, techmask_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLocationOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLocationOptions, mininterval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLocationOptions, mindistance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLocationOptions, mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLocationOptions, locreqengtypemask_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAidingData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAidingData, deleteall_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAidingData, gnssaidingdatasvmask_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAidingData, dreaidingdatamask_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBAidingData, posenginemask_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLocApiGnssSv, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLocApiGnssSv, svid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLocApiGnssSv, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLocApiGnssSv, cn0dbhz_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLocApiGnssSv, elevation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLocApiGnssSv, azimuth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLocApiGnssSv, gnsssvoptionsmask_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLocApiGnssSv, carrierfrequencyhz_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLocApiGnssSv, gnsssignaltypemask_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLocApiGnssSvNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLocApiGnssSvNotification, gnsssignaltypemaskvalid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLocApiGnssSvNotification, gnsssvs_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssMeasurementsClock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssMeasurementsClock, flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssMeasurementsClock, leapsecond_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssMeasurementsClock, timens_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssMeasurementsClock, timeuncertaintyns_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssMeasurementsClock, fullbiasns_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssMeasurementsClock, biasns_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssMeasurementsClock, biasuncertaintyns_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssMeasurementsClock, driftnsps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssMeasurementsClock, driftuncertaintynsps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssMeasurementsClock, hwclockdiscontinuitycount_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssMeasurementsData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssMeasurementsData, flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssMeasurementsData, svid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssMeasurementsData, svtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssMeasurementsData, timeoffsetns_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssMeasurementsData, statemask_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssMeasurementsData, receivedsvtimens_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssMeasurementsData, receivedsvtimeuncertaintyns_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssMeasurementsData, carriertonoisedbhz_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssMeasurementsData, pseudorangeratemps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssMeasurementsData, pseudorangerateuncertaintymps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssMeasurementsData, adrstatemask_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssMeasurementsData, adrmeters_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssMeasurementsData, adruncertaintymeters_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssMeasurementsData, carrierfrequencyhz_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssMeasurementsData, carriercycles_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssMeasurementsData, carrierphase_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssMeasurementsData, carrierphaseuncertainty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssMeasurementsData, multipathindicator_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssMeasurementsData, signaltonoiseratiodb_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssMeasurementsData, agcleveldb_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLocApiGnssLocationPositionDynamics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLocApiGnssLocationPositionDynamics, bodyframedatamask_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLocApiGnssLocationPositionDynamics, longaccel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLocApiGnssLocationPositionDynamics, lataccel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLocApiGnssLocationPositionDynamics, vertaccel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLocApiGnssLocationPositionDynamics, longaccelunc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLocApiGnssLocationPositionDynamics, lataccelunc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLocApiGnssLocationPositionDynamics, vertaccelunc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLocApiGnssLocationPositionDynamics, pitch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLocApiGnssLocationPositionDynamics, pitchunc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLocApiGnssLocationPositionDynamics, pitchrate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLocApiGnssLocationPositionDynamics, pitchrateunc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLocApiGnssLocationPositionDynamics, roll_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLocApiGnssLocationPositionDynamics, rollunc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLocApiGnssLocationPositionDynamics, rollrate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLocApiGnssLocationPositionDynamics, rollrateunc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLocApiGnssLocationPositionDynamics, yaw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLocApiGnssLocationPositionDynamics, yawunc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLocApiGnssLocationPositionDynamics, yawrate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLocApiGnssLocationPositionDynamics, yawrateunc_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLocApiSystemTimeStructUnion, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLocApiSystemTimeStructUnion, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_PBLocApiSystemTimeStructUnion_default_instance_), gpssystemtime_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_PBLocApiSystemTimeStructUnion_default_instance_), galsystemtime_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_PBLocApiSystemTimeStructUnion_default_instance_), bdssystemtime_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_PBLocApiSystemTimeStructUnion_default_instance_), qzsssystemtime_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_PBLocApiSystemTimeStructUnion_default_instance_), glosystemtime_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_PBLocApiSystemTimeStructUnion_default_instance_), navicsystemtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLocApiSystemTimeStructUnion, sysTimeUnion_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLocApiGnssSystemTime, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLocApiGnssSystemTime, gnsssystemtimesrc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLocApiGnssSystemTime, u_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssLocationSvUsedInPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssLocationSvUsedInPosition, gpssvusedidsmask_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssLocationSvUsedInPosition, glosvusedidsmask_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssLocationSvUsedInPosition, galsvusedidsmask_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssLocationSvUsedInPosition, bdssvusedidsmask_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssLocationSvUsedInPosition, qzsssvusedidsmask_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssLocationSvUsedInPosition, navicsvusedidsmask_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssMeasUsageInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssMeasUsageInfo, gnssconstellation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssMeasUsageInfo, gnsssvid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssMeasUsageInfo, gnsssignaltype_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssLocationInfoNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssLocationInfoNotification, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssLocationInfoNotification, flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssLocationInfoNotification, altitudemeansealevel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssLocationInfoNotification, pdop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssLocationInfoNotification, hdop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssLocationInfoNotification, vdop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssLocationInfoNotification, gdop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssLocationInfoNotification, tdop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssLocationInfoNotification, magneticdeviation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssLocationInfoNotification, horreliability_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssLocationInfoNotification, verreliability_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssLocationInfoNotification, horuncellipsesemimajor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssLocationInfoNotification, horuncellipsesemiminor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssLocationInfoNotification, horuncellipseorientazimuth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssLocationInfoNotification, northstddeviation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssLocationInfoNotification, eaststddeviation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssLocationInfoNotification, northvelocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssLocationInfoNotification, eastvelocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssLocationInfoNotification, upvelocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssLocationInfoNotification, northvelocitystddeviation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssLocationInfoNotification, eastvelocitystddeviation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssLocationInfoNotification, upvelocitystddeviation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssLocationInfoNotification, numsvusedinposition_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssLocationInfoNotification, svusedinposition_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssLocationInfoNotification, navsolutionmask_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssLocationInfoNotification, bodyframedata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssLocationInfoNotification, gnsssystemtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssLocationInfoNotification, numofmeasreceived_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssLocationInfoNotification, measusageinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssLocationInfoNotification, leapseconds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssLocationInfoNotification, timeuncms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssLocationInfoNotification, calibrationconfidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssLocationInfoNotification, calibrationstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssLocationInfoNotification, locoutputengtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssLocationInfoNotification, locoutputengmask_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssLocationInfoNotification, conformityindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssLocationInfoNotification, llavrpbased_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssLocationInfoNotification, enuvelocityvrpbased_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssLocationInfoNotification, drsolutionstatusmask_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssDataNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssDataNotification, numbersignaltypes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssDataNotification, gnssdatamask_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssDataNotification, jammerind_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssDataNotification, agc_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssMeasurementsNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssMeasurementsNotification, measurements_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssMeasurementsNotification, clock_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLocApiGnssSystemTimeStructType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLocApiGnssSystemTimeStructType, validitymask_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLocApiGnssSystemTimeStructType, systemweek_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLocApiGnssSystemTimeStructType, systemmsec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLocApiGnssSystemTimeStructType, systemclktimebiasms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLocApiGnssSystemTimeStructType, systemclktimebiasuncms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLocApiGnssSystemTimeStructType, reffcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLocApiGnssSystemTimeStructType, numclockresets_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLocApiGnssGloTimeStructType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLocApiGnssGloTimeStructType, validitymask_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLocApiGnssGloTimeStructType, glofouryear_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLocApiGnssGloTimeStructType, glodays_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLocApiGnssGloTimeStructType, glomsec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLocApiGnssGloTimeStructType, gloclktimebias_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLocApiGnssGloTimeStructType, gloclktimeuncms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLocApiGnssGloTimeStructType, reffcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLocApiGnssGloTimeStructType, numclockresets_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLLAInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLLAInfo, latitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLLAInfo, longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLLAInfo, altitude_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLeapSecondSystemInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLeapSecondSystemInfo, leapsecondinfomask_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLeapSecondSystemInfo, leapsecondcurrent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLeapSecondSystemInfo, leapsecondchangeinfo_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLeapSecondChangeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLeapSecondChangeInfo, gpstimestamplschange_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLeapSecondChangeInfo, leapsecondsbeforechange_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLeapSecondChangeInfo, leapsecondsafterchange_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLocationSystemInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLocationSystemInfo, systeminfomask_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLocationSystemInfo, leapsecondsysinfo_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssConfigRobustLocationVersion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssConfigRobustLocationVersion, major_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssConfigRobustLocationVersion, minor_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssConfigRobustLocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssConfigRobustLocation, validmask_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssConfigRobustLocation, enabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssConfigRobustLocation, enabledfore911_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssConfigRobustLocation, version_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssSvTypeConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssSvTypeConfig, enabledsvtypesmask_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssSvTypeConfig, blacklistedsvtypesmask_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssSvIdConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssSvIdConfig, globlacklistsvmask_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssSvIdConfig, bdsblacklistsvmask_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssSvIdConfig, qzssblacklistsvmask_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssSvIdConfig, galblacklistsvmask_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssSvIdConfig, sbasblacklistsvmask_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGnssSvIdConfig, navicblacklistsvmask_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLIALeverArmParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLIALeverArmParams, forwardoffsetmeters_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLIALeverArmParams, sidewaysoffsetmeters_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLIALeverArmParams, upoffsetmeters_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLIALeverArmConfigInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLIALeverArmConfigInfo, leverarmvalidmask_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLIALeverArmConfigInfo, gnsstovrp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLIALeverArmConfigInfo, drimutognss_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLIALeverArmConfigInfo, veppimutognss_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLIABodyToSensorMountParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLIABodyToSensorMountParams, rolloffset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLIABodyToSensorMountParams, yawoffset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLIABodyToSensorMountParams, pitchoffset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLIABodyToSensorMountParams, offsetunc_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDeadReckoningEngineConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDeadReckoningEngineConfig, validmask_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDeadReckoningEngineConfig, bodytosensormountparams_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDeadReckoningEngineConfig, vehiclespeedscalefactor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDeadReckoningEngineConfig, vehiclespeedscalefactorunc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDeadReckoningEngineConfig, gyroscalefactor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDeadReckoningEngineConfig, gyroscalefactorunc_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(PBLocation)},
  { 17, -1, sizeof(PBLocationOptions)},
  { 26, -1, sizeof(PBAidingData)},
  { 35, -1, sizeof(PBLocApiGnssSv)},
  { 48, -1, sizeof(PBLocApiGnssSvNotification)},
  { 55, -1, sizeof(PBGnssMeasurementsClock)},
  { 70, -1, sizeof(PBGnssMeasurementsData)},
  { 95, -1, sizeof(PBLocApiGnssLocationPositionDynamics)},
  { 119, -1, sizeof(PBLocApiSystemTimeStructUnion)},
  { 131, -1, sizeof(PBLocApiGnssSystemTime)},
  { 138, -1, sizeof(PBGnssLocationSvUsedInPosition)},
  { 149, -1, sizeof(PBGnssMeasUsageInfo)},
  { 157, -1, sizeof(PBGnssLocationInfoNotification)},
  { 201, -1, sizeof(PBGnssDataNotification)},
  { 210, -1, sizeof(PBGnssMeasurementsNotification)},
  { 217, -1, sizeof(PBLocApiGnssSystemTimeStructType)},
  { 229, -1, sizeof(PBLocApiGnssGloTimeStructType)},
  { 242, -1, sizeof(PBLLAInfo)},
  { 250, -1, sizeof(PBLeapSecondSystemInfo)},
  { 258, -1, sizeof(PBLeapSecondChangeInfo)},
  { 266, -1, sizeof(PBLocationSystemInfo)},
  { 273, -1, sizeof(PBGnssConfigRobustLocationVersion)},
  { 280, -1, sizeof(PBGnssConfigRobustLocation)},
  { 289, -1, sizeof(PBGnssSvTypeConfig)},
  { 296, -1, sizeof(PBGnssSvIdConfig)},
  { 307, -1, sizeof(PBLIALeverArmParams)},
  { 315, -1, sizeof(PBLIALeverArmConfigInfo)},
  { 324, -1, sizeof(PBLIABodyToSensorMountParams)},
  { 333, -1, sizeof(PBDeadReckoningEngineConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_PBLocation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PBLocationOptions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PBAidingData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PBLocApiGnssSv_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PBLocApiGnssSvNotification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PBGnssMeasurementsClock_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PBGnssMeasurementsData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PBLocApiGnssLocationPositionDynamics_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PBLocApiSystemTimeStructUnion_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PBLocApiGnssSystemTime_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PBGnssLocationSvUsedInPosition_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PBGnssMeasUsageInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PBGnssLocationInfoNotification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PBGnssDataNotification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PBGnssMeasurementsNotification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PBLocApiGnssSystemTimeStructType_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PBLocApiGnssGloTimeStructType_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PBLLAInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PBLeapSecondSystemInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PBLeapSecondChangeInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PBLocationSystemInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PBGnssConfigRobustLocationVersion_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PBGnssConfigRobustLocation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PBGnssSvTypeConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PBGnssSvIdConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PBLIALeverArmParams_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PBLIALeverArmConfigInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PBLIABodyToSensorMountParams_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PBDeadReckoningEngineConfig_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "LocationApiDataTypes.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 29);
}

}  // namespace

void TableStruct::Shutdown() {
  _PBLocation_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _PBLocationOptions_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _PBAidingData_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _PBLocApiGnssSv_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _PBLocApiGnssSvNotification_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _PBGnssMeasurementsClock_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _PBGnssMeasurementsData_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _PBLocApiGnssLocationPositionDynamics_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _PBLocApiSystemTimeStructUnion_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _PBLocApiGnssSystemTime_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _PBGnssLocationSvUsedInPosition_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _PBGnssMeasUsageInfo_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _PBGnssLocationInfoNotification_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _PBGnssDataNotification_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _PBGnssMeasurementsNotification_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _PBLocApiGnssSystemTimeStructType_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _PBLocApiGnssGloTimeStructType_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _PBLLAInfo_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _PBLeapSecondSystemInfo_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _PBLeapSecondChangeInfo_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _PBLocationSystemInfo_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _PBGnssConfigRobustLocationVersion_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
  _PBGnssConfigRobustLocation_default_instance_.Shutdown();
  delete file_level_metadata[22].reflection;
  _PBGnssSvTypeConfig_default_instance_.Shutdown();
  delete file_level_metadata[23].reflection;
  _PBGnssSvIdConfig_default_instance_.Shutdown();
  delete file_level_metadata[24].reflection;
  _PBLIALeverArmParams_default_instance_.Shutdown();
  delete file_level_metadata[25].reflection;
  _PBLIALeverArmConfigInfo_default_instance_.Shutdown();
  delete file_level_metadata[26].reflection;
  _PBLIABodyToSensorMountParams_default_instance_.Shutdown();
  delete file_level_metadata[27].reflection;
  _PBDeadReckoningEngineConfig_default_instance_.Shutdown();
  delete file_level_metadata[28].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _PBLocation_default_instance_.DefaultConstruct();
  _PBLocationOptions_default_instance_.DefaultConstruct();
  _PBAidingData_default_instance_.DefaultConstruct();
  _PBLocApiGnssSv_default_instance_.DefaultConstruct();
  _PBLocApiGnssSvNotification_default_instance_.DefaultConstruct();
  _PBGnssMeasurementsClock_default_instance_.DefaultConstruct();
  _PBGnssMeasurementsData_default_instance_.DefaultConstruct();
  _PBLocApiGnssLocationPositionDynamics_default_instance_.DefaultConstruct();
  _PBLocApiSystemTimeStructUnion_default_instance_.DefaultConstruct();
  _PBLocApiGnssSystemTime_default_instance_.DefaultConstruct();
  _PBGnssLocationSvUsedInPosition_default_instance_.DefaultConstruct();
  _PBGnssMeasUsageInfo_default_instance_.DefaultConstruct();
  _PBGnssLocationInfoNotification_default_instance_.DefaultConstruct();
  _PBGnssDataNotification_default_instance_.DefaultConstruct();
  _PBGnssMeasurementsNotification_default_instance_.DefaultConstruct();
  _PBLocApiGnssSystemTimeStructType_default_instance_.DefaultConstruct();
  _PBLocApiGnssGloTimeStructType_default_instance_.DefaultConstruct();
  _PBLLAInfo_default_instance_.DefaultConstruct();
  _PBLeapSecondSystemInfo_default_instance_.DefaultConstruct();
  _PBLeapSecondChangeInfo_default_instance_.DefaultConstruct();
  _PBLocationSystemInfo_default_instance_.DefaultConstruct();
  _PBGnssConfigRobustLocationVersion_default_instance_.DefaultConstruct();
  _PBGnssConfigRobustLocation_default_instance_.DefaultConstruct();
  _PBGnssSvTypeConfig_default_instance_.DefaultConstruct();
  _PBGnssSvIdConfig_default_instance_.DefaultConstruct();
  _PBLIALeverArmParams_default_instance_.DefaultConstruct();
  _PBLIALeverArmConfigInfo_default_instance_.DefaultConstruct();
  _PBLIABodyToSensorMountParams_default_instance_.DefaultConstruct();
  _PBDeadReckoningEngineConfig_default_instance_.DefaultConstruct();
  _PBLocApiSystemTimeStructUnion_default_instance_.gpssystemtime_ = const_cast< ::PBLocApiGnssSystemTimeStructType*>(
      ::PBLocApiGnssSystemTimeStructType::internal_default_instance());
  _PBLocApiSystemTimeStructUnion_default_instance_.galsystemtime_ = const_cast< ::PBLocApiGnssSystemTimeStructType*>(
      ::PBLocApiGnssSystemTimeStructType::internal_default_instance());
  _PBLocApiSystemTimeStructUnion_default_instance_.bdssystemtime_ = const_cast< ::PBLocApiGnssSystemTimeStructType*>(
      ::PBLocApiGnssSystemTimeStructType::internal_default_instance());
  _PBLocApiSystemTimeStructUnion_default_instance_.qzsssystemtime_ = const_cast< ::PBLocApiGnssSystemTimeStructType*>(
      ::PBLocApiGnssSystemTimeStructType::internal_default_instance());
  _PBLocApiSystemTimeStructUnion_default_instance_.glosystemtime_ = const_cast< ::PBLocApiGnssGloTimeStructType*>(
      ::PBLocApiGnssGloTimeStructType::internal_default_instance());
  _PBLocApiSystemTimeStructUnion_default_instance_.navicsystemtime_ = const_cast< ::PBLocApiGnssSystemTimeStructType*>(
      ::PBLocApiGnssSystemTimeStructType::internal_default_instance());
  _PBLocApiGnssSystemTime_default_instance_.get_mutable()->u_ = const_cast< ::PBLocApiSystemTimeStructUnion*>(
      ::PBLocApiSystemTimeStructUnion::internal_default_instance());
  _PBGnssLocationInfoNotification_default_instance_.get_mutable()->location_ = const_cast< ::PBLocation*>(
      ::PBLocation::internal_default_instance());
  _PBGnssLocationInfoNotification_default_instance_.get_mutable()->svusedinposition_ = const_cast< ::PBGnssLocationSvUsedInPosition*>(
      ::PBGnssLocationSvUsedInPosition::internal_default_instance());
  _PBGnssLocationInfoNotification_default_instance_.get_mutable()->bodyframedata_ = const_cast< ::PBLocApiGnssLocationPositionDynamics*>(
      ::PBLocApiGnssLocationPositionDynamics::internal_default_instance());
  _PBGnssLocationInfoNotification_default_instance_.get_mutable()->gnsssystemtime_ = const_cast< ::PBLocApiGnssSystemTime*>(
      ::PBLocApiGnssSystemTime::internal_default_instance());
  _PBGnssLocationInfoNotification_default_instance_.get_mutable()->llavrpbased_ = const_cast< ::PBLLAInfo*>(
      ::PBLLAInfo::internal_default_instance());
  _PBGnssMeasurementsNotification_default_instance_.get_mutable()->clock_ = const_cast< ::PBGnssMeasurementsClock*>(
      ::PBGnssMeasurementsClock::internal_default_instance());
  _PBLeapSecondSystemInfo_default_instance_.get_mutable()->leapsecondchangeinfo_ = const_cast< ::PBLeapSecondChangeInfo*>(
      ::PBLeapSecondChangeInfo::internal_default_instance());
  _PBLeapSecondChangeInfo_default_instance_.get_mutable()->gpstimestamplschange_ = const_cast< ::PBLocApiGnssSystemTimeStructType*>(
      ::PBLocApiGnssSystemTimeStructType::internal_default_instance());
  _PBLocationSystemInfo_default_instance_.get_mutable()->leapsecondsysinfo_ = const_cast< ::PBLeapSecondSystemInfo*>(
      ::PBLeapSecondSystemInfo::internal_default_instance());
  _PBGnssConfigRobustLocation_default_instance_.get_mutable()->version_ = const_cast< ::PBGnssConfigRobustLocationVersion*>(
      ::PBGnssConfigRobustLocationVersion::internal_default_instance());
  _PBLIALeverArmConfigInfo_default_instance_.get_mutable()->gnsstovrp_ = const_cast< ::PBLIALeverArmParams*>(
      ::PBLIALeverArmParams::internal_default_instance());
  _PBLIALeverArmConfigInfo_default_instance_.get_mutable()->drimutognss_ = const_cast< ::PBLIALeverArmParams*>(
      ::PBLIALeverArmParams::internal_default_instance());
  _PBLIALeverArmConfigInfo_default_instance_.get_mutable()->veppimutognss_ = const_cast< ::PBLIALeverArmParams*>(
      ::PBLIALeverArmParams::internal_default_instance());
  _PBDeadReckoningEngineConfig_default_instance_.get_mutable()->bodytosensormountparams_ = const_cast< ::PBLIABodyToSensorMountParams*>(
      ::PBLIABodyToSensorMountParams::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\032LocationApiDataTypes.proto\"\375\001\n\nPBLocat"
      "ion\022\r\n\005flags\030\001 \001(\r\022\021\n\ttimestamp\030\002 \001(\004\022\020\n"
      "\010latitude\030\003 \001(\001\022\021\n\tlongitude\030\004 \001(\001\022\020\n\010al"
      "titude\030\005 \001(\001\022\r\n\005speed\030\006 \001(\002\022\017\n\007bearing\030\007"
      " \001(\002\022\032\n\022horizontalAccuracy\030\010 \001(\002\022\030\n\020vert"
      "icalAccuracy\030\t \001(\002\022\025\n\rspeedAccuracy\030\n \001("
      "\002\022\027\n\017bearingAccuracy\030\013 \001(\002\022\020\n\010techMask\030\014"
      " \001(\r\"w\n\021PBLocationOptions\022\023\n\013minInterval"
      "\030\001 \001(\r\022\023\n\013minDistance\030\002 \001(\r\022\035\n\004mode\030\003 \001("
      "\0162\017.PBGnssSuplMode\022\031\n\021locReqEngTypeMask\030"
      "\004 \001(\r\"q\n\014PBAidingData\022\021\n\tdeleteAll\030\001 \001(\010"
      "\022\034\n\024gnssAidingDataSvMask\030\002 \001(\r\022\031\n\021dreAid"
      "ingDataMask\030\003 \001(\r\022\025\n\rposEngineMask\030\004 \001(\r"
      "\"\327\001\n\016PBLocApiGnssSv\022\014\n\004svId\030\001 \001(\r\022/\n\004typ"
      "e\030\002 \001(\0162!.PBLocApiGnss_LocSvSystemEnumTy"
      "pe\022\017\n\007cN0Dbhz\030\003 \001(\002\022\021\n\televation\030\004 \001(\002\022\017"
      "\n\007azimuth\030\005 \001(\002\022\031\n\021gnssSvOptionsMask\030\006 \001"
      "(\r\022\032\n\022carrierFrequencyHz\030\007 \001(\002\022\032\n\022gnssSi"
      "gnalTypeMask\030\010 \001(\r\"_\n\032PBLocApiGnssSvNoti"
      "fication\022\037\n\027gnssSignalTypeMaskValid\030\001 \001("
      "\010\022 \n\007gnssSvs\030\002 \003(\0132\017.PBLocApiGnssSv\"\372\001\n\027"
      "PBGnssMeasurementsClock\022\r\n\005flags\030\001 \001(\r\022\022"
      "\n\nleapSecond\030\002 \001(\005\022\016\n\006timeNs\030\003 \001(\003\022\031\n\021ti"
      "meUncertaintyNs\030\004 \001(\001\022\022\n\nfullBiasNs\030\005 \001("
      "\003\022\016\n\006biasNs\030\006 \001(\001\022\031\n\021biasUncertaintyNs\030\007"
      " \001(\001\022\021\n\tdriftNsps\030\010 \001(\001\022\034\n\024driftUncertai"
      "ntyNsps\030\t \001(\001\022!\n\031hwClockDiscontinuityCou"
      "nt\030\n \001(\r\"\325\004\n\026PBGnssMeasurementsData\022\r\n\005f"
      "lags\030\001 \001(\r\022\014\n\004svId\030\002 \001(\005\0221\n\006svType\030\003 \001(\016"
      "2!.PBLocApiGnss_LocSvSystemEnumType\022\024\n\014t"
      "imeOffsetNs\030\004 \001(\001\022\021\n\tstateMask\030\005 \001(\r\022\030\n\020"
      "receivedSvTimeNs\030\006 \001(\003\022#\n\033receivedSvTime"
      "UncertaintyNs\030\007 \001(\003\022\032\n\022carrierToNoiseDbH"
      "z\030\010 \001(\001\022\032\n\022pseudorangeRateMps\030\t \001(\001\022%\n\035p"
      "seudorangeRateUncertaintyMps\030\n \001(\001\022\024\n\014ad"
      "rStateMask\030\013 \001(\r\022\021\n\tadrMeters\030\014 \001(\001\022\034\n\024a"
      "drUncertaintyMeters\030\r \001(\001\022\032\n\022carrierFreq"
      "uencyHz\030\016 \001(\002\022\025\n\rcarrierCycles\030\017 \001(\003\022\024\n\014"
      "carrierPhase\030\020 \001(\001\022\037\n\027carrierPhaseUncert"
      "ainty\030\021 \001(\001\022A\n\022multipathIndicator\030\022 \001(\0162"
      "%.PBGnssMeasurementsMultipathIndicator\022\034"
      "\n\024signalToNoiseRatioDb\030\023 \001(\001\022\022\n\nagcLevel"
      "Db\030\024 \001(\001\"\214\003\n$PBLocApiGnssLocationPositio"
      "nDynamics\022\031\n\021bodyFrameDataMask\030\001 \001(\r\022\021\n\t"
      "longAccel\030\002 \001(\002\022\020\n\010latAccel\030\003 \001(\002\022\021\n\tver"
      "tAccel\030\004 \001(\002\022\024\n\014longAccelUnc\030\005 \001(\002\022\023\n\013la"
      "tAccelUnc\030\006 \001(\002\022\024\n\014vertAccelUnc\030\007 \001(\002\022\r\n"
      "\005pitch\030\010 \001(\002\022\020\n\010pitchUnc\030\t \001(\002\022\021\n\tpitchR"
      "ate\030\n \001(\002\022\024\n\014pitchRateUnc\030\013 \001(\002\022\014\n\004roll\030"
      "\014 \001(\002\022\017\n\007rollUnc\030\r \001(\002\022\020\n\010rollRate\030\016 \001(\002"
      "\022\023\n\013rollRateUnc\030\017 \001(\002\022\013\n\003yaw\030\020 \001(\002\022\016\n\006ya"
      "wUnc\030\021 \001(\002\022\017\n\007yawRate\030\022 \001(\002\022\022\n\nyawRateUn"
      "c\030\023 \001(\002\"\227\003\n\035PBLocApiSystemTimeStructUnio"
      "n\022:\n\rgpsSystemTime\030\001 \001(\0132!.PBLocApiGnssS"
      "ystemTimeStructTypeH\000\022:\n\rgalSystemTime\030\002"
      " \001(\0132!.PBLocApiGnssSystemTimeStructTypeH"
      "\000\022:\n\rbdsSystemTime\030\003 \001(\0132!.PBLocApiGnssS"
      "ystemTimeStructTypeH\000\022;\n\016qzssSystemTime\030"
      "\004 \001(\0132!.PBLocApiGnssSystemTimeStructType"
      "H\000\0227\n\rgloSystemTime\030\005 \001(\0132\036.PBLocApiGnss"
      "GloTimeStructTypeH\000\022<\n\017navicSystemTime\030\006"
      " \001(\0132!.PBLocApiGnssSystemTimeStructTypeH"
      "\000B\016\n\014sysTimeUnion\"\201\001\n\026PBLocApiGnssSystem"
      "Time\022<\n\021gnssSystemTimeSrc\030\001 \001(\0162!.PBLocA"
      "piGnss_LocSvSystemEnumType\022)\n\001u\030\002 \001(\0132\036."
      "PBLocApiSystemTimeStructUnion\"\277\001\n\036PBGnss"
      "LocationSvUsedInPosition\022\030\n\020gpsSvUsedIds"
      "Mask\030\001 \001(\004\022\030\n\020gloSvUsedIdsMask\030\002 \001(\004\022\030\n\020"
      "galSvUsedIdsMask\030\003 \001(\004\022\030\n\020bdsSvUsedIdsMa"
      "sk\030\004 \001(\004\022\031\n\021qzssSvUsedIdsMask\030\005 \001(\004\022\032\n\022n"
      "avicSvUsedIdsMask\030\006 \001(\004\"}\n\023PBGnssMeasUsa"
      "geInfo\022<\n\021gnssConstellation\030\001 \001(\0162!.PBLo"
      "cApiGnss_LocSvSystemEnumType\022\020\n\010gnssSvId"
      "\030\002 \001(\r\022\026\n\016gnssSignalType\030\003 \001(\r\"\272\t\n\036PBGns"
      "sLocationInfoNotification\022\035\n\010location\030\001 "
      "\001(\0132\013.PBLocation\022\r\n\005flags\030\002 \001(\r\022\034\n\024altit"
      "udeMeanSeaLevel\030\003 \001(\002\022\014\n\004pdop\030\004 \001(\002\022\014\n\004h"
      "dop\030\005 \001(\002\022\014\n\004vdop\030\006 \001(\002\022\014\n\004gdop\030\007 \001(\002\022\014\n"
      "\004tdop\030\010 \001(\002\022\031\n\021magneticDeviation\030\t \001(\002\022."
      "\n\016horReliability\030\n \001(\0162\026.PBLocationRelia"
      "bility\022.\n\016verReliability\030\013 \001(\0162\026.PBLocat"
      "ionReliability\022\036\n\026horUncEllipseSemiMajor"
      "\030\014 \001(\002\022\036\n\026horUncEllipseSemiMinor\030\r \001(\002\022\""
      "\n\032horUncEllipseOrientAzimuth\030\016 \001(\002\022\031\n\021no"
      "rthStdDeviation\030\017 \001(\002\022\030\n\020eastStdDeviatio"
      "n\030\020 \001(\002\022\025\n\rnorthVelocity\030\021 \001(\002\022\024\n\014eastVe"
      "locity\030\022 \001(\002\022\022\n\nupVelocity\030\023 \001(\002\022!\n\031nort"
      "hVelocityStdDeviation\030\024 \001(\002\022 \n\030eastVeloc"
      "ityStdDeviation\030\025 \001(\002\022\036\n\026upVelocityStdDe"
      "viation\030\026 \001(\002\022\033\n\023numSvUsedInPosition\030\027 \001"
      "(\r\0229\n\020svUsedInPosition\030\030 \001(\0132\037.PBGnssLoc"
      "ationSvUsedInPosition\022\027\n\017navSolutionMask"
      "\030\031 \001(\r\022<\n\rbodyFrameData\030\032 \001(\0132%.PBLocApi"
      "GnssLocationPositionDynamics\022/\n\016gnssSyst"
      "emTime\030\033 \001(\0132\027.PBLocApiGnssSystemTime\022\031\n"
      "\021numOfMeasReceived\030\034 \001(\r\022+\n\rmeasUsageInf"
      "o\030\035 \003(\0132\024.PBGnssMeasUsageInfo\022\023\n\013leapSec"
      "onds\030\036 \001(\r\022\021\n\ttimeUncMs\030\037 \001(\002\022\035\n\025calibra"
      "tionConfidence\030  \001(\r\022\031\n\021calibrationStatu"
      "s\030! \001(\r\0223\n\020locOutputEngType\030\" \001(\0162\031.PBLo"
      "cApiOutputEngineType\022\030\n\020locOutputEngMask"
      "\030# \001(\r\022\027\n\017conformityIndex\030$ \001(\002\022\037\n\013llaVR"
      "PBased\030% \001(\0132\n.PBLLAInfo\022\033\n\023enuVelocityV"
      "RPBased\030& \003(\002\022\034\n\024drSolutionStatusMask\030\' "
      "\001(\r\"i\n\026PBGnssDataNotification\022\031\n\021numberS"
      "ignalTypes\030\001 \001(\r\022\024\n\014gnssDataMask\030\002 \003(\004\022\021"
      "\n\tjammerInd\030\003 \003(\001\022\013\n\003agc\030\004 \003(\001\"x\n\036PBGnss"
      "MeasurementsNotification\022-\n\014measurements"
      "\030\001 \003(\0132\027.PBGnssMeasurementsData\022\'\n\005clock"
      "\030\002 \001(\0132\030.PBGnssMeasurementsClock\"\310\001\n PBL"
      "ocApiGnssSystemTimeStructType\022\024\n\014validit"
      "yMask\030\001 \001(\r\022\022\n\nsystemWeek\030\002 \001(\r\022\022\n\nsyste"
      "mMsec\030\003 \001(\r\022\033\n\023systemClkTimeBiasMs\030\004 \001(\002"
      "\022\036\n\026systemClkTimeBiasUncMs\030\005 \001(\002\022\021\n\trefF"
      "Count\030\006 \001(\r\022\026\n\016numClockResets\030\007 \001(\r\"\310\001\n\035"
      "PBLocApiGnssGloTimeStructType\022\024\n\014validit"
      "yMask\030\001 \001(\r\022\023\n\013gloFourYear\030\002 \001(\r\022\017\n\007gloD"
      "ays\030\003 \001(\r\022\017\n\007gloMsec\030\004 \001(\r\022\026\n\016gloClkTime"
      "Bias\030\005 \001(\002\022\027\n\017gloClkTimeUncMs\030\006 \001(\002\022\021\n\tr"
      "efFCount\030\007 \001(\r\022\026\n\016numClockResets\030\010 \001(\r\"B"
      "\n\tPBLLAInfo\022\020\n\010latitude\030\001 \001(\001\022\021\n\tlongitu"
      "de\030\002 \001(\001\022\020\n\010altitude\030\003 \001(\002\"\206\001\n\026PBLeapSec"
      "ondSystemInfo\022\032\n\022leapSecondInfoMask\030\001 \001("
      "\r\022\031\n\021leapSecondCurrent\030\002 \001(\r\0225\n\024leapSeco"
      "ndChangeInfo\030\003 \001(\0132\027.PBLeapSecondChangeI"
      "nfo\"\232\001\n\026PBLeapSecondChangeInfo\022\?\n\024gpsTim"
      "estampLsChange\030\001 \001(\0132!.PBLocApiGnssSyste"
      "mTimeStructType\022\037\n\027leapSecondsBeforeChan"
      "ge\030\002 \001(\r\022\036\n\026leapSecondsAfterChange\030\003 \001(\r"
      "\"b\n\024PBLocationSystemInfo\022\026\n\016systemInfoMa"
      "sk\030\001 \001(\r\0222\n\021leapSecondSysInfo\030\002 \001(\0132\027.PB"
      "LeapSecondSystemInfo\"A\n!PBGnssConfigRobu"
      "stLocationVersion\022\r\n\005major\030\001 \001(\r\022\r\n\005mino"
      "r\030\002 \001(\r\"\215\001\n\032PBGnssConfigRobustLocation\022\021"
      "\n\tvalidMask\030\001 \001(\r\022\017\n\007enabled\030\002 \001(\010\022\026\n\016en"
      "abledForE911\030\003 \001(\010\0223\n\007version\030\004 \001(\0132\".PB"
      "GnssConfigRobustLocationVersion\"P\n\022PBGns"
      "sSvTypeConfig\022\032\n\022enabledSvTypesMask\030\001 \001("
      "\004\022\036\n\026blacklistedSvTypesMask\030\002 \001(\004\"\276\001\n\020PB"
      "GnssSvIdConfig\022\032\n\022gloBlacklistSvMask\030\001 \001"
      "(\004\022\032\n\022bdsBlacklistSvMask\030\002 \001(\004\022\033\n\023qzssBl"
      "acklistSvMask\030\003 \001(\004\022\032\n\022galBlacklistSvMas"
      "k\030\004 \001(\004\022\033\n\023sbasBlacklistSvMask\030\005 \001(\004\022\034\n\024"
      "navicBlacklistSvMask\030\006 \001(\004\"h\n\023PBLIALever"
      "ArmParams\022\033\n\023forwardOffsetMeters\030\001 \001(\002\022\034"
      "\n\024sidewaysOffsetMeters\030\002 \001(\002\022\026\n\016upOffset"
      "Meters\030\003 \001(\002\"\265\001\n\027PBLIALeverArmConfigInfo"
      "\022\031\n\021leverArmValidMask\030\001 \001(\r\022\'\n\tgnssToVRP"
      "\030\002 \001(\0132\024.PBLIALeverArmParams\022)\n\013drImuToG"
      "nss\030\003 \001(\0132\024.PBLIALeverArmParams\022+\n\rveppI"
      "muToGnss\030\004 \001(\0132\024.PBLIALeverArmParams\"m\n\034"
      "PBLIABodyToSensorMountParams\022\022\n\nrollOffs"
      "et\030\001 \001(\002\022\021\n\tyawOffset\030\002 \001(\002\022\023\n\013pitchOffs"
      "et\030\003 \001(\002\022\021\n\toffsetUnc\030\004 \001(\002\"\352\001\n\033PBDeadRe"
      "ckoningEngineConfig\022\021\n\tvalidMask\030\001 \001(\004\022>"
      "\n\027bodyToSensorMountParams\030\002 \001(\0132\035.PBLIAB"
      "odyToSensorMountParams\022\037\n\027vehicleSpeedSc"
      "aleFactor\030\003 \001(\002\022\"\n\032vehicleSpeedScaleFact"
      "orUnc\030\004 \001(\002\022\027\n\017gyroScaleFactor\030\005 \001(\002\022\032\n\022"
      "gyroScaleFactorUnc\030\006 \001(\002*\247\001\n\033LocationApi"
      "DataTypesVersion\022!\n\035LOCAPI_DATA_TYPES_VE"
      "R_INVALID\020\000\022\037\n\033LOCAPI_DATA_TYPES_VER_MAJ"
      "OR\020\001\022\037\n\033LOCAPI_DATA_TYPES_VER_MINOR\020\000\022\037\n"
      "\033LOCAPI_DATA_TYPES_VER_MICRO\020\000\032\002\020\001*h\n\016PB"
      "GnssSuplMode\022 \n\034PB_GNSS_SUPL_MODE_STANDA"
      "LONE\020\000\022\031\n\025PB_GNSS_SUPL_MODE_MSB\020\001\022\031\n\025PB_"
      "GNSS_SUPL_MODE_MSA\020\002*\275\006\n\024PBGnssSignalTyp"
      "eMask\022$\n PB_GNSS_SIGNAL_TYPE_MASK_INVALI"
      "D\020\000\022\037\n\033PB_GNSS_SIGNAL_GPS_L1CA_BIT\020\001\022\036\n\032"
      "PB_GNSS_SIGNAL_GPS_L1C_BIT\020\002\022\035\n\031PB_GNSS_"
      "SIGNAL_GPS_L2_BIT\020\004\022\035\n\031PB_GNSS_SIGNAL_GP"
      "S_L5_BIT\020\010\022!\n\035PB_GNSS_SIGNAL_GLONASS_G1_"
      "BIT\020\020\022!\n\035PB_GNSS_SIGNAL_GLONASS_G2_BIT\020 "
      "\022!\n\035PB_GNSS_SIGNAL_GALILEO_E1_BIT\020@\022#\n\036P"
      "B_GNSS_SIGNAL_GALILEO_E5A_BIT\020\200\001\022#\n\036PB_G"
      "NSS_SIGNAL_GALILEO_E5B_BIT\020\200\002\022!\n\034PB_GNSS"
      "_SIGNAL_BEIDOU_B1_BIT\020\200\004\022!\n\034PB_GNSS_SIGN"
      "AL_BEIDOU_B2_BIT\020\200\010\022!\n\034PB_GNSS_SIGNAL_QZ"
      "SS_L1CA_BIT\020\200\020\022 \n\033PB_GNSS_SIGNAL_QZSS_L1"
      "S_BIT\020\200 \022\037\n\032PB_GNSS_SIGNAL_QZSS_L2_BIT\020\200"
      "@\022 \n\032PB_GNSS_SIGNAL_QZSS_L5_BIT\020\200\200\001\022 \n\032P"
      "B_GNSS_SIGNAL_SBAS_L1_BIT\020\200\200\002\022#\n\035PB_GNSS"
      "_SIGNAL_BEIDOU_B1I_BIT\020\200\200\004\022#\n\035PB_GNSS_SI"
      "GNAL_BEIDOU_B1C_BIT\020\200\200\010\022#\n\035PB_GNSS_SIGNA"
      "L_BEIDOU_B2I_BIT\020\200\200\020\022$\n\036PB_GNSS_SIGNAL_B"
      "EIDOU_B2AI_BIT\020\200\200 \022!\n\033PB_GNSS_SIGNAL_NAV"
      "IC_L5_BIT\020\200\200@\022%\n\036PB_GNSS_SIGNAL_BEIDOU_B"
      "2AQ_BIT\020\200\200\200\001*\252\002\n PBLocApiGnss_LocSvSyste"
      "mEnumType\022!\n\035PB_GNSS_LOC_SV_SYSTEM_INVAL"
      "ID\020\000\022\035\n\031PB_GNSS_LOC_SV_SYSTEM_GPS\020\001\022!\n\035P"
      "B_GNSS_LOC_SV_SYSTEM_GALILEO\020\002\022\036\n\032PB_GNS"
      "S_LOC_SV_SYSTEM_SBAS\020\003\022!\n\035PB_GNSS_LOC_SV"
      "_SYSTEM_GLONASS\020\004\022\035\n\031PB_GNSS_LOC_SV_SYST"
      "EM_BDS\020\005\022\036\n\032PB_GNSS_LOC_SV_SYSTEM_QZSS\020\006"
      "\022\037\n\033PB_GNSS_LOC_SV_SYSTEM_NAVIC\020\007*\226\001\n\030PB"
      "LocApiOutputEngineType\022\036\n\032PB_LOC_OUTPUT_"
      "ENGINE_FUSED\020\000\022\034\n\030PB_LOC_OUTPUT_ENGINE_S"
      "PE\020\001\022\034\n\030PB_LOC_OUTPUT_ENGINE_PPE\020\002\022\036\n\032PB"
      "_LOC_OUTPUT_ENGINE_COUNT\020\003*\311\001\n\025PBLocatio"
      "nReliability\022#\n\037PB_LOCATION_RELIABILITY_"
      "NOT_SET\020\000\022$\n PB_LOCATION_RELIABILITY_VER"
      "Y_LOW\020\001\022\037\n\033PB_LOCATION_RELIABILITY_LOW\020\002"
      "\022\"\n\036PB_LOCATION_RELIABILITY_MEDIUM\020\003\022 \n\034"
      "PB_LOCATION_RELIABILITY_HIGH\020\004*\300\014\n\032PBGns"
      "sLocationInfoFlagMask\022!\n\035PB_GNSS_LOCATIO"
      "N_INFO_INVALID\020\000\0225\n1PB_GNSS_LOCATION_INF"
      "O_ALTITUDE_MEAN_SEA_LEVEL_BIT\020\001\022!\n\035PB_GN"
      "SS_LOCATION_INFO_DOP_BIT\020\002\022%\n!PB_GNSS_LO"
      "CATION_INFO_EXT_DOP_BIT\020\004\0220\n,PB_GNSS_LOC"
      "ATION_INFO_MAGNETIC_DEVIATION_BIT\020\010\022-\n)P"
      "B_GNSS_LOCATION_INFO_HOR_RELIABILITY_BIT"
      "\020\020\022-\n)PB_GNSS_LOCATION_INFO_VER_RELIABIL"
      "ITY_BIT\020 \022:\n6PB_GNSS_LOCATION_INFO_HOR_A"
      "CCURACY_ELIP_SEMI_MAJOR_BIT\020@\022;\n6PB_GNSS"
      "_LOCATION_INFO_HOR_ACCURACY_ELIP_SEMI_MI"
      "NOR_BIT\020\200\001\0228\n3PB_GNSS_LOCATION_INFO_HOR_"
      "ACCURACY_ELIP_AZIMUTH_BIT\020\200\002\0220\n+PB_GNSS_"
      "LOCATION_INFO_GNSS_SV_USED_DATA_BIT\020\200\004\0220"
      "\n+PB_GNSS_LOCATION_INFO_NAV_SOLUTION_MAS"
      "K_BIT\020\200\010\0220\n+PB_GNSS_LOCATION_INFO_POS_DY"
      "NAMICS_DATA_BIT\020\200\020\022,\n\'PB_GNSS_LOCATION_I"
      "NFO_NORTH_STD_DEV_BIT\020\200 \022+\n&PB_GNSS_LOCA"
      "TION_INFO_EAST_STD_DEV_BIT\020\200@\022)\n#PB_GNSS"
      "_LOCATION_INFO_NORTH_VEL_BIT\020\200\200\001\022(\n\"PB_G"
      "NSS_LOCATION_INFO_EAST_VEL_BIT\020\200\200\002\022&\n PB"
      "_GNSS_LOCATION_INFO_UP_VEL_BIT\020\200\200\004\022-\n\'PB"
      "_GNSS_LOCATION_INFO_NORTH_VEL_UNC_BIT\020\200\200"
      "\010\022,\n&PB_GNSS_LOCATION_INFO_EAST_VEL_UNC_"
      "BIT\020\200\200\020\022*\n$PB_GNSS_LOCATION_INFO_UP_VEL_"
      "UNC_BIT\020\200\200 \022,\n&PB_GNSS_LOCATION_INFO_LEA"
      "P_SECONDS_BIT\020\200\200@\022)\n\"PB_GNSS_LOCATION_IN"
      "FO_TIME_UNC_BIT\020\200\200\200\001\0228\n1PB_GNSS_LOCATION"
      "_INFO_NUM_SV_USED_IN_POSITION_BIT\020\200\200\200\002\022\?"
      "\n8PB_GNSS_LOCATION_INFO_CALIBRATION_CONF"
      "IDENCE_PERCENT_BIT\020\200\200\200\004\0223\n,PB_GNSS_LOCAT"
      "ION_INFO_CALIBRATION_STATUS_BIT\020\200\200\200\010\0220\n)"
      "PB_GNSS_LOCATION_INFO_OUTPUT_ENG_TYPE_BI"
      "T\020\200\200\200\020\0220\n)PB_GNSS_LOCATION_INFO_OUTPUT_E"
      "NG_MASK_BIT\020\200\200\200 \0221\n*PB_GNSS_LOCATION_INF"
      "O_CONFORMITY_INDEX_BIT\020\200\200\200@\022/\n\'PB_GNSS_L"
      "OCATION_INFO_LLA_VRP_BASED_BIT\020\200\200\200\200\001\0228\n0"
      "PB_GNSS_LOCATION_INFO_ENU_VELOCITY_VRP_B"
      "ASED_BIT\020\200\200\200\200\002\0229\n1PB_GNSS_LOCATION_INFO_"
      "DR_SOLUTION_STATUS_MASK_BIT\020\200\200\200\200\004*\326\003\n\035PB"
      "GnssLocationNavSolutionMask\022)\n%PB_LOCATI"
      "ON_NAV_SOLUTION_MASK_INVALID\020\000\022(\n$PB_LOC"
      "ATION_SBAS_CORRECTION_IONO_BIT\020\001\022(\n$PB_L"
      "OCATION_SBAS_CORRECTION_FAST_BIT\020\002\022(\n$PB"
      "_LOCATION_SBAS_CORRECTION_LONG_BIT\020\004\022\"\n\036"
      "PB_LOCATION_SBAS_INTEGRITY_BIT\020\010\022(\n$PB_L"
      "OCATION_NAV_CORRECTION_DGNSS_BIT\020\020\022&\n\"PB"
      "_LOCATION_NAV_CORRECTION_RTK_BIT\020 \022&\n\"PB"
      "_LOCATION_NAV_CORRECTION_PPP_BIT\020@\022-\n(PB"
      "_LOCATION_NAV_CORRECTION_RTK_FIXED_BIT\020\200"
      "\001\022\?\n:PB_LOCATION_NAV_CORRECTION_ONLY_SBA"
      "S_CORRECTED_SV_USED_BIT\020\200\002*\213\002\n\021PBGnssSvT"
      "ypesMask\022!\n\035PB_GNSS_SV_TYPES_MASK_INVALI"
      "D\020\000\022!\n\035PB_GNSS_SV_TYPES_MASK_GLO_BIT\020\001\022!"
      "\n\035PB_GNSS_SV_TYPES_MASK_BDS_BIT\020\002\022\"\n\036PB_"
      "GNSS_SV_TYPES_MASK_QZSS_BIT\020\004\022!\n\035PB_GNSS"
      "_SV_TYPES_MASK_GAL_BIT\020\010\022#\n\037PB_GNSS_SV_T"
      "YPES_MASK_NAVIC_BIT\020\020\022!\n\035PB_GNSS_SV_TYPE"
      "S_MASK_GPS_BIT\020 *\226\002\n\031PBLocApiGnssSvOptio"
      "nsMask\022\036\n\032PB_GNSS_SV_OPTIONS_INVALID\020\000\022&"
      "\n\"PB_GNSS_SV_OPTIONS_HAS_EPHEMER_BIT\020\001\022&"
      "\n\"PB_GNSS_SV_OPTIONS_HAS_ALMANAC_BIT\020\002\022&"
      "\n\"PB_GNSS_SV_OPTIONS_USED_IN_FIX_BIT\020\004\0220"
      "\n,PB_GNSS_SV_OPTIONS_HAS_CARRIER_FREQUEN"
      "CY_BIT\020\010\022/\n+PB_GNSS_SV_OPTIONS_HAS_GNSS_"
      "SIGNAL_TYPE_BIT\020\020*\255\002\n\034PBGnssGloTimeStruc"
      "tTypeFlags\022\034\n\030PB_GNSS_CLO_TIME_UNKNOWN\020\000"
      "\022\037\n\033PB_GNSS_GLO_FOUR_YEAR_VALID\020\001\022\032\n\026PB_"
      "GNSS_CLO_DAYS_VALID\020\002\022\032\n\026PB_GNSS_GLO_MSE"
      "C_VALID\020\004\022#\n\037PB_GNSS_GLO_CLK_TIME_BIAS_V"
      "ALID\020\010\022\'\n#PB_GNSS_GLO_CLK_TIME_BIAS_UNC_"
      "VALID\020\020\022 \n\034PB_GNSS_GLO_REF_FCOUNT_VALID\020"
      " \022&\n\"PB_GNSS_GLO_NUM_CLOCK_RESETS_VALID\020"
      "@*\303\004\n PBGnssMeasurementsClockFlagsMask\022,"
      "\n(PB_GNSS_MEASUREMENTS_CLOCK_FLAGS_INVAL"
      "ID\020\000\0224\n0PB_GNSS_MEASUREMENTS_CLOCK_FLAGS"
      "_LEAP_SECOND_BIT\020\001\022-\n)PB_GNSS_MEASUREMEN"
      "TS_CLOCK_FLAGS_TIME_BIT\020\002\0229\n5PB_GNSS_MEA"
      "SUREMENTS_CLOCK_FLAGS_TIME_UNCERTAINTY_B"
      "IT\020\004\0222\n.PB_GNSS_MEASUREMENTS_CLOCK_FLAGS"
      "_FULL_BIAS_BIT\020\010\022-\n)PB_GNSS_MEASUREMENTS"
      "_CLOCK_FLAGS_BIAS_BIT\020\020\0229\n5PB_GNSS_MEASU"
      "REMENTS_CLOCK_FLAGS_BIAS_UNCERTAINTY_BIT"
      "\020 \022.\n*PB_GNSS_MEASUREMENTS_CLOCK_FLAGS_D"
      "RIFT_BIT\020@\022;\n6PB_GNSS_MEASUREMENTS_CLOCK"
      "_FLAGS_DRIFT_UNCERTAINTY_BIT\020\200\001\022F\nAPB_GN"
      "SS_MEASUREMENTS_CLOCK_FLAGS_HW_CLOCK_DIS"
      "CONTINUITY_COUNT_BIT\020\200\002*\274\002\n%PBLocApiGnss"
      "SystemTimeStructTypeFlags\022$\n PB_GNSS_SYS"
      "TEM_TIME_FLAG_INVALID\020\000\022\"\n\036PB_GNSS_SYSTE"
      "M_TIME_WEEK_VALID\020\001\022%\n!PB_GNSS_SYSTEM_TI"
      "ME_WEEK_MS_VALID\020\002\022&\n\"PB_GNSS_SYSTEM_CLK"
      "_TIME_BIAS_VALID\020\004\022*\n&PB_GNSS_SYSTEM_CLK"
      "_TIME_BIAS_UNC_VALID\020\010\022#\n\037PB_GNSS_SYSTEM"
      "_REF_FCOUNT_VALID\020\020\022)\n%PB_GNSS_SYSTEM_NU"
      "M_CLOCK_RESETS_VALID\020 *\374\001\n#PBGnssConfigR"
      "obustLocationValidMask\022*\n&PB_GNSS_CONFIG"
      "_ROBUST_LOCATION_INVALID\020\000\0224\n0PB_GNSS_CO"
      "NFIG_ROBUST_LOCATION_ENABLED_VALID_BIT\020\001"
      "\022=\n9PB_GNSS_CONFIG_ROBUST_LOCATION_ENABL"
      "ED_FOR_E911_VALID_BIT\020\002\0224\n0PB_GNSS_CONFI"
      "G_ROBUST_LOCATION_VERSION_VALID_BIT\020\004*b\n"
      "\030PBLocationSystemInfoMask\022 \n\034PB_LOCATION"
      "_SYS_INFO_INVALID\020\000\022$\n PB_LOCATION_SYS_I"
      "NFO_LEAP_SECOND\020\001*\356\001\n\037PBLocApiDrCalibrat"
      "ionStatusMask\022\035\n\031PB_DR_CALIBRATION_INVAL"
      "ID\020\000\022!\n\035PB_DR_ROLL_CALIBRATION_NEEDED\020\001\022"
      "\"\n\036PB_DR_PITCH_CALIBRATION_NEEDED\020\002\022 \n\034P"
      "B_DR_YAW_CALIBRATION_NEEDED\020\004\022 \n\034PB_DR_O"
      "DO_CALIBRATION_NEEDED\020\010\022!\n\035PB_DR_GYRO_CA"
      "LIBRATION_NEEDED\020\020*\250\001\n\027PBLeapSecondSysIn"
      "foMask\022#\n\037PB_LEAP_SECOND_SYS_INFO_INVALI"
      "D\020\000\0224\n0PB_LEAP_SECOND_SYS_INFO_CURRENT_L"
      "EAP_SECONDS_BIT\020\001\0222\n.PB_LEAP_SECOND_SYS_"
      "INFO_LEAP_SECOND_CHANGE_BIT\020\002*\364\006\n\037PBLocA"
      "piGnssLocationPosDataMask\022 \n\034PB_LOCATION"
      "_NAV_DATA_INVALID\020\000\022+\n\'PB_LOCATION_NAV_D"
      "ATA_HAS_LONG_ACCEL_BIT\020\001\022*\n&PB_LOCATION_"
      "NAV_DATA_HAS_LAT_ACCEL_BIT\020\002\022+\n\'PB_LOCAT"
      "ION_NAV_DATA_HAS_VERT_ACCEL_BIT\020\004\022)\n%PB_"
      "LOCATION_NAV_DATA_HAS_YAW_RATE_BIT\020\010\022-\n)"
      "PB_LOCATION_NAV_DATA_HAS_YAW_RATE_UNC_BI"
      "T\020\020\022$\n PB_LOCATION_NAV_DATA_HAS_YAW_BIT\020"
      " \022(\n$PB_LOCATION_NAV_DATA_HAS_YAW_UNC_BI"
      "T\020@\022\'\n\"PB_LOCATION_NAV_DATA_HAS_PITCH_BI"
      "T\020\200\001\022+\n&PB_LOCATION_NAV_DATA_HAS_PITCH_U"
      "NC_BIT\020\200\002\022,\n\'PB_LOCATION_NAV_DATA_HAS_PI"
      "TCH_RATE_BIT\020\200\004\0220\n+PB_LOCATION_NAV_DATA_"
      "HAS_PITCH_RATE_UNC_BIT\020\200\010\0220\n+PB_LOCATION"
      "_NAV_DATA_HAS_LONG_ACCEL_UNC_BIT\020\200\020\022/\n*P"
      "B_LOCATION_NAV_DATA_HAS_LAT_ACCEL_UNC_BI"
      "T\020\200 \0220\n+PB_LOCATION_NAV_DATA_HAS_VERT_AC"
      "CEL_UNC_BIT\020\200@\022\'\n!PB_LOCATION_NAV_DATA_H"
      "AS_ROLL_BIT\020\200\200\001\022+\n%PB_LOCATION_NAV_DATA_"
      "HAS_ROLL_UNC_BIT\020\200\200\002\022,\n&PB_LOCATION_NAV_"
      "DATA_HAS_ROLL_RATE_BIT\020\200\200\004\0220\n*PB_LOCATIO"
      "N_NAV_DATA_HAS_ROLL_RATE_UNC_BIT\020\200\200\010*n\n\016"
      "PBBatchingMode\022\034\n\030PB_BATCHING_MODE_ROUTI"
      "NE\020\000\022\031\n\025PB_BATCHING_MODE_TRIP\020\001\022#\n\037PB_BA"
      "TCHING_MODE_NO_AUTO_REPORT\020\002*\220\001\n\020PBBatch"
      "ingStatus\022%\n!PB_BATCHING_STATUS_TRIP_COM"
      "PLETED\020\000\022(\n$PB_BATCHING_STATUS_POSITION_"
      "AVAILABE\020\001\022+\n\'PB_BATCHING_STATUS_POSITIO"
      "N_UNAVAILABLE\020\002*~\n\017PBLocationError\022\035\n\031PB"
      "_LOCATION_ERROR_SUCCESS\020\000\022\'\n#PB_LOCATION"
      "_ERROR_INVALID_PARAMETER\020\001\022#\n\037PB_LOCATIO"
      "N_ERROR_NOT_SUPPORTED\020\002*\226\001\n\026PBLocReqEngi"
      "neTypeMask\022\035\n\031PB_LOC_REQ_ENGINE_INVALID\020"
      "\000\022\037\n\033PB_LOC_REQ_ENGINE_FUSED_BIT\020\001\022\035\n\031PB"
      "_LOC_REQ_ENGINE_SPE_BIT\020\002\022\035\n\031PB_LOC_REQ_"
      "ENGINE_PPE_BIT\020\004*\241\001\n\035PBLocApiPositioning"
      "EngineMask\022\033\n\027PB_POS_ENG_MASK_INVALID\020\000\022"
      "\"\n\036PB_STANDARD_POSITIONING_ENGINE\020\001\022\034\n\030P"
      "B_DEAD_RECKONING_ENGINE\020\002\022!\n\035PB_PRECISE_"
      "POSITIONING_ENGINE\020\004*n\n\030PBDrEngineAiding"
      "DataMask\022$\n PB_DR_ENGINE_AIDING_DATA_INV"
      "ALID\020\000\022,\n(PB_DR_ENGINE_AIDING_DATA_CALIB"
      "RATION_BIT\020\001*\253\002\n\036PBGnssMeasurementsAdrSt"
      "ateMask\022>\n:PB_GNSS_MEASUREMENTS_ACCUMULA"
      "TED_DELTA_RANGE_STATE_UNKNOWN\020\000\022@\n<PB_GN"
      "SS_MEASUREMENTS_ACCUMULATED_DELTA_RANGE_"
      "STATE_VALID_BIT\020\001\022@\n<PB_GNSS_MEASUREMENT"
      "S_ACCUMULATED_DELTA_RANGE_STATE_RESET_BI"
      "T\020\002\022E\nAPB_GNSS_MEASUREMENTS_ACCUMULATED_"
      "DELTA_RANGE_STATE_CYCLE_SLIP_BIT\020\004*\366\007\n\037P"
      "BGnssMeasurementsDataFlagsMask\022%\n!PB_GNS"
      "S_MEASUREMENTS_DATA_INVALID\020\000\022\'\n#PB_GNSS"
      "_MEASUREMENTS_DATA_SV_ID_BIT\020\001\022)\n%PB_GNS"
      "S_MEASUREMENTS_DATA_SV_TYPE_BIT\020\002\022\'\n#PB_"
      "GNSS_MEASUREMENTS_DATA_STATE_BIT\020\004\0222\n.PB"
      "_GNSS_MEASUREMENTS_DATA_RECEIVED_SV_TIME"
      "_BIT\020\010\022>\n:PB_GNSS_MEASUREMENTS_DATA_RECE"
      "IVED_SV_TIME_UNCERTAINTY_BIT\020\020\0222\n.PB_GNS"
      "S_MEASUREMENTS_DATA_CARRIER_TO_NOISE_BIT"
      "\020 \0222\n.PB_GNSS_MEASUREMENTS_DATA_PSEUDORA"
      "NGE_RATE_BIT\020@\022\?\n:PB_GNSS_MEASUREMENTS_D"
      "ATA_PSEUDORANGE_RATE_UNCERTAINTY_BIT\020\200\001\022"
      ",\n\'PB_GNSS_MEASUREMENTS_DATA_ADR_STATE_B"
      "IT\020\200\002\022&\n!PB_GNSS_MEASUREMENTS_DATA_ADR_B"
      "IT\020\200\004\0222\n-PB_GNSS_MEASUREMENTS_DATA_ADR_U"
      "NCERTAINTY_BIT\020\200\010\0224\n/PB_GNSS_MEASUREMENT"
      "S_DATA_CARRIER_FREQUENCY_BIT\020\200\020\0221\n,PB_GN"
      "SS_MEASUREMENTS_DATA_CARRIER_CYCLES_BIT\020"
      "\200 \0220\n+PB_GNSS_MEASUREMENTS_DATA_CARRIER_"
      "PHASE_BIT\020\200@\022=\n7PB_GNSS_MEASUREMENTS_DAT"
      "A_CARRIER_PHASE_UNCERTAINTY_BIT\020\200\200\001\0227\n1P"
      "B_GNSS_MEASUREMENTS_DATA_MULTIPATH_INDIC"
      "ATOR_BIT\020\200\200\002\0229\n3PB_GNSS_MEASUREMENTS_DAT"
      "A_SIGNAL_TO_NOISE_RATIO_BIT\020\200\200\004\022:\n4PB_GN"
      "SS_MEASUREMENTS_DATA_AUTOMATIC_GAIN_CONT"
      "ROL_BIT\020\200\200\010*\232\006\n\033PBGnssMeasurementsStateM"
      "ask\022*\n&PB_GNSS_MEASUREMENTS_STATE_UNKNOW"
      "N_BIT\020\000\022,\n(PB_GNSS_MEASUREMENTS_STATE_CO"
      "DE_LOCK_BIT\020\001\022+\n\'PB_GNSS_MEASUREMENTS_ST"
      "ATE_BIT_SYNC_BIT\020\002\0220\n,PB_GNSS_MEASUREMEN"
      "TS_STATE_SUBFRAME_SYNC_BIT\020\004\022.\n*PB_GNSS_"
      "MEASUREMENTS_STATE_TOW_DECODED_BIT\020\010\0221\n-"
      "PB_GNSS_MEASUREMENTS_STATE_MSEC_AMBIGUOU"
      "S_BIT\020\020\022.\n*PB_GNSS_MEASUREMENTS_STATE_SY"
      "MBOL_SYNC_BIT\020 \0222\n.PB_GNSS_MEASUREMENTS_"
      "STATE_GLO_STRING_SYNC_BIT\020@\0223\n.PB_GNSS_M"
      "EASUREMENTS_STATE_GLO_TOD_DECODED_BIT\020\200\001"
      "\0223\n.PB_GNSS_MEASUREMENTS_STATE_BDS_D2_BI"
      "T_SYNC_BIT\020\200\002\0228\n3PB_GNSS_MEASUREMENTS_ST"
      "ATE_BDS_D2_SUBFRAME_SYNC_BIT\020\200\004\0226\n1PB_GN"
      "SS_MEASUREMENTS_STATE_GAL_E1BC_CODE_LOCK"
      "_BIT\020\200\010\0229\n4PB_GNSS_MEASUREMENTS_STATE_GA"
      "L_E1C_2ND_CODE_LOCK_BIT\020\200\020\0225\n0PB_GNSS_ME"
      "ASUREMENTS_STATE_GAL_E1B_PAGE_SYNC_BIT\020\200"
      " \022-\n(PB_GNSS_MEASUREMENTS_STATE_SBAS_SYN"
      "C_BIT\020\200@*\314\001\n$PBGnssMeasurementsMultipath"
      "Indicator\0224\n0PB_GNSS_MEASUREMENTS_MULTIP"
      "ATH_INDICATOR_UNKNOWN\020\000\0224\n0PB_GNSS_MEASU"
      "REMENTS_MULTIPATH_INDICATOR_PRESENT\020\001\0228\n"
      "4PB_GNSS_MEASUREMENTS_MULTIPATH_INDICATO"
      "R_NOT_PRESENT\020\002*g\n\034PBLocApiGnssAidingDat"
      "aSvMask\022\"\n\036PB_AIDING_DATA_SV_MASK_INVALI"
      "D\020\000\022#\n\037PB_AIDING_DATA_SV_EPHEMERIS_BIT\020\001"
      "*\374\002\n\023PBLocationFlagsMask\022\035\n\031PB_LOCATION_"
      "FLAGS_INVALID\020\000\022 \n\034PB_LOCATION_HAS_LAT_L"
      "ONG_BIT\020\001\022 \n\034PB_LOCATION_HAS_ALTITUDE_BI"
      "T\020\002\022\035\n\031PB_LOCATION_HAS_SPEED_BIT\020\004\022\037\n\033PB"
      "_LOCATION_HAS_BEARING_BIT\020\010\022 \n\034PB_LOCATI"
      "ON_HAS_ACCURACY_BIT\020\020\022)\n%PB_LOCATION_HAS"
      "_VERTICAL_ACCURACY_BIT\020 \022&\n\"PB_LOCATION_"
      "HAS_SPEED_ACCURACY_BIT\020@\022)\n$PB_LOCATION_"
      "HAS_BEARING_ACCURACY_BIT\020\200\001\022\"\n\035PB_LOCATI"
      "ON_HAS_TIMESTAMP_BIT\020\200\002*\263\003\n\030PBLocationTe"
      "chnologyMask\022\"\n\036PB_LOCATION_TECHNOLOGY_I"
      "NVALID\020\000\022#\n\037PB_LOCATION_TECHNOLOGY_GNSS_"
      "BIT\020\001\022#\n\037PB_LOCATION_TECHNOLOGY_CELL_BIT"
      "\020\002\022#\n\037PB_LOCATION_TECHNOLOGY_WIFI_BIT\020\004\022"
      "&\n\"PB_LOCATION_TECHNOLOGY_SENSORS_BIT\020\010\022"
      "1\n-PB_LOCATION_TECHNOLOGY_REFERENCE_LOCA"
      "TION_BIT\020\020\0227\n3PB_LOCATION_TECHNOLOGY_INJ"
      "ECTED_COARSE_POSITION_BIT\020 \022#\n\037PB_LOCATI"
      "ON_TECHNOLOGY_AFLT_BIT\020@\022&\n!PB_LOCATION_"
      "TECHNOLOGY_HYBRID_BIT\020\200\001\022#\n\036PB_LOCATION_"
      "TECHNOLOGY_PPE_BIT\020\200\002*\315\002\n\032PBLocationCapa"
      "bilitiesMask\022\034\n\030PB_LOCATION_CAPS_INVALID"
      "\020\000\022,\n(PB_LOCATION_CAPS_TIME_BASED_TRACKI"
      "NG_BIT\020\001\022,\n(PB_LOCATION_CAPS_TIME_BASED_"
      "BATCHING_BIT\020\002\0220\n,PB_LOCATION_CAPS_DISTA"
      "NCE_BASED_TRACKING_BIT\020\004\0220\n,PB_LOCATION_"
      "CAPS_DISTANCE_BASED_BATCHING_BIT\020\010\022!\n\035PB"
      "_LOCATION_CAPS_GEOFENCE_BIT\020\020\022.\n*PB_LOCA"
      "TION_CAPS_OUTDOOR_TRIP_BATCHING_BIT\020 *q\n"
      "\016PBGnssDataMask\022\034\n\030PB_GNSS_LOC_DATA_INVA"
      "LID\020\000\022#\n\037PB_GNSS_LOC_DATA_JAMMER_IND_BIT"
      "\020\001\022\034\n\030PB_GNSS_LOC_DATA_AGC_BIT\020\002*\263\001\n\025PBL"
      "IALeverArmTypeMask\022\035\n\031PB_LEVER_ARM_TYPE_"
      "INVALID\020\000\022%\n!PB_LEVER_ARM_TYPE_GNSS_TO_V"
      "RP_BIT\020\001\022(\n$PB_LEVER_ARM_TYPE_DR_IMU_TO_"
      "GNSS_BIT\020\002\022*\n&PB_LEVER_ARM_TYPE_VEPP_IMU"
      "_TO_GNSS_BIT\020\004*\217\001\n\026PBDrSolutionStatusMas"
      "k\022!\n\035PB_VEHICLE_DRSOLUTION_INVALID\020\000\022*\n&"
      "PB_VEHICLE_SENSOR_SPEED_INPUT_DETECTED\020\001"
      "\022&\n\"PB_VEHICLE_SENSOR_SPEED_INPUT_USED\020\002"
      "*\210\002\n$PBDeadReckoningEngineConfigValidMas"
      "k\022&\n\"PB_DR_RECKON_ENGINE_CONFIG_INVALID\020"
      "\000\022&\n\"PB_BODY_TO_SENSOR_MOUNT_PARAMS_BIT\020"
      "\001\022%\n!PB_VEHICLE_SPEED_SCALE_FACTOR_BIT\020\002"
      "\022)\n%PB_VEHICLE_SPEED_SCALE_FACTOR_UNC_BI"
      "T\020\004\022\034\n\030PB_GYRO_SCALE_FACTOR_BIT\020\010\022 \n\034PB_"
      "GYRO_SCALE_FACTOR_UNC_BIT\020\020b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 18755);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "LocationApiDataTypes.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_LocationApiDataTypes_2eproto

const ::google::protobuf::EnumDescriptor* LocationApiDataTypesVersion_descriptor() {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_enum_descriptors[0];
}
bool LocationApiDataTypesVersion_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PBGnssSuplMode_descriptor() {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_enum_descriptors[1];
}
bool PBGnssSuplMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PBGnssSignalTypeMask_descriptor() {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_enum_descriptors[2];
}
bool PBGnssSignalTypeMask_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
    case 8192:
    case 16384:
    case 32768:
    case 65536:
    case 131072:
    case 262144:
    case 524288:
    case 1048576:
    case 2097152:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PBLocApiGnss_LocSvSystemEnumType_descriptor() {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_enum_descriptors[3];
}
bool PBLocApiGnss_LocSvSystemEnumType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PBLocApiOutputEngineType_descriptor() {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_enum_descriptors[4];
}
bool PBLocApiOutputEngineType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PBLocationReliability_descriptor() {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_enum_descriptors[5];
}
bool PBLocationReliability_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PBGnssLocationInfoFlagMask_descriptor() {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_enum_descriptors[6];
}
bool PBGnssLocationInfoFlagMask_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
    case 8192:
    case 16384:
    case 32768:
    case 65536:
    case 131072:
    case 262144:
    case 524288:
    case 1048576:
    case 2097152:
    case 4194304:
    case 8388608:
    case 16777216:
    case 33554432:
    case 67108864:
    case 134217728:
    case 268435456:
    case 536870912:
    case 1073741824:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PBGnssLocationNavSolutionMask_descriptor() {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_enum_descriptors[7];
}
bool PBGnssLocationNavSolutionMask_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PBGnssSvTypesMask_descriptor() {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_enum_descriptors[8];
}
bool PBGnssSvTypesMask_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PBLocApiGnssSvOptionsMask_descriptor() {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_enum_descriptors[9];
}
bool PBLocApiGnssSvOptionsMask_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PBGnssGloTimeStructTypeFlags_descriptor() {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_enum_descriptors[10];
}
bool PBGnssGloTimeStructTypeFlags_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PBGnssMeasurementsClockFlagsMask_descriptor() {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_enum_descriptors[11];
}
bool PBGnssMeasurementsClockFlagsMask_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PBLocApiGnssSystemTimeStructTypeFlags_descriptor() {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_enum_descriptors[12];
}
bool PBLocApiGnssSystemTimeStructTypeFlags_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PBGnssConfigRobustLocationValidMask_descriptor() {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_enum_descriptors[13];
}
bool PBGnssConfigRobustLocationValidMask_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PBLocationSystemInfoMask_descriptor() {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_enum_descriptors[14];
}
bool PBLocationSystemInfoMask_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PBLocApiDrCalibrationStatusMask_descriptor() {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_enum_descriptors[15];
}
bool PBLocApiDrCalibrationStatusMask_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PBLeapSecondSysInfoMask_descriptor() {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_enum_descriptors[16];
}
bool PBLeapSecondSysInfoMask_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PBLocApiGnssLocationPosDataMask_descriptor() {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_enum_descriptors[17];
}
bool PBLocApiGnssLocationPosDataMask_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
    case 8192:
    case 16384:
    case 32768:
    case 65536:
    case 131072:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PBBatchingMode_descriptor() {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_enum_descriptors[18];
}
bool PBBatchingMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PBBatchingStatus_descriptor() {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_enum_descriptors[19];
}
bool PBBatchingStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PBLocationError_descriptor() {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_enum_descriptors[20];
}
bool PBLocationError_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PBLocReqEngineTypeMask_descriptor() {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_enum_descriptors[21];
}
bool PBLocReqEngineTypeMask_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PBLocApiPositioningEngineMask_descriptor() {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_enum_descriptors[22];
}
bool PBLocApiPositioningEngineMask_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PBDrEngineAidingDataMask_descriptor() {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_enum_descriptors[23];
}
bool PBDrEngineAidingDataMask_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PBGnssMeasurementsAdrStateMask_descriptor() {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_enum_descriptors[24];
}
bool PBGnssMeasurementsAdrStateMask_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PBGnssMeasurementsDataFlagsMask_descriptor() {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_enum_descriptors[25];
}
bool PBGnssMeasurementsDataFlagsMask_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
    case 8192:
    case 16384:
    case 32768:
    case 65536:
    case 131072:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PBGnssMeasurementsStateMask_descriptor() {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_enum_descriptors[26];
}
bool PBGnssMeasurementsStateMask_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
    case 8192:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PBGnssMeasurementsMultipathIndicator_descriptor() {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_enum_descriptors[27];
}
bool PBGnssMeasurementsMultipathIndicator_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PBLocApiGnssAidingDataSvMask_descriptor() {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_enum_descriptors[28];
}
bool PBLocApiGnssAidingDataSvMask_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PBLocationFlagsMask_descriptor() {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_enum_descriptors[29];
}
bool PBLocationFlagsMask_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PBLocationTechnologyMask_descriptor() {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_enum_descriptors[30];
}
bool PBLocationTechnologyMask_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PBLocationCapabilitiesMask_descriptor() {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_enum_descriptors[31];
}
bool PBLocationCapabilitiesMask_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PBGnssDataMask_descriptor() {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_enum_descriptors[32];
}
bool PBGnssDataMask_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PBLIALeverArmTypeMask_descriptor() {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_enum_descriptors[33];
}
bool PBLIALeverArmTypeMask_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PBDrSolutionStatusMask_descriptor() {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_enum_descriptors[34];
}
bool PBDrSolutionStatusMask_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PBDeadReckoningEngineConfigValidMask_descriptor() {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_enum_descriptors[35];
}
bool PBDeadReckoningEngineConfigValidMask_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PBLocation::kFlagsFieldNumber;
const int PBLocation::kTimestampFieldNumber;
const int PBLocation::kLatitudeFieldNumber;
const int PBLocation::kLongitudeFieldNumber;
const int PBLocation::kAltitudeFieldNumber;
const int PBLocation::kSpeedFieldNumber;
const int PBLocation::kBearingFieldNumber;
const int PBLocation::kHorizontalAccuracyFieldNumber;
const int PBLocation::kVerticalAccuracyFieldNumber;
const int PBLocation::kSpeedAccuracyFieldNumber;
const int PBLocation::kBearingAccuracyFieldNumber;
const int PBLocation::kTechMaskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PBLocation::PBLocation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_LocationApiDataTypes_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBLocation)
}
PBLocation::PBLocation(const PBLocation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    reinterpret_cast<char*>(&techmask_) -
    reinterpret_cast<char*>(&timestamp_) + sizeof(techmask_));
  // @@protoc_insertion_point(copy_constructor:PBLocation)
}

void PBLocation::SharedCtor() {
  ::memset(&timestamp_, 0, reinterpret_cast<char*>(&techmask_) -
    reinterpret_cast<char*>(&timestamp_) + sizeof(techmask_));
  _cached_size_ = 0;
}

PBLocation::~PBLocation() {
  // @@protoc_insertion_point(destructor:PBLocation)
  SharedDtor();
}

void PBLocation::SharedDtor() {
}

void PBLocation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBLocation::descriptor() {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PBLocation& PBLocation::default_instance() {
  protobuf_LocationApiDataTypes_2eproto::InitDefaults();
  return *internal_default_instance();
}

PBLocation* PBLocation::New(::google::protobuf::Arena* arena) const {
  PBLocation* n = new PBLocation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:PBLocation)
  ::memset(&timestamp_, 0, reinterpret_cast<char*>(&techmask_) -
    reinterpret_cast<char*>(&timestamp_) + sizeof(techmask_));
}

bool PBLocation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBLocation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 flags = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double latitude = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double longitude = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double altitude = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &altitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float speed = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float bearing = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bearing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float horizontalAccuracy = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &horizontalaccuracy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float verticalAccuracy = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &verticalaccuracy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float speedAccuracy = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speedaccuracy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float bearingAccuracy = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bearingaccuracy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 techMask = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &techmask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBLocation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBLocation)
  return false;
#undef DO_
}

void PBLocation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 flags = 1;
  if (this->flags() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->flags(), output);
  }

  // uint64 timestamp = 2;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->timestamp(), output);
  }

  // double latitude = 3;
  if (this->latitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->latitude(), output);
  }

  // double longitude = 4;
  if (this->longitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->longitude(), output);
  }

  // double altitude = 5;
  if (this->altitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->altitude(), output);
  }

  // float speed = 6;
  if (this->speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->speed(), output);
  }

  // float bearing = 7;
  if (this->bearing() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->bearing(), output);
  }

  // float horizontalAccuracy = 8;
  if (this->horizontalaccuracy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->horizontalaccuracy(), output);
  }

  // float verticalAccuracy = 9;
  if (this->verticalaccuracy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->verticalaccuracy(), output);
  }

  // float speedAccuracy = 10;
  if (this->speedaccuracy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->speedaccuracy(), output);
  }

  // float bearingAccuracy = 11;
  if (this->bearingaccuracy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->bearingaccuracy(), output);
  }

  // uint32 techMask = 12;
  if (this->techmask() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->techmask(), output);
  }

  // @@protoc_insertion_point(serialize_end:PBLocation)
}

::google::protobuf::uint8* PBLocation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 flags = 1;
  if (this->flags() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->flags(), target);
  }

  // uint64 timestamp = 2;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->timestamp(), target);
  }

  // double latitude = 3;
  if (this->latitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->latitude(), target);
  }

  // double longitude = 4;
  if (this->longitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->longitude(), target);
  }

  // double altitude = 5;
  if (this->altitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->altitude(), target);
  }

  // float speed = 6;
  if (this->speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->speed(), target);
  }

  // float bearing = 7;
  if (this->bearing() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->bearing(), target);
  }

  // float horizontalAccuracy = 8;
  if (this->horizontalaccuracy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->horizontalaccuracy(), target);
  }

  // float verticalAccuracy = 9;
  if (this->verticalaccuracy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->verticalaccuracy(), target);
  }

  // float speedAccuracy = 10;
  if (this->speedaccuracy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->speedaccuracy(), target);
  }

  // float bearingAccuracy = 11;
  if (this->bearingaccuracy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->bearingaccuracy(), target);
  }

  // uint32 techMask = 12;
  if (this->techmask() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->techmask(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PBLocation)
  return target;
}

size_t PBLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBLocation)
  size_t total_size = 0;

  // uint64 timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  // double latitude = 3;
  if (this->latitude() != 0) {
    total_size += 1 + 8;
  }

  // uint32 flags = 1;
  if (this->flags() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->flags());
  }

  // float speed = 6;
  if (this->speed() != 0) {
    total_size += 1 + 4;
  }

  // double longitude = 4;
  if (this->longitude() != 0) {
    total_size += 1 + 8;
  }

  // double altitude = 5;
  if (this->altitude() != 0) {
    total_size += 1 + 8;
  }

  // float bearing = 7;
  if (this->bearing() != 0) {
    total_size += 1 + 4;
  }

  // float horizontalAccuracy = 8;
  if (this->horizontalaccuracy() != 0) {
    total_size += 1 + 4;
  }

  // float verticalAccuracy = 9;
  if (this->verticalaccuracy() != 0) {
    total_size += 1 + 4;
  }

  // float speedAccuracy = 10;
  if (this->speedaccuracy() != 0) {
    total_size += 1 + 4;
  }

  // float bearingAccuracy = 11;
  if (this->bearingaccuracy() != 0) {
    total_size += 1 + 4;
  }

  // uint32 techMask = 12;
  if (this->techmask() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->techmask());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBLocation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PBLocation)
  GOOGLE_DCHECK_NE(&from, this);
  const PBLocation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PBLocation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PBLocation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PBLocation)
    MergeFrom(*source);
  }
}

void PBLocation::MergeFrom(const PBLocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBLocation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.latitude() != 0) {
    set_latitude(from.latitude());
  }
  if (from.flags() != 0) {
    set_flags(from.flags());
  }
  if (from.speed() != 0) {
    set_speed(from.speed());
  }
  if (from.longitude() != 0) {
    set_longitude(from.longitude());
  }
  if (from.altitude() != 0) {
    set_altitude(from.altitude());
  }
  if (from.bearing() != 0) {
    set_bearing(from.bearing());
  }
  if (from.horizontalaccuracy() != 0) {
    set_horizontalaccuracy(from.horizontalaccuracy());
  }
  if (from.verticalaccuracy() != 0) {
    set_verticalaccuracy(from.verticalaccuracy());
  }
  if (from.speedaccuracy() != 0) {
    set_speedaccuracy(from.speedaccuracy());
  }
  if (from.bearingaccuracy() != 0) {
    set_bearingaccuracy(from.bearingaccuracy());
  }
  if (from.techmask() != 0) {
    set_techmask(from.techmask());
  }
}

void PBLocation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PBLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBLocation::CopyFrom(const PBLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBLocation::IsInitialized() const {
  return true;
}

void PBLocation::Swap(PBLocation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBLocation::InternalSwap(PBLocation* other) {
  std::swap(timestamp_, other->timestamp_);
  std::swap(latitude_, other->latitude_);
  std::swap(flags_, other->flags_);
  std::swap(speed_, other->speed_);
  std::swap(longitude_, other->longitude_);
  std::swap(altitude_, other->altitude_);
  std::swap(bearing_, other->bearing_);
  std::swap(horizontalaccuracy_, other->horizontalaccuracy_);
  std::swap(verticalaccuracy_, other->verticalaccuracy_);
  std::swap(speedaccuracy_, other->speedaccuracy_);
  std::swap(bearingaccuracy_, other->bearingaccuracy_);
  std::swap(techmask_, other->techmask_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PBLocation::GetMetadata() const {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PBLocation

// uint32 flags = 1;
void PBLocation::clear_flags() {
  flags_ = 0u;
}
::google::protobuf::uint32 PBLocation::flags() const {
  // @@protoc_insertion_point(field_get:PBLocation.flags)
  return flags_;
}
void PBLocation::set_flags(::google::protobuf::uint32 value) {

  flags_ = value;
  // @@protoc_insertion_point(field_set:PBLocation.flags)
}

// uint64 timestamp = 2;
void PBLocation::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 PBLocation::timestamp() const {
  // @@protoc_insertion_point(field_get:PBLocation.timestamp)
  return timestamp_;
}
void PBLocation::set_timestamp(::google::protobuf::uint64 value) {

  timestamp_ = value;
  // @@protoc_insertion_point(field_set:PBLocation.timestamp)
}

// double latitude = 3;
void PBLocation::clear_latitude() {
  latitude_ = 0;
}
double PBLocation::latitude() const {
  // @@protoc_insertion_point(field_get:PBLocation.latitude)
  return latitude_;
}
void PBLocation::set_latitude(double value) {

  latitude_ = value;
  // @@protoc_insertion_point(field_set:PBLocation.latitude)
}

// double longitude = 4;
void PBLocation::clear_longitude() {
  longitude_ = 0;
}
double PBLocation::longitude() const {
  // @@protoc_insertion_point(field_get:PBLocation.longitude)
  return longitude_;
}
void PBLocation::set_longitude(double value) {

  longitude_ = value;
  // @@protoc_insertion_point(field_set:PBLocation.longitude)
}

// double altitude = 5;
void PBLocation::clear_altitude() {
  altitude_ = 0;
}
double PBLocation::altitude() const {
  // @@protoc_insertion_point(field_get:PBLocation.altitude)
  return altitude_;
}
void PBLocation::set_altitude(double value) {

  altitude_ = value;
  // @@protoc_insertion_point(field_set:PBLocation.altitude)
}

// float speed = 6;
void PBLocation::clear_speed() {
  speed_ = 0;
}
float PBLocation::speed() const {
  // @@protoc_insertion_point(field_get:PBLocation.speed)
  return speed_;
}
void PBLocation::set_speed(float value) {

  speed_ = value;
  // @@protoc_insertion_point(field_set:PBLocation.speed)
}

// float bearing = 7;
void PBLocation::clear_bearing() {
  bearing_ = 0;
}
float PBLocation::bearing() const {
  // @@protoc_insertion_point(field_get:PBLocation.bearing)
  return bearing_;
}
void PBLocation::set_bearing(float value) {

  bearing_ = value;
  // @@protoc_insertion_point(field_set:PBLocation.bearing)
}

// float horizontalAccuracy = 8;
void PBLocation::clear_horizontalaccuracy() {
  horizontalaccuracy_ = 0;
}
float PBLocation::horizontalaccuracy() const {
  // @@protoc_insertion_point(field_get:PBLocation.horizontalAccuracy)
  return horizontalaccuracy_;
}
void PBLocation::set_horizontalaccuracy(float value) {

  horizontalaccuracy_ = value;
  // @@protoc_insertion_point(field_set:PBLocation.horizontalAccuracy)
}

// float verticalAccuracy = 9;
void PBLocation::clear_verticalaccuracy() {
  verticalaccuracy_ = 0;
}
float PBLocation::verticalaccuracy() const {
  // @@protoc_insertion_point(field_get:PBLocation.verticalAccuracy)
  return verticalaccuracy_;
}
void PBLocation::set_verticalaccuracy(float value) {

  verticalaccuracy_ = value;
  // @@protoc_insertion_point(field_set:PBLocation.verticalAccuracy)
}

// float speedAccuracy = 10;
void PBLocation::clear_speedaccuracy() {
  speedaccuracy_ = 0;
}
float PBLocation::speedaccuracy() const {
  // @@protoc_insertion_point(field_get:PBLocation.speedAccuracy)
  return speedaccuracy_;
}
void PBLocation::set_speedaccuracy(float value) {

  speedaccuracy_ = value;
  // @@protoc_insertion_point(field_set:PBLocation.speedAccuracy)
}

// float bearingAccuracy = 11;
void PBLocation::clear_bearingaccuracy() {
  bearingaccuracy_ = 0;
}
float PBLocation::bearingaccuracy() const {
  // @@protoc_insertion_point(field_get:PBLocation.bearingAccuracy)
  return bearingaccuracy_;
}
void PBLocation::set_bearingaccuracy(float value) {

  bearingaccuracy_ = value;
  // @@protoc_insertion_point(field_set:PBLocation.bearingAccuracy)
}

// uint32 techMask = 12;
void PBLocation::clear_techmask() {
  techmask_ = 0u;
}
::google::protobuf::uint32 PBLocation::techmask() const {
  // @@protoc_insertion_point(field_get:PBLocation.techMask)
  return techmask_;
}
void PBLocation::set_techmask(::google::protobuf::uint32 value) {

  techmask_ = value;
  // @@protoc_insertion_point(field_set:PBLocation.techMask)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PBLocationOptions::kMinIntervalFieldNumber;
const int PBLocationOptions::kMinDistanceFieldNumber;
const int PBLocationOptions::kModeFieldNumber;
const int PBLocationOptions::kLocReqEngTypeMaskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PBLocationOptions::PBLocationOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_LocationApiDataTypes_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBLocationOptions)
}
PBLocationOptions::PBLocationOptions(const PBLocationOptions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&mininterval_, &from.mininterval_,
    reinterpret_cast<char*>(&locreqengtypemask_) -
    reinterpret_cast<char*>(&mininterval_) + sizeof(locreqengtypemask_));
  // @@protoc_insertion_point(copy_constructor:PBLocationOptions)
}

void PBLocationOptions::SharedCtor() {
  ::memset(&mininterval_, 0, reinterpret_cast<char*>(&locreqengtypemask_) -
    reinterpret_cast<char*>(&mininterval_) + sizeof(locreqengtypemask_));
  _cached_size_ = 0;
}

PBLocationOptions::~PBLocationOptions() {
  // @@protoc_insertion_point(destructor:PBLocationOptions)
  SharedDtor();
}

void PBLocationOptions::SharedDtor() {
}

void PBLocationOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBLocationOptions::descriptor() {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PBLocationOptions& PBLocationOptions::default_instance() {
  protobuf_LocationApiDataTypes_2eproto::InitDefaults();
  return *internal_default_instance();
}

PBLocationOptions* PBLocationOptions::New(::google::protobuf::Arena* arena) const {
  PBLocationOptions* n = new PBLocationOptions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBLocationOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:PBLocationOptions)
  ::memset(&mininterval_, 0, reinterpret_cast<char*>(&locreqengtypemask_) -
    reinterpret_cast<char*>(&mininterval_) + sizeof(locreqengtypemask_));
}

bool PBLocationOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBLocationOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 minInterval = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mininterval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 minDistance = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mindistance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .PBGnssSuplMode mode = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mode(static_cast< ::PBGnssSuplMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 locReqEngTypeMask = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &locreqengtypemask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBLocationOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBLocationOptions)
  return false;
#undef DO_
}

void PBLocationOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBLocationOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 minInterval = 1;
  if (this->mininterval() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mininterval(), output);
  }

  // uint32 minDistance = 2;
  if (this->mindistance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mindistance(), output);
  }

  // .PBGnssSuplMode mode = 3;
  if (this->mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->mode(), output);
  }

  // uint32 locReqEngTypeMask = 4;
  if (this->locreqengtypemask() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->locreqengtypemask(), output);
  }

  // @@protoc_insertion_point(serialize_end:PBLocationOptions)
}

::google::protobuf::uint8* PBLocationOptions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBLocationOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 minInterval = 1;
  if (this->mininterval() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mininterval(), target);
  }

  // uint32 minDistance = 2;
  if (this->mindistance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mindistance(), target);
  }

  // .PBGnssSuplMode mode = 3;
  if (this->mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->mode(), target);
  }

  // uint32 locReqEngTypeMask = 4;
  if (this->locreqengtypemask() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->locreqengtypemask(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PBLocationOptions)
  return target;
}

size_t PBLocationOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBLocationOptions)
  size_t total_size = 0;

  // uint32 minInterval = 1;
  if (this->mininterval() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mininterval());
  }

  // uint32 minDistance = 2;
  if (this->mindistance() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mindistance());
  }

  // .PBGnssSuplMode mode = 3;
  if (this->mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
  }

  // uint32 locReqEngTypeMask = 4;
  if (this->locreqengtypemask() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->locreqengtypemask());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBLocationOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PBLocationOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const PBLocationOptions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PBLocationOptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PBLocationOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PBLocationOptions)
    MergeFrom(*source);
  }
}

void PBLocationOptions::MergeFrom(const PBLocationOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBLocationOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mininterval() != 0) {
    set_mininterval(from.mininterval());
  }
  if (from.mindistance() != 0) {
    set_mindistance(from.mindistance());
  }
  if (from.mode() != 0) {
    set_mode(from.mode());
  }
  if (from.locreqengtypemask() != 0) {
    set_locreqengtypemask(from.locreqengtypemask());
  }
}

void PBLocationOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PBLocationOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBLocationOptions::CopyFrom(const PBLocationOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBLocationOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBLocationOptions::IsInitialized() const {
  return true;
}

void PBLocationOptions::Swap(PBLocationOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBLocationOptions::InternalSwap(PBLocationOptions* other) {
  std::swap(mininterval_, other->mininterval_);
  std::swap(mindistance_, other->mindistance_);
  std::swap(mode_, other->mode_);
  std::swap(locreqengtypemask_, other->locreqengtypemask_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PBLocationOptions::GetMetadata() const {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PBLocationOptions

// uint32 minInterval = 1;
void PBLocationOptions::clear_mininterval() {
  mininterval_ = 0u;
}
::google::protobuf::uint32 PBLocationOptions::mininterval() const {
  // @@protoc_insertion_point(field_get:PBLocationOptions.minInterval)
  return mininterval_;
}
void PBLocationOptions::set_mininterval(::google::protobuf::uint32 value) {

  mininterval_ = value;
  // @@protoc_insertion_point(field_set:PBLocationOptions.minInterval)
}

// uint32 minDistance = 2;
void PBLocationOptions::clear_mindistance() {
  mindistance_ = 0u;
}
::google::protobuf::uint32 PBLocationOptions::mindistance() const {
  // @@protoc_insertion_point(field_get:PBLocationOptions.minDistance)
  return mindistance_;
}
void PBLocationOptions::set_mindistance(::google::protobuf::uint32 value) {

  mindistance_ = value;
  // @@protoc_insertion_point(field_set:PBLocationOptions.minDistance)
}

// .PBGnssSuplMode mode = 3;
void PBLocationOptions::clear_mode() {
  mode_ = 0;
}
::PBGnssSuplMode PBLocationOptions::mode() const {
  // @@protoc_insertion_point(field_get:PBLocationOptions.mode)
  return static_cast< ::PBGnssSuplMode >(mode_);
}
void PBLocationOptions::set_mode(::PBGnssSuplMode value) {

  mode_ = value;
  // @@protoc_insertion_point(field_set:PBLocationOptions.mode)
}

// uint32 locReqEngTypeMask = 4;
void PBLocationOptions::clear_locreqengtypemask() {
  locreqengtypemask_ = 0u;
}
::google::protobuf::uint32 PBLocationOptions::locreqengtypemask() const {
  // @@protoc_insertion_point(field_get:PBLocationOptions.locReqEngTypeMask)
  return locreqengtypemask_;
}
void PBLocationOptions::set_locreqengtypemask(::google::protobuf::uint32 value) {

  locreqengtypemask_ = value;
  // @@protoc_insertion_point(field_set:PBLocationOptions.locReqEngTypeMask)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PBAidingData::kDeleteAllFieldNumber;
const int PBAidingData::kGnssAidingDataSvMaskFieldNumber;
const int PBAidingData::kDreAidingDataMaskFieldNumber;
const int PBAidingData::kPosEngineMaskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PBAidingData::PBAidingData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_LocationApiDataTypes_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBAidingData)
}
PBAidingData::PBAidingData(const PBAidingData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&deleteall_, &from.deleteall_,
    reinterpret_cast<char*>(&posenginemask_) -
    reinterpret_cast<char*>(&deleteall_) + sizeof(posenginemask_));
  // @@protoc_insertion_point(copy_constructor:PBAidingData)
}

void PBAidingData::SharedCtor() {
  ::memset(&deleteall_, 0, reinterpret_cast<char*>(&posenginemask_) -
    reinterpret_cast<char*>(&deleteall_) + sizeof(posenginemask_));
  _cached_size_ = 0;
}

PBAidingData::~PBAidingData() {
  // @@protoc_insertion_point(destructor:PBAidingData)
  SharedDtor();
}

void PBAidingData::SharedDtor() {
}

void PBAidingData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBAidingData::descriptor() {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PBAidingData& PBAidingData::default_instance() {
  protobuf_LocationApiDataTypes_2eproto::InitDefaults();
  return *internal_default_instance();
}

PBAidingData* PBAidingData::New(::google::protobuf::Arena* arena) const {
  PBAidingData* n = new PBAidingData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBAidingData::Clear() {
// @@protoc_insertion_point(message_clear_start:PBAidingData)
  ::memset(&deleteall_, 0, reinterpret_cast<char*>(&posenginemask_) -
    reinterpret_cast<char*>(&deleteall_) + sizeof(posenginemask_));
}

bool PBAidingData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBAidingData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool deleteAll = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &deleteall_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 gnssAidingDataSvMask = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gnssaidingdatasvmask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dreAidingDataMask = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dreaidingdatamask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 posEngineMask = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &posenginemask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBAidingData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBAidingData)
  return false;
#undef DO_
}

void PBAidingData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBAidingData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool deleteAll = 1;
  if (this->deleteall() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->deleteall(), output);
  }

  // uint32 gnssAidingDataSvMask = 2;
  if (this->gnssaidingdatasvmask() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gnssaidingdatasvmask(), output);
  }

  // uint32 dreAidingDataMask = 3;
  if (this->dreaidingdatamask() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dreaidingdatamask(), output);
  }

  // uint32 posEngineMask = 4;
  if (this->posenginemask() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->posenginemask(), output);
  }

  // @@protoc_insertion_point(serialize_end:PBAidingData)
}

::google::protobuf::uint8* PBAidingData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBAidingData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool deleteAll = 1;
  if (this->deleteall() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->deleteall(), target);
  }

  // uint32 gnssAidingDataSvMask = 2;
  if (this->gnssaidingdatasvmask() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gnssaidingdatasvmask(), target);
  }

  // uint32 dreAidingDataMask = 3;
  if (this->dreaidingdatamask() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->dreaidingdatamask(), target);
  }

  // uint32 posEngineMask = 4;
  if (this->posenginemask() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->posenginemask(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PBAidingData)
  return target;
}

size_t PBAidingData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBAidingData)
  size_t total_size = 0;

  // bool deleteAll = 1;
  if (this->deleteall() != 0) {
    total_size += 1 + 1;
  }

  // uint32 gnssAidingDataSvMask = 2;
  if (this->gnssaidingdatasvmask() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gnssaidingdatasvmask());
  }

  // uint32 dreAidingDataMask = 3;
  if (this->dreaidingdatamask() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dreaidingdatamask());
  }

  // uint32 posEngineMask = 4;
  if (this->posenginemask() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->posenginemask());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBAidingData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PBAidingData)
  GOOGLE_DCHECK_NE(&from, this);
  const PBAidingData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PBAidingData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PBAidingData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PBAidingData)
    MergeFrom(*source);
  }
}

void PBAidingData::MergeFrom(const PBAidingData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBAidingData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.deleteall() != 0) {
    set_deleteall(from.deleteall());
  }
  if (from.gnssaidingdatasvmask() != 0) {
    set_gnssaidingdatasvmask(from.gnssaidingdatasvmask());
  }
  if (from.dreaidingdatamask() != 0) {
    set_dreaidingdatamask(from.dreaidingdatamask());
  }
  if (from.posenginemask() != 0) {
    set_posenginemask(from.posenginemask());
  }
}

void PBAidingData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PBAidingData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBAidingData::CopyFrom(const PBAidingData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBAidingData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBAidingData::IsInitialized() const {
  return true;
}

void PBAidingData::Swap(PBAidingData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBAidingData::InternalSwap(PBAidingData* other) {
  std::swap(deleteall_, other->deleteall_);
  std::swap(gnssaidingdatasvmask_, other->gnssaidingdatasvmask_);
  std::swap(dreaidingdatamask_, other->dreaidingdatamask_);
  std::swap(posenginemask_, other->posenginemask_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PBAidingData::GetMetadata() const {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PBAidingData

// bool deleteAll = 1;
void PBAidingData::clear_deleteall() {
  deleteall_ = false;
}
bool PBAidingData::deleteall() const {
  // @@protoc_insertion_point(field_get:PBAidingData.deleteAll)
  return deleteall_;
}
void PBAidingData::set_deleteall(bool value) {

  deleteall_ = value;
  // @@protoc_insertion_point(field_set:PBAidingData.deleteAll)
}

// uint32 gnssAidingDataSvMask = 2;
void PBAidingData::clear_gnssaidingdatasvmask() {
  gnssaidingdatasvmask_ = 0u;
}
::google::protobuf::uint32 PBAidingData::gnssaidingdatasvmask() const {
  // @@protoc_insertion_point(field_get:PBAidingData.gnssAidingDataSvMask)
  return gnssaidingdatasvmask_;
}
void PBAidingData::set_gnssaidingdatasvmask(::google::protobuf::uint32 value) {

  gnssaidingdatasvmask_ = value;
  // @@protoc_insertion_point(field_set:PBAidingData.gnssAidingDataSvMask)
}

// uint32 dreAidingDataMask = 3;
void PBAidingData::clear_dreaidingdatamask() {
  dreaidingdatamask_ = 0u;
}
::google::protobuf::uint32 PBAidingData::dreaidingdatamask() const {
  // @@protoc_insertion_point(field_get:PBAidingData.dreAidingDataMask)
  return dreaidingdatamask_;
}
void PBAidingData::set_dreaidingdatamask(::google::protobuf::uint32 value) {

  dreaidingdatamask_ = value;
  // @@protoc_insertion_point(field_set:PBAidingData.dreAidingDataMask)
}

// uint32 posEngineMask = 4;
void PBAidingData::clear_posenginemask() {
  posenginemask_ = 0u;
}
::google::protobuf::uint32 PBAidingData::posenginemask() const {
  // @@protoc_insertion_point(field_get:PBAidingData.posEngineMask)
  return posenginemask_;
}
void PBAidingData::set_posenginemask(::google::protobuf::uint32 value) {

  posenginemask_ = value;
  // @@protoc_insertion_point(field_set:PBAidingData.posEngineMask)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PBLocApiGnssSv::kSvIdFieldNumber;
const int PBLocApiGnssSv::kTypeFieldNumber;
const int PBLocApiGnssSv::kCN0DbhzFieldNumber;
const int PBLocApiGnssSv::kElevationFieldNumber;
const int PBLocApiGnssSv::kAzimuthFieldNumber;
const int PBLocApiGnssSv::kGnssSvOptionsMaskFieldNumber;
const int PBLocApiGnssSv::kCarrierFrequencyHzFieldNumber;
const int PBLocApiGnssSv::kGnssSignalTypeMaskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PBLocApiGnssSv::PBLocApiGnssSv()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_LocationApiDataTypes_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBLocApiGnssSv)
}
PBLocApiGnssSv::PBLocApiGnssSv(const PBLocApiGnssSv& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&svid_, &from.svid_,
    reinterpret_cast<char*>(&gnsssignaltypemask_) -
    reinterpret_cast<char*>(&svid_) + sizeof(gnsssignaltypemask_));
  // @@protoc_insertion_point(copy_constructor:PBLocApiGnssSv)
}

void PBLocApiGnssSv::SharedCtor() {
  ::memset(&svid_, 0, reinterpret_cast<char*>(&gnsssignaltypemask_) -
    reinterpret_cast<char*>(&svid_) + sizeof(gnsssignaltypemask_));
  _cached_size_ = 0;
}

PBLocApiGnssSv::~PBLocApiGnssSv() {
  // @@protoc_insertion_point(destructor:PBLocApiGnssSv)
  SharedDtor();
}

void PBLocApiGnssSv::SharedDtor() {
}

void PBLocApiGnssSv::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBLocApiGnssSv::descriptor() {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PBLocApiGnssSv& PBLocApiGnssSv::default_instance() {
  protobuf_LocationApiDataTypes_2eproto::InitDefaults();
  return *internal_default_instance();
}

PBLocApiGnssSv* PBLocApiGnssSv::New(::google::protobuf::Arena* arena) const {
  PBLocApiGnssSv* n = new PBLocApiGnssSv;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBLocApiGnssSv::Clear() {
// @@protoc_insertion_point(message_clear_start:PBLocApiGnssSv)
  ::memset(&svid_, 0, reinterpret_cast<char*>(&gnsssignaltypemask_) -
    reinterpret_cast<char*>(&svid_) + sizeof(gnsssignaltypemask_));
}

bool PBLocApiGnssSv::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBLocApiGnssSv)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 svId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &svid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .PBLocApiGnss_LocSvSystemEnumType type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::PBLocApiGnss_LocSvSystemEnumType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float cN0Dbhz = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cn0dbhz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float elevation = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &elevation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float azimuth = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &azimuth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 gnssSvOptionsMask = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gnsssvoptionsmask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float carrierFrequencyHz = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &carrierfrequencyhz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 gnssSignalTypeMask = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gnsssignaltypemask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBLocApiGnssSv)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBLocApiGnssSv)
  return false;
#undef DO_
}

void PBLocApiGnssSv::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBLocApiGnssSv)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 svId = 1;
  if (this->svid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->svid(), output);
  }

  // .PBLocApiGnss_LocSvSystemEnumType type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // float cN0Dbhz = 3;
  if (this->cn0dbhz() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->cn0dbhz(), output);
  }

  // float elevation = 4;
  if (this->elevation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->elevation(), output);
  }

  // float azimuth = 5;
  if (this->azimuth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->azimuth(), output);
  }

  // uint32 gnssSvOptionsMask = 6;
  if (this->gnsssvoptionsmask() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->gnsssvoptionsmask(), output);
  }

  // float carrierFrequencyHz = 7;
  if (this->carrierfrequencyhz() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->carrierfrequencyhz(), output);
  }

  // uint32 gnssSignalTypeMask = 8;
  if (this->gnsssignaltypemask() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->gnsssignaltypemask(), output);
  }

  // @@protoc_insertion_point(serialize_end:PBLocApiGnssSv)
}

::google::protobuf::uint8* PBLocApiGnssSv::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBLocApiGnssSv)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 svId = 1;
  if (this->svid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->svid(), target);
  }

  // .PBLocApiGnss_LocSvSystemEnumType type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // float cN0Dbhz = 3;
  if (this->cn0dbhz() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->cn0dbhz(), target);
  }

  // float elevation = 4;
  if (this->elevation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->elevation(), target);
  }

  // float azimuth = 5;
  if (this->azimuth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->azimuth(), target);
  }

  // uint32 gnssSvOptionsMask = 6;
  if (this->gnsssvoptionsmask() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->gnsssvoptionsmask(), target);
  }

  // float carrierFrequencyHz = 7;
  if (this->carrierfrequencyhz() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->carrierfrequencyhz(), target);
  }

  // uint32 gnssSignalTypeMask = 8;
  if (this->gnsssignaltypemask() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->gnsssignaltypemask(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PBLocApiGnssSv)
  return target;
}

size_t PBLocApiGnssSv::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBLocApiGnssSv)
  size_t total_size = 0;

  // uint32 svId = 1;
  if (this->svid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->svid());
  }

  // .PBLocApiGnss_LocSvSystemEnumType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // float cN0Dbhz = 3;
  if (this->cn0dbhz() != 0) {
    total_size += 1 + 4;
  }

  // float elevation = 4;
  if (this->elevation() != 0) {
    total_size += 1 + 4;
  }

  // float azimuth = 5;
  if (this->azimuth() != 0) {
    total_size += 1 + 4;
  }

  // uint32 gnssSvOptionsMask = 6;
  if (this->gnsssvoptionsmask() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gnsssvoptionsmask());
  }

  // float carrierFrequencyHz = 7;
  if (this->carrierfrequencyhz() != 0) {
    total_size += 1 + 4;
  }

  // uint32 gnssSignalTypeMask = 8;
  if (this->gnsssignaltypemask() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gnsssignaltypemask());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBLocApiGnssSv::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PBLocApiGnssSv)
  GOOGLE_DCHECK_NE(&from, this);
  const PBLocApiGnssSv* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PBLocApiGnssSv>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PBLocApiGnssSv)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PBLocApiGnssSv)
    MergeFrom(*source);
  }
}

void PBLocApiGnssSv::MergeFrom(const PBLocApiGnssSv& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBLocApiGnssSv)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.svid() != 0) {
    set_svid(from.svid());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.cn0dbhz() != 0) {
    set_cn0dbhz(from.cn0dbhz());
  }
  if (from.elevation() != 0) {
    set_elevation(from.elevation());
  }
  if (from.azimuth() != 0) {
    set_azimuth(from.azimuth());
  }
  if (from.gnsssvoptionsmask() != 0) {
    set_gnsssvoptionsmask(from.gnsssvoptionsmask());
  }
  if (from.carrierfrequencyhz() != 0) {
    set_carrierfrequencyhz(from.carrierfrequencyhz());
  }
  if (from.gnsssignaltypemask() != 0) {
    set_gnsssignaltypemask(from.gnsssignaltypemask());
  }
}

void PBLocApiGnssSv::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PBLocApiGnssSv)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBLocApiGnssSv::CopyFrom(const PBLocApiGnssSv& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBLocApiGnssSv)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBLocApiGnssSv::IsInitialized() const {
  return true;
}

void PBLocApiGnssSv::Swap(PBLocApiGnssSv* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBLocApiGnssSv::InternalSwap(PBLocApiGnssSv* other) {
  std::swap(svid_, other->svid_);
  std::swap(type_, other->type_);
  std::swap(cn0dbhz_, other->cn0dbhz_);
  std::swap(elevation_, other->elevation_);
  std::swap(azimuth_, other->azimuth_);
  std::swap(gnsssvoptionsmask_, other->gnsssvoptionsmask_);
  std::swap(carrierfrequencyhz_, other->carrierfrequencyhz_);
  std::swap(gnsssignaltypemask_, other->gnsssignaltypemask_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PBLocApiGnssSv::GetMetadata() const {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PBLocApiGnssSv

// uint32 svId = 1;
void PBLocApiGnssSv::clear_svid() {
  svid_ = 0u;
}
::google::protobuf::uint32 PBLocApiGnssSv::svid() const {
  // @@protoc_insertion_point(field_get:PBLocApiGnssSv.svId)
  return svid_;
}
void PBLocApiGnssSv::set_svid(::google::protobuf::uint32 value) {

  svid_ = value;
  // @@protoc_insertion_point(field_set:PBLocApiGnssSv.svId)
}

// .PBLocApiGnss_LocSvSystemEnumType type = 2;
void PBLocApiGnssSv::clear_type() {
  type_ = 0;
}
::PBLocApiGnss_LocSvSystemEnumType PBLocApiGnssSv::type() const {
  // @@protoc_insertion_point(field_get:PBLocApiGnssSv.type)
  return static_cast< ::PBLocApiGnss_LocSvSystemEnumType >(type_);
}
void PBLocApiGnssSv::set_type(::PBLocApiGnss_LocSvSystemEnumType value) {

  type_ = value;
  // @@protoc_insertion_point(field_set:PBLocApiGnssSv.type)
}

// float cN0Dbhz = 3;
void PBLocApiGnssSv::clear_cn0dbhz() {
  cn0dbhz_ = 0;
}
float PBLocApiGnssSv::cn0dbhz() const {
  // @@protoc_insertion_point(field_get:PBLocApiGnssSv.cN0Dbhz)
  return cn0dbhz_;
}
void PBLocApiGnssSv::set_cn0dbhz(float value) {

  cn0dbhz_ = value;
  // @@protoc_insertion_point(field_set:PBLocApiGnssSv.cN0Dbhz)
}

// float elevation = 4;
void PBLocApiGnssSv::clear_elevation() {
  elevation_ = 0;
}
float PBLocApiGnssSv::elevation() const {
  // @@protoc_insertion_point(field_get:PBLocApiGnssSv.elevation)
  return elevation_;
}
void PBLocApiGnssSv::set_elevation(float value) {

  elevation_ = value;
  // @@protoc_insertion_point(field_set:PBLocApiGnssSv.elevation)
}

// float azimuth = 5;
void PBLocApiGnssSv::clear_azimuth() {
  azimuth_ = 0;
}
float PBLocApiGnssSv::azimuth() const {
  // @@protoc_insertion_point(field_get:PBLocApiGnssSv.azimuth)
  return azimuth_;
}
void PBLocApiGnssSv::set_azimuth(float value) {

  azimuth_ = value;
  // @@protoc_insertion_point(field_set:PBLocApiGnssSv.azimuth)
}

// uint32 gnssSvOptionsMask = 6;
void PBLocApiGnssSv::clear_gnsssvoptionsmask() {
  gnsssvoptionsmask_ = 0u;
}
::google::protobuf::uint32 PBLocApiGnssSv::gnsssvoptionsmask() const {
  // @@protoc_insertion_point(field_get:PBLocApiGnssSv.gnssSvOptionsMask)
  return gnsssvoptionsmask_;
}
void PBLocApiGnssSv::set_gnsssvoptionsmask(::google::protobuf::uint32 value) {

  gnsssvoptionsmask_ = value;
  // @@protoc_insertion_point(field_set:PBLocApiGnssSv.gnssSvOptionsMask)
}

// float carrierFrequencyHz = 7;
void PBLocApiGnssSv::clear_carrierfrequencyhz() {
  carrierfrequencyhz_ = 0;
}
float PBLocApiGnssSv::carrierfrequencyhz() const {
  // @@protoc_insertion_point(field_get:PBLocApiGnssSv.carrierFrequencyHz)
  return carrierfrequencyhz_;
}
void PBLocApiGnssSv::set_carrierfrequencyhz(float value) {

  carrierfrequencyhz_ = value;
  // @@protoc_insertion_point(field_set:PBLocApiGnssSv.carrierFrequencyHz)
}

// uint32 gnssSignalTypeMask = 8;
void PBLocApiGnssSv::clear_gnsssignaltypemask() {
  gnsssignaltypemask_ = 0u;
}
::google::protobuf::uint32 PBLocApiGnssSv::gnsssignaltypemask() const {
  // @@protoc_insertion_point(field_get:PBLocApiGnssSv.gnssSignalTypeMask)
  return gnsssignaltypemask_;
}
void PBLocApiGnssSv::set_gnsssignaltypemask(::google::protobuf::uint32 value) {

  gnsssignaltypemask_ = value;
  // @@protoc_insertion_point(field_set:PBLocApiGnssSv.gnssSignalTypeMask)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PBLocApiGnssSvNotification::kGnssSignalTypeMaskValidFieldNumber;
const int PBLocApiGnssSvNotification::kGnssSvsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PBLocApiGnssSvNotification::PBLocApiGnssSvNotification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_LocationApiDataTypes_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBLocApiGnssSvNotification)
}
PBLocApiGnssSvNotification::PBLocApiGnssSvNotification(const PBLocApiGnssSvNotification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      gnsssvs_(from.gnsssvs_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gnsssignaltypemaskvalid_ = from.gnsssignaltypemaskvalid_;
  // @@protoc_insertion_point(copy_constructor:PBLocApiGnssSvNotification)
}

void PBLocApiGnssSvNotification::SharedCtor() {
  gnsssignaltypemaskvalid_ = false;
  _cached_size_ = 0;
}

PBLocApiGnssSvNotification::~PBLocApiGnssSvNotification() {
  // @@protoc_insertion_point(destructor:PBLocApiGnssSvNotification)
  SharedDtor();
}

void PBLocApiGnssSvNotification::SharedDtor() {
}

void PBLocApiGnssSvNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBLocApiGnssSvNotification::descriptor() {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PBLocApiGnssSvNotification& PBLocApiGnssSvNotification::default_instance() {
  protobuf_LocationApiDataTypes_2eproto::InitDefaults();
  return *internal_default_instance();
}

PBLocApiGnssSvNotification* PBLocApiGnssSvNotification::New(::google::protobuf::Arena* arena) const {
  PBLocApiGnssSvNotification* n = new PBLocApiGnssSvNotification;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBLocApiGnssSvNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:PBLocApiGnssSvNotification)
  gnsssvs_.Clear();
  gnsssignaltypemaskvalid_ = false;
}

bool PBLocApiGnssSvNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBLocApiGnssSvNotification)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool gnssSignalTypeMaskValid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gnsssignaltypemaskvalid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .PBLocApiGnssSv gnssSvs = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gnsssvs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBLocApiGnssSvNotification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBLocApiGnssSvNotification)
  return false;
#undef DO_
}

void PBLocApiGnssSvNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBLocApiGnssSvNotification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool gnssSignalTypeMaskValid = 1;
  if (this->gnsssignaltypemaskvalid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->gnsssignaltypemaskvalid(), output);
  }

  // repeated .PBLocApiGnssSv gnssSvs = 2;
  for (unsigned int i = 0, n = this->gnsssvs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->gnsssvs(i), output);
  }

  // @@protoc_insertion_point(serialize_end:PBLocApiGnssSvNotification)
}

::google::protobuf::uint8* PBLocApiGnssSvNotification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBLocApiGnssSvNotification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool gnssSignalTypeMaskValid = 1;
  if (this->gnsssignaltypemaskvalid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->gnsssignaltypemaskvalid(), target);
  }

  // repeated .PBLocApiGnssSv gnssSvs = 2;
  for (unsigned int i = 0, n = this->gnsssvs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->gnsssvs(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PBLocApiGnssSvNotification)
  return target;
}

size_t PBLocApiGnssSvNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBLocApiGnssSvNotification)
  size_t total_size = 0;

  // repeated .PBLocApiGnssSv gnssSvs = 2;
  {
    unsigned int count = this->gnsssvs_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gnsssvs(i));
    }
  }

  // bool gnssSignalTypeMaskValid = 1;
  if (this->gnsssignaltypemaskvalid() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBLocApiGnssSvNotification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PBLocApiGnssSvNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const PBLocApiGnssSvNotification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PBLocApiGnssSvNotification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PBLocApiGnssSvNotification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PBLocApiGnssSvNotification)
    MergeFrom(*source);
  }
}

void PBLocApiGnssSvNotification::MergeFrom(const PBLocApiGnssSvNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBLocApiGnssSvNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  gnsssvs_.MergeFrom(from.gnsssvs_);
  if (from.gnsssignaltypemaskvalid() != 0) {
    set_gnsssignaltypemaskvalid(from.gnsssignaltypemaskvalid());
  }
}

void PBLocApiGnssSvNotification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PBLocApiGnssSvNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBLocApiGnssSvNotification::CopyFrom(const PBLocApiGnssSvNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBLocApiGnssSvNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBLocApiGnssSvNotification::IsInitialized() const {
  return true;
}

void PBLocApiGnssSvNotification::Swap(PBLocApiGnssSvNotification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBLocApiGnssSvNotification::InternalSwap(PBLocApiGnssSvNotification* other) {
  gnsssvs_.InternalSwap(&other->gnsssvs_);
  std::swap(gnsssignaltypemaskvalid_, other->gnsssignaltypemaskvalid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PBLocApiGnssSvNotification::GetMetadata() const {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PBLocApiGnssSvNotification

// bool gnssSignalTypeMaskValid = 1;
void PBLocApiGnssSvNotification::clear_gnsssignaltypemaskvalid() {
  gnsssignaltypemaskvalid_ = false;
}
bool PBLocApiGnssSvNotification::gnsssignaltypemaskvalid() const {
  // @@protoc_insertion_point(field_get:PBLocApiGnssSvNotification.gnssSignalTypeMaskValid)
  return gnsssignaltypemaskvalid_;
}
void PBLocApiGnssSvNotification::set_gnsssignaltypemaskvalid(bool value) {

  gnsssignaltypemaskvalid_ = value;
  // @@protoc_insertion_point(field_set:PBLocApiGnssSvNotification.gnssSignalTypeMaskValid)
}

// repeated .PBLocApiGnssSv gnssSvs = 2;
int PBLocApiGnssSvNotification::gnsssvs_size() const {
  return gnsssvs_.size();
}
void PBLocApiGnssSvNotification::clear_gnsssvs() {
  gnsssvs_.Clear();
}
const ::PBLocApiGnssSv& PBLocApiGnssSvNotification::gnsssvs(int index) const {
  // @@protoc_insertion_point(field_get:PBLocApiGnssSvNotification.gnssSvs)
  return gnsssvs_.Get(index);
}
::PBLocApiGnssSv* PBLocApiGnssSvNotification::mutable_gnsssvs(int index) {
  // @@protoc_insertion_point(field_mutable:PBLocApiGnssSvNotification.gnssSvs)
  return gnsssvs_.Mutable(index);
}
::PBLocApiGnssSv* PBLocApiGnssSvNotification::add_gnsssvs() {
  // @@protoc_insertion_point(field_add:PBLocApiGnssSvNotification.gnssSvs)
  return gnsssvs_.Add();
}
::google::protobuf::RepeatedPtrField< ::PBLocApiGnssSv >*
PBLocApiGnssSvNotification::mutable_gnsssvs() {
  // @@protoc_insertion_point(field_mutable_list:PBLocApiGnssSvNotification.gnssSvs)
  return &gnsssvs_;
}
const ::google::protobuf::RepeatedPtrField< ::PBLocApiGnssSv >&
PBLocApiGnssSvNotification::gnsssvs() const {
  // @@protoc_insertion_point(field_list:PBLocApiGnssSvNotification.gnssSvs)
  return gnsssvs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PBGnssMeasurementsClock::kFlagsFieldNumber;
const int PBGnssMeasurementsClock::kLeapSecondFieldNumber;
const int PBGnssMeasurementsClock::kTimeNsFieldNumber;
const int PBGnssMeasurementsClock::kTimeUncertaintyNsFieldNumber;
const int PBGnssMeasurementsClock::kFullBiasNsFieldNumber;
const int PBGnssMeasurementsClock::kBiasNsFieldNumber;
const int PBGnssMeasurementsClock::kBiasUncertaintyNsFieldNumber;
const int PBGnssMeasurementsClock::kDriftNspsFieldNumber;
const int PBGnssMeasurementsClock::kDriftUncertaintyNspsFieldNumber;
const int PBGnssMeasurementsClock::kHwClockDiscontinuityCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PBGnssMeasurementsClock::PBGnssMeasurementsClock()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_LocationApiDataTypes_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBGnssMeasurementsClock)
}
PBGnssMeasurementsClock::PBGnssMeasurementsClock(const PBGnssMeasurementsClock& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&flags_, &from.flags_,
    reinterpret_cast<char*>(&hwclockdiscontinuitycount_) -
    reinterpret_cast<char*>(&flags_) + sizeof(hwclockdiscontinuitycount_));
  // @@protoc_insertion_point(copy_constructor:PBGnssMeasurementsClock)
}

void PBGnssMeasurementsClock::SharedCtor() {
  ::memset(&flags_, 0, reinterpret_cast<char*>(&hwclockdiscontinuitycount_) -
    reinterpret_cast<char*>(&flags_) + sizeof(hwclockdiscontinuitycount_));
  _cached_size_ = 0;
}

PBGnssMeasurementsClock::~PBGnssMeasurementsClock() {
  // @@protoc_insertion_point(destructor:PBGnssMeasurementsClock)
  SharedDtor();
}

void PBGnssMeasurementsClock::SharedDtor() {
}

void PBGnssMeasurementsClock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBGnssMeasurementsClock::descriptor() {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PBGnssMeasurementsClock& PBGnssMeasurementsClock::default_instance() {
  protobuf_LocationApiDataTypes_2eproto::InitDefaults();
  return *internal_default_instance();
}

PBGnssMeasurementsClock* PBGnssMeasurementsClock::New(::google::protobuf::Arena* arena) const {
  PBGnssMeasurementsClock* n = new PBGnssMeasurementsClock;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBGnssMeasurementsClock::Clear() {
// @@protoc_insertion_point(message_clear_start:PBGnssMeasurementsClock)
  ::memset(&flags_, 0, reinterpret_cast<char*>(&hwclockdiscontinuitycount_) -
    reinterpret_cast<char*>(&flags_) + sizeof(hwclockdiscontinuitycount_));
}

bool PBGnssMeasurementsClock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBGnssMeasurementsClock)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 flags = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 leapSecond = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leapsecond_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 timeNs = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timens_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double timeUncertaintyNs = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timeuncertaintyns_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 fullBiasNs = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fullbiasns_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double biasNs = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &biasns_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double biasUncertaintyNs = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &biasuncertaintyns_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double driftNsps = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &driftnsps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double driftUncertaintyNsps = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &driftuncertaintynsps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 hwClockDiscontinuityCount = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hwclockdiscontinuitycount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBGnssMeasurementsClock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBGnssMeasurementsClock)
  return false;
#undef DO_
}

void PBGnssMeasurementsClock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBGnssMeasurementsClock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 flags = 1;
  if (this->flags() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->flags(), output);
  }

  // int32 leapSecond = 2;
  if (this->leapsecond() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->leapsecond(), output);
  }

  // int64 timeNs = 3;
  if (this->timens() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->timens(), output);
  }

  // double timeUncertaintyNs = 4;
  if (this->timeuncertaintyns() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->timeuncertaintyns(), output);
  }

  // int64 fullBiasNs = 5;
  if (this->fullbiasns() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->fullbiasns(), output);
  }

  // double biasNs = 6;
  if (this->biasns() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->biasns(), output);
  }

  // double biasUncertaintyNs = 7;
  if (this->biasuncertaintyns() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->biasuncertaintyns(), output);
  }

  // double driftNsps = 8;
  if (this->driftnsps() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->driftnsps(), output);
  }

  // double driftUncertaintyNsps = 9;
  if (this->driftuncertaintynsps() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->driftuncertaintynsps(), output);
  }

  // uint32 hwClockDiscontinuityCount = 10;
  if (this->hwclockdiscontinuitycount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->hwclockdiscontinuitycount(), output);
  }

  // @@protoc_insertion_point(serialize_end:PBGnssMeasurementsClock)
}

::google::protobuf::uint8* PBGnssMeasurementsClock::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBGnssMeasurementsClock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 flags = 1;
  if (this->flags() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->flags(), target);
  }

  // int32 leapSecond = 2;
  if (this->leapsecond() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->leapsecond(), target);
  }

  // int64 timeNs = 3;
  if (this->timens() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->timens(), target);
  }

  // double timeUncertaintyNs = 4;
  if (this->timeuncertaintyns() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->timeuncertaintyns(), target);
  }

  // int64 fullBiasNs = 5;
  if (this->fullbiasns() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->fullbiasns(), target);
  }

  // double biasNs = 6;
  if (this->biasns() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->biasns(), target);
  }

  // double biasUncertaintyNs = 7;
  if (this->biasuncertaintyns() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->biasuncertaintyns(), target);
  }

  // double driftNsps = 8;
  if (this->driftnsps() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->driftnsps(), target);
  }

  // double driftUncertaintyNsps = 9;
  if (this->driftuncertaintynsps() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->driftuncertaintynsps(), target);
  }

  // uint32 hwClockDiscontinuityCount = 10;
  if (this->hwclockdiscontinuitycount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->hwclockdiscontinuitycount(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PBGnssMeasurementsClock)
  return target;
}

size_t PBGnssMeasurementsClock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBGnssMeasurementsClock)
  size_t total_size = 0;

  // uint32 flags = 1;
  if (this->flags() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->flags());
  }

  // int32 leapSecond = 2;
  if (this->leapsecond() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->leapsecond());
  }

  // int64 timeNs = 3;
  if (this->timens() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timens());
  }

  // double timeUncertaintyNs = 4;
  if (this->timeuncertaintyns() != 0) {
    total_size += 1 + 8;
  }

  // int64 fullBiasNs = 5;
  if (this->fullbiasns() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->fullbiasns());
  }

  // double biasNs = 6;
  if (this->biasns() != 0) {
    total_size += 1 + 8;
  }

  // double biasUncertaintyNs = 7;
  if (this->biasuncertaintyns() != 0) {
    total_size += 1 + 8;
  }

  // double driftNsps = 8;
  if (this->driftnsps() != 0) {
    total_size += 1 + 8;
  }

  // double driftUncertaintyNsps = 9;
  if (this->driftuncertaintynsps() != 0) {
    total_size += 1 + 8;
  }

  // uint32 hwClockDiscontinuityCount = 10;
  if (this->hwclockdiscontinuitycount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->hwclockdiscontinuitycount());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBGnssMeasurementsClock::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PBGnssMeasurementsClock)
  GOOGLE_DCHECK_NE(&from, this);
  const PBGnssMeasurementsClock* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PBGnssMeasurementsClock>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PBGnssMeasurementsClock)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PBGnssMeasurementsClock)
    MergeFrom(*source);
  }
}

void PBGnssMeasurementsClock::MergeFrom(const PBGnssMeasurementsClock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBGnssMeasurementsClock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.flags() != 0) {
    set_flags(from.flags());
  }
  if (from.leapsecond() != 0) {
    set_leapsecond(from.leapsecond());
  }
  if (from.timens() != 0) {
    set_timens(from.timens());
  }
  if (from.timeuncertaintyns() != 0) {
    set_timeuncertaintyns(from.timeuncertaintyns());
  }
  if (from.fullbiasns() != 0) {
    set_fullbiasns(from.fullbiasns());
  }
  if (from.biasns() != 0) {
    set_biasns(from.biasns());
  }
  if (from.biasuncertaintyns() != 0) {
    set_biasuncertaintyns(from.biasuncertaintyns());
  }
  if (from.driftnsps() != 0) {
    set_driftnsps(from.driftnsps());
  }
  if (from.driftuncertaintynsps() != 0) {
    set_driftuncertaintynsps(from.driftuncertaintynsps());
  }
  if (from.hwclockdiscontinuitycount() != 0) {
    set_hwclockdiscontinuitycount(from.hwclockdiscontinuitycount());
  }
}

void PBGnssMeasurementsClock::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PBGnssMeasurementsClock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBGnssMeasurementsClock::CopyFrom(const PBGnssMeasurementsClock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBGnssMeasurementsClock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBGnssMeasurementsClock::IsInitialized() const {
  return true;
}

void PBGnssMeasurementsClock::Swap(PBGnssMeasurementsClock* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBGnssMeasurementsClock::InternalSwap(PBGnssMeasurementsClock* other) {
  std::swap(flags_, other->flags_);
  std::swap(leapsecond_, other->leapsecond_);
  std::swap(timens_, other->timens_);
  std::swap(timeuncertaintyns_, other->timeuncertaintyns_);
  std::swap(fullbiasns_, other->fullbiasns_);
  std::swap(biasns_, other->biasns_);
  std::swap(biasuncertaintyns_, other->biasuncertaintyns_);
  std::swap(driftnsps_, other->driftnsps_);
  std::swap(driftuncertaintynsps_, other->driftuncertaintynsps_);
  std::swap(hwclockdiscontinuitycount_, other->hwclockdiscontinuitycount_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PBGnssMeasurementsClock::GetMetadata() const {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PBGnssMeasurementsClock

// uint32 flags = 1;
void PBGnssMeasurementsClock::clear_flags() {
  flags_ = 0u;
}
::google::protobuf::uint32 PBGnssMeasurementsClock::flags() const {
  // @@protoc_insertion_point(field_get:PBGnssMeasurementsClock.flags)
  return flags_;
}
void PBGnssMeasurementsClock::set_flags(::google::protobuf::uint32 value) {

  flags_ = value;
  // @@protoc_insertion_point(field_set:PBGnssMeasurementsClock.flags)
}

// int32 leapSecond = 2;
void PBGnssMeasurementsClock::clear_leapsecond() {
  leapsecond_ = 0;
}
::google::protobuf::int32 PBGnssMeasurementsClock::leapsecond() const {
  // @@protoc_insertion_point(field_get:PBGnssMeasurementsClock.leapSecond)
  return leapsecond_;
}
void PBGnssMeasurementsClock::set_leapsecond(::google::protobuf::int32 value) {

  leapsecond_ = value;
  // @@protoc_insertion_point(field_set:PBGnssMeasurementsClock.leapSecond)
}

// int64 timeNs = 3;
void PBGnssMeasurementsClock::clear_timens() {
  timens_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 PBGnssMeasurementsClock::timens() const {
  // @@protoc_insertion_point(field_get:PBGnssMeasurementsClock.timeNs)
  return timens_;
}
void PBGnssMeasurementsClock::set_timens(::google::protobuf::int64 value) {

  timens_ = value;
  // @@protoc_insertion_point(field_set:PBGnssMeasurementsClock.timeNs)
}

// double timeUncertaintyNs = 4;
void PBGnssMeasurementsClock::clear_timeuncertaintyns() {
  timeuncertaintyns_ = 0;
}
double PBGnssMeasurementsClock::timeuncertaintyns() const {
  // @@protoc_insertion_point(field_get:PBGnssMeasurementsClock.timeUncertaintyNs)
  return timeuncertaintyns_;
}
void PBGnssMeasurementsClock::set_timeuncertaintyns(double value) {

  timeuncertaintyns_ = value;
  // @@protoc_insertion_point(field_set:PBGnssMeasurementsClock.timeUncertaintyNs)
}

// int64 fullBiasNs = 5;
void PBGnssMeasurementsClock::clear_fullbiasns() {
  fullbiasns_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 PBGnssMeasurementsClock::fullbiasns() const {
  // @@protoc_insertion_point(field_get:PBGnssMeasurementsClock.fullBiasNs)
  return fullbiasns_;
}
void PBGnssMeasurementsClock::set_fullbiasns(::google::protobuf::int64 value) {

  fullbiasns_ = value;
  // @@protoc_insertion_point(field_set:PBGnssMeasurementsClock.fullBiasNs)
}

// double biasNs = 6;
void PBGnssMeasurementsClock::clear_biasns() {
  biasns_ = 0;
}
double PBGnssMeasurementsClock::biasns() const {
  // @@protoc_insertion_point(field_get:PBGnssMeasurementsClock.biasNs)
  return biasns_;
}
void PBGnssMeasurementsClock::set_biasns(double value) {

  biasns_ = value;
  // @@protoc_insertion_point(field_set:PBGnssMeasurementsClock.biasNs)
}

// double biasUncertaintyNs = 7;
void PBGnssMeasurementsClock::clear_biasuncertaintyns() {
  biasuncertaintyns_ = 0;
}
double PBGnssMeasurementsClock::biasuncertaintyns() const {
  // @@protoc_insertion_point(field_get:PBGnssMeasurementsClock.biasUncertaintyNs)
  return biasuncertaintyns_;
}
void PBGnssMeasurementsClock::set_biasuncertaintyns(double value) {

  biasuncertaintyns_ = value;
  // @@protoc_insertion_point(field_set:PBGnssMeasurementsClock.biasUncertaintyNs)
}

// double driftNsps = 8;
void PBGnssMeasurementsClock::clear_driftnsps() {
  driftnsps_ = 0;
}
double PBGnssMeasurementsClock::driftnsps() const {
  // @@protoc_insertion_point(field_get:PBGnssMeasurementsClock.driftNsps)
  return driftnsps_;
}
void PBGnssMeasurementsClock::set_driftnsps(double value) {

  driftnsps_ = value;
  // @@protoc_insertion_point(field_set:PBGnssMeasurementsClock.driftNsps)
}

// double driftUncertaintyNsps = 9;
void PBGnssMeasurementsClock::clear_driftuncertaintynsps() {
  driftuncertaintynsps_ = 0;
}
double PBGnssMeasurementsClock::driftuncertaintynsps() const {
  // @@protoc_insertion_point(field_get:PBGnssMeasurementsClock.driftUncertaintyNsps)
  return driftuncertaintynsps_;
}
void PBGnssMeasurementsClock::set_driftuncertaintynsps(double value) {

  driftuncertaintynsps_ = value;
  // @@protoc_insertion_point(field_set:PBGnssMeasurementsClock.driftUncertaintyNsps)
}

// uint32 hwClockDiscontinuityCount = 10;
void PBGnssMeasurementsClock::clear_hwclockdiscontinuitycount() {
  hwclockdiscontinuitycount_ = 0u;
}
::google::protobuf::uint32 PBGnssMeasurementsClock::hwclockdiscontinuitycount() const {
  // @@protoc_insertion_point(field_get:PBGnssMeasurementsClock.hwClockDiscontinuityCount)
  return hwclockdiscontinuitycount_;
}
void PBGnssMeasurementsClock::set_hwclockdiscontinuitycount(::google::protobuf::uint32 value) {

  hwclockdiscontinuitycount_ = value;
  // @@protoc_insertion_point(field_set:PBGnssMeasurementsClock.hwClockDiscontinuityCount)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PBGnssMeasurementsData::kFlagsFieldNumber;
const int PBGnssMeasurementsData::kSvIdFieldNumber;
const int PBGnssMeasurementsData::kSvTypeFieldNumber;
const int PBGnssMeasurementsData::kTimeOffsetNsFieldNumber;
const int PBGnssMeasurementsData::kStateMaskFieldNumber;
const int PBGnssMeasurementsData::kReceivedSvTimeNsFieldNumber;
const int PBGnssMeasurementsData::kReceivedSvTimeUncertaintyNsFieldNumber;
const int PBGnssMeasurementsData::kCarrierToNoiseDbHzFieldNumber;
const int PBGnssMeasurementsData::kPseudorangeRateMpsFieldNumber;
const int PBGnssMeasurementsData::kPseudorangeRateUncertaintyMpsFieldNumber;
const int PBGnssMeasurementsData::kAdrStateMaskFieldNumber;
const int PBGnssMeasurementsData::kAdrMetersFieldNumber;
const int PBGnssMeasurementsData::kAdrUncertaintyMetersFieldNumber;
const int PBGnssMeasurementsData::kCarrierFrequencyHzFieldNumber;
const int PBGnssMeasurementsData::kCarrierCyclesFieldNumber;
const int PBGnssMeasurementsData::kCarrierPhaseFieldNumber;
const int PBGnssMeasurementsData::kCarrierPhaseUncertaintyFieldNumber;
const int PBGnssMeasurementsData::kMultipathIndicatorFieldNumber;
const int PBGnssMeasurementsData::kSignalToNoiseRatioDbFieldNumber;
const int PBGnssMeasurementsData::kAgcLevelDbFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PBGnssMeasurementsData::PBGnssMeasurementsData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_LocationApiDataTypes_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBGnssMeasurementsData)
}
PBGnssMeasurementsData::PBGnssMeasurementsData(const PBGnssMeasurementsData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&flags_, &from.flags_,
    reinterpret_cast<char*>(&multipathindicator_) -
    reinterpret_cast<char*>(&flags_) + sizeof(multipathindicator_));
  // @@protoc_insertion_point(copy_constructor:PBGnssMeasurementsData)
}

void PBGnssMeasurementsData::SharedCtor() {
  ::memset(&flags_, 0, reinterpret_cast<char*>(&multipathindicator_) -
    reinterpret_cast<char*>(&flags_) + sizeof(multipathindicator_));
  _cached_size_ = 0;
}

PBGnssMeasurementsData::~PBGnssMeasurementsData() {
  // @@protoc_insertion_point(destructor:PBGnssMeasurementsData)
  SharedDtor();
}

void PBGnssMeasurementsData::SharedDtor() {
}

void PBGnssMeasurementsData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBGnssMeasurementsData::descriptor() {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PBGnssMeasurementsData& PBGnssMeasurementsData::default_instance() {
  protobuf_LocationApiDataTypes_2eproto::InitDefaults();
  return *internal_default_instance();
}

PBGnssMeasurementsData* PBGnssMeasurementsData::New(::google::protobuf::Arena* arena) const {
  PBGnssMeasurementsData* n = new PBGnssMeasurementsData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBGnssMeasurementsData::Clear() {
// @@protoc_insertion_point(message_clear_start:PBGnssMeasurementsData)
  ::memset(&flags_, 0, reinterpret_cast<char*>(&multipathindicator_) -
    reinterpret_cast<char*>(&flags_) + sizeof(multipathindicator_));
}

bool PBGnssMeasurementsData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBGnssMeasurementsData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 flags = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 svId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &svid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .PBLocApiGnss_LocSvSystemEnumType svType = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_svtype(static_cast< ::PBLocApiGnss_LocSvSystemEnumType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double timeOffsetNs = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timeoffsetns_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 stateMask = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &statemask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 receivedSvTimeNs = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &receivedsvtimens_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 receivedSvTimeUncertaintyNs = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &receivedsvtimeuncertaintyns_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double carrierToNoiseDbHz = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &carriertonoisedbhz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double pseudorangeRateMps = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pseudorangeratemps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double pseudorangeRateUncertaintyMps = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pseudorangerateuncertaintymps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 adrStateMask = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &adrstatemask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double adrMeters = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &adrmeters_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double adrUncertaintyMeters = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &adruncertaintymeters_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float carrierFrequencyHz = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &carrierfrequencyhz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 carrierCycles = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &carriercycles_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double carrierPhase = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &carrierphase_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double carrierPhaseUncertainty = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(137u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &carrierphaseuncertainty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .PBGnssMeasurementsMultipathIndicator multipathIndicator = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_multipathindicator(static_cast< ::PBGnssMeasurementsMultipathIndicator >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double signalToNoiseRatioDb = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(153u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &signaltonoiseratiodb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double agcLevelDb = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(161u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &agcleveldb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBGnssMeasurementsData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBGnssMeasurementsData)
  return false;
#undef DO_
}

void PBGnssMeasurementsData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBGnssMeasurementsData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 flags = 1;
  if (this->flags() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->flags(), output);
  }

  // int32 svId = 2;
  if (this->svid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->svid(), output);
  }

  // .PBLocApiGnss_LocSvSystemEnumType svType = 3;
  if (this->svtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->svtype(), output);
  }

  // double timeOffsetNs = 4;
  if (this->timeoffsetns() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->timeoffsetns(), output);
  }

  // uint32 stateMask = 5;
  if (this->statemask() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->statemask(), output);
  }

  // int64 receivedSvTimeNs = 6;
  if (this->receivedsvtimens() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->receivedsvtimens(), output);
  }

  // int64 receivedSvTimeUncertaintyNs = 7;
  if (this->receivedsvtimeuncertaintyns() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->receivedsvtimeuncertaintyns(), output);
  }

  // double carrierToNoiseDbHz = 8;
  if (this->carriertonoisedbhz() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->carriertonoisedbhz(), output);
  }

  // double pseudorangeRateMps = 9;
  if (this->pseudorangeratemps() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->pseudorangeratemps(), output);
  }

  // double pseudorangeRateUncertaintyMps = 10;
  if (this->pseudorangerateuncertaintymps() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->pseudorangerateuncertaintymps(), output);
  }

  // uint32 adrStateMask = 11;
  if (this->adrstatemask() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->adrstatemask(), output);
  }

  // double adrMeters = 12;
  if (this->adrmeters() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->adrmeters(), output);
  }

  // double adrUncertaintyMeters = 13;
  if (this->adruncertaintymeters() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->adruncertaintymeters(), output);
  }

  // float carrierFrequencyHz = 14;
  if (this->carrierfrequencyhz() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->carrierfrequencyhz(), output);
  }

  // int64 carrierCycles = 15;
  if (this->carriercycles() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->carriercycles(), output);
  }

  // double carrierPhase = 16;
  if (this->carrierphase() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->carrierphase(), output);
  }

  // double carrierPhaseUncertainty = 17;
  if (this->carrierphaseuncertainty() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->carrierphaseuncertainty(), output);
  }

  // .PBGnssMeasurementsMultipathIndicator multipathIndicator = 18;
  if (this->multipathindicator() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      18, this->multipathindicator(), output);
  }

  // double signalToNoiseRatioDb = 19;
  if (this->signaltonoiseratiodb() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->signaltonoiseratiodb(), output);
  }

  // double agcLevelDb = 20;
  if (this->agcleveldb() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->agcleveldb(), output);
  }

  // @@protoc_insertion_point(serialize_end:PBGnssMeasurementsData)
}

::google::protobuf::uint8* PBGnssMeasurementsData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBGnssMeasurementsData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 flags = 1;
  if (this->flags() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->flags(), target);
  }

  // int32 svId = 2;
  if (this->svid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->svid(), target);
  }

  // .PBLocApiGnss_LocSvSystemEnumType svType = 3;
  if (this->svtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->svtype(), target);
  }

  // double timeOffsetNs = 4;
  if (this->timeoffsetns() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->timeoffsetns(), target);
  }

  // uint32 stateMask = 5;
  if (this->statemask() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->statemask(), target);
  }

  // int64 receivedSvTimeNs = 6;
  if (this->receivedsvtimens() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->receivedsvtimens(), target);
  }

  // int64 receivedSvTimeUncertaintyNs = 7;
  if (this->receivedsvtimeuncertaintyns() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->receivedsvtimeuncertaintyns(), target);
  }

  // double carrierToNoiseDbHz = 8;
  if (this->carriertonoisedbhz() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->carriertonoisedbhz(), target);
  }

  // double pseudorangeRateMps = 9;
  if (this->pseudorangeratemps() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->pseudorangeratemps(), target);
  }

  // double pseudorangeRateUncertaintyMps = 10;
  if (this->pseudorangerateuncertaintymps() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->pseudorangerateuncertaintymps(), target);
  }

  // uint32 adrStateMask = 11;
  if (this->adrstatemask() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->adrstatemask(), target);
  }

  // double adrMeters = 12;
  if (this->adrmeters() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->adrmeters(), target);
  }

  // double adrUncertaintyMeters = 13;
  if (this->adruncertaintymeters() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->adruncertaintymeters(), target);
  }

  // float carrierFrequencyHz = 14;
  if (this->carrierfrequencyhz() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->carrierfrequencyhz(), target);
  }

  // int64 carrierCycles = 15;
  if (this->carriercycles() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->carriercycles(), target);
  }

  // double carrierPhase = 16;
  if (this->carrierphase() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->carrierphase(), target);
  }

  // double carrierPhaseUncertainty = 17;
  if (this->carrierphaseuncertainty() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->carrierphaseuncertainty(), target);
  }

  // .PBGnssMeasurementsMultipathIndicator multipathIndicator = 18;
  if (this->multipathindicator() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      18, this->multipathindicator(), target);
  }

  // double signalToNoiseRatioDb = 19;
  if (this->signaltonoiseratiodb() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->signaltonoiseratiodb(), target);
  }

  // double agcLevelDb = 20;
  if (this->agcleveldb() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->agcleveldb(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PBGnssMeasurementsData)
  return target;
}

size_t PBGnssMeasurementsData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBGnssMeasurementsData)
  size_t total_size = 0;

  // uint32 flags = 1;
  if (this->flags() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->flags());
  }

  // int32 svId = 2;
  if (this->svid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->svid());
  }

  // double timeOffsetNs = 4;
  if (this->timeoffsetns() != 0) {
    total_size += 1 + 8;
  }

  // .PBLocApiGnss_LocSvSystemEnumType svType = 3;
  if (this->svtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->svtype());
  }

  // uint32 stateMask = 5;
  if (this->statemask() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->statemask());
  }

  // int64 receivedSvTimeNs = 6;
  if (this->receivedsvtimens() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->receivedsvtimens());
  }

  // int64 receivedSvTimeUncertaintyNs = 7;
  if (this->receivedsvtimeuncertaintyns() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->receivedsvtimeuncertaintyns());
  }

  // double carrierToNoiseDbHz = 8;
  if (this->carriertonoisedbhz() != 0) {
    total_size += 1 + 8;
  }

  // double pseudorangeRateMps = 9;
  if (this->pseudorangeratemps() != 0) {
    total_size += 1 + 8;
  }

  // double pseudorangeRateUncertaintyMps = 10;
  if (this->pseudorangerateuncertaintymps() != 0) {
    total_size += 1 + 8;
  }

  // double adrMeters = 12;
  if (this->adrmeters() != 0) {
    total_size += 1 + 8;
  }

  // uint32 adrStateMask = 11;
  if (this->adrstatemask() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->adrstatemask());
  }

  // float carrierFrequencyHz = 14;
  if (this->carrierfrequencyhz() != 0) {
    total_size += 1 + 4;
  }

  // double adrUncertaintyMeters = 13;
  if (this->adruncertaintymeters() != 0) {
    total_size += 1 + 8;
  }

  // int64 carrierCycles = 15;
  if (this->carriercycles() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->carriercycles());
  }

  // double carrierPhase = 16;
  if (this->carrierphase() != 0) {
    total_size += 2 + 8;
  }

  // double carrierPhaseUncertainty = 17;
  if (this->carrierphaseuncertainty() != 0) {
    total_size += 2 + 8;
  }

  // double signalToNoiseRatioDb = 19;
  if (this->signaltonoiseratiodb() != 0) {
    total_size += 2 + 8;
  }

  // double agcLevelDb = 20;
  if (this->agcleveldb() != 0) {
    total_size += 2 + 8;
  }

  // .PBGnssMeasurementsMultipathIndicator multipathIndicator = 18;
  if (this->multipathindicator() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->multipathindicator());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBGnssMeasurementsData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PBGnssMeasurementsData)
  GOOGLE_DCHECK_NE(&from, this);
  const PBGnssMeasurementsData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PBGnssMeasurementsData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PBGnssMeasurementsData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PBGnssMeasurementsData)
    MergeFrom(*source);
  }
}

void PBGnssMeasurementsData::MergeFrom(const PBGnssMeasurementsData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBGnssMeasurementsData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.flags() != 0) {
    set_flags(from.flags());
  }
  if (from.svid() != 0) {
    set_svid(from.svid());
  }
  if (from.timeoffsetns() != 0) {
    set_timeoffsetns(from.timeoffsetns());
  }
  if (from.svtype() != 0) {
    set_svtype(from.svtype());
  }
  if (from.statemask() != 0) {
    set_statemask(from.statemask());
  }
  if (from.receivedsvtimens() != 0) {
    set_receivedsvtimens(from.receivedsvtimens());
  }
  if (from.receivedsvtimeuncertaintyns() != 0) {
    set_receivedsvtimeuncertaintyns(from.receivedsvtimeuncertaintyns());
  }
  if (from.carriertonoisedbhz() != 0) {
    set_carriertonoisedbhz(from.carriertonoisedbhz());
  }
  if (from.pseudorangeratemps() != 0) {
    set_pseudorangeratemps(from.pseudorangeratemps());
  }
  if (from.pseudorangerateuncertaintymps() != 0) {
    set_pseudorangerateuncertaintymps(from.pseudorangerateuncertaintymps());
  }
  if (from.adrmeters() != 0) {
    set_adrmeters(from.adrmeters());
  }
  if (from.adrstatemask() != 0) {
    set_adrstatemask(from.adrstatemask());
  }
  if (from.carrierfrequencyhz() != 0) {
    set_carrierfrequencyhz(from.carrierfrequencyhz());
  }
  if (from.adruncertaintymeters() != 0) {
    set_adruncertaintymeters(from.adruncertaintymeters());
  }
  if (from.carriercycles() != 0) {
    set_carriercycles(from.carriercycles());
  }
  if (from.carrierphase() != 0) {
    set_carrierphase(from.carrierphase());
  }
  if (from.carrierphaseuncertainty() != 0) {
    set_carrierphaseuncertainty(from.carrierphaseuncertainty());
  }
  if (from.signaltonoiseratiodb() != 0) {
    set_signaltonoiseratiodb(from.signaltonoiseratiodb());
  }
  if (from.agcleveldb() != 0) {
    set_agcleveldb(from.agcleveldb());
  }
  if (from.multipathindicator() != 0) {
    set_multipathindicator(from.multipathindicator());
  }
}

void PBGnssMeasurementsData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PBGnssMeasurementsData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBGnssMeasurementsData::CopyFrom(const PBGnssMeasurementsData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBGnssMeasurementsData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBGnssMeasurementsData::IsInitialized() const {
  return true;
}

void PBGnssMeasurementsData::Swap(PBGnssMeasurementsData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBGnssMeasurementsData::InternalSwap(PBGnssMeasurementsData* other) {
  std::swap(flags_, other->flags_);
  std::swap(svid_, other->svid_);
  std::swap(timeoffsetns_, other->timeoffsetns_);
  std::swap(svtype_, other->svtype_);
  std::swap(statemask_, other->statemask_);
  std::swap(receivedsvtimens_, other->receivedsvtimens_);
  std::swap(receivedsvtimeuncertaintyns_, other->receivedsvtimeuncertaintyns_);
  std::swap(carriertonoisedbhz_, other->carriertonoisedbhz_);
  std::swap(pseudorangeratemps_, other->pseudorangeratemps_);
  std::swap(pseudorangerateuncertaintymps_, other->pseudorangerateuncertaintymps_);
  std::swap(adrmeters_, other->adrmeters_);
  std::swap(adrstatemask_, other->adrstatemask_);
  std::swap(carrierfrequencyhz_, other->carrierfrequencyhz_);
  std::swap(adruncertaintymeters_, other->adruncertaintymeters_);
  std::swap(carriercycles_, other->carriercycles_);
  std::swap(carrierphase_, other->carrierphase_);
  std::swap(carrierphaseuncertainty_, other->carrierphaseuncertainty_);
  std::swap(signaltonoiseratiodb_, other->signaltonoiseratiodb_);
  std::swap(agcleveldb_, other->agcleveldb_);
  std::swap(multipathindicator_, other->multipathindicator_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PBGnssMeasurementsData::GetMetadata() const {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PBGnssMeasurementsData

// uint32 flags = 1;
void PBGnssMeasurementsData::clear_flags() {
  flags_ = 0u;
}
::google::protobuf::uint32 PBGnssMeasurementsData::flags() const {
  // @@protoc_insertion_point(field_get:PBGnssMeasurementsData.flags)
  return flags_;
}
void PBGnssMeasurementsData::set_flags(::google::protobuf::uint32 value) {

  flags_ = value;
  // @@protoc_insertion_point(field_set:PBGnssMeasurementsData.flags)
}

// int32 svId = 2;
void PBGnssMeasurementsData::clear_svid() {
  svid_ = 0;
}
::google::protobuf::int32 PBGnssMeasurementsData::svid() const {
  // @@protoc_insertion_point(field_get:PBGnssMeasurementsData.svId)
  return svid_;
}
void PBGnssMeasurementsData::set_svid(::google::protobuf::int32 value) {

  svid_ = value;
  // @@protoc_insertion_point(field_set:PBGnssMeasurementsData.svId)
}

// .PBLocApiGnss_LocSvSystemEnumType svType = 3;
void PBGnssMeasurementsData::clear_svtype() {
  svtype_ = 0;
}
::PBLocApiGnss_LocSvSystemEnumType PBGnssMeasurementsData::svtype() const {
  // @@protoc_insertion_point(field_get:PBGnssMeasurementsData.svType)
  return static_cast< ::PBLocApiGnss_LocSvSystemEnumType >(svtype_);
}
void PBGnssMeasurementsData::set_svtype(::PBLocApiGnss_LocSvSystemEnumType value) {

  svtype_ = value;
  // @@protoc_insertion_point(field_set:PBGnssMeasurementsData.svType)
}

// double timeOffsetNs = 4;
void PBGnssMeasurementsData::clear_timeoffsetns() {
  timeoffsetns_ = 0;
}
double PBGnssMeasurementsData::timeoffsetns() const {
  // @@protoc_insertion_point(field_get:PBGnssMeasurementsData.timeOffsetNs)
  return timeoffsetns_;
}
void PBGnssMeasurementsData::set_timeoffsetns(double value) {

  timeoffsetns_ = value;
  // @@protoc_insertion_point(field_set:PBGnssMeasurementsData.timeOffsetNs)
}

// uint32 stateMask = 5;
void PBGnssMeasurementsData::clear_statemask() {
  statemask_ = 0u;
}
::google::protobuf::uint32 PBGnssMeasurementsData::statemask() const {
  // @@protoc_insertion_point(field_get:PBGnssMeasurementsData.stateMask)
  return statemask_;
}
void PBGnssMeasurementsData::set_statemask(::google::protobuf::uint32 value) {

  statemask_ = value;
  // @@protoc_insertion_point(field_set:PBGnssMeasurementsData.stateMask)
}

// int64 receivedSvTimeNs = 6;
void PBGnssMeasurementsData::clear_receivedsvtimens() {
  receivedsvtimens_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 PBGnssMeasurementsData::receivedsvtimens() const {
  // @@protoc_insertion_point(field_get:PBGnssMeasurementsData.receivedSvTimeNs)
  return receivedsvtimens_;
}
void PBGnssMeasurementsData::set_receivedsvtimens(::google::protobuf::int64 value) {

  receivedsvtimens_ = value;
  // @@protoc_insertion_point(field_set:PBGnssMeasurementsData.receivedSvTimeNs)
}

// int64 receivedSvTimeUncertaintyNs = 7;
void PBGnssMeasurementsData::clear_receivedsvtimeuncertaintyns() {
  receivedsvtimeuncertaintyns_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 PBGnssMeasurementsData::receivedsvtimeuncertaintyns() const {
  // @@protoc_insertion_point(field_get:PBGnssMeasurementsData.receivedSvTimeUncertaintyNs)
  return receivedsvtimeuncertaintyns_;
}
void PBGnssMeasurementsData::set_receivedsvtimeuncertaintyns(::google::protobuf::int64 value) {

  receivedsvtimeuncertaintyns_ = value;
  // @@protoc_insertion_point(field_set:PBGnssMeasurementsData.receivedSvTimeUncertaintyNs)
}

// double carrierToNoiseDbHz = 8;
void PBGnssMeasurementsData::clear_carriertonoisedbhz() {
  carriertonoisedbhz_ = 0;
}
double PBGnssMeasurementsData::carriertonoisedbhz() const {
  // @@protoc_insertion_point(field_get:PBGnssMeasurementsData.carrierToNoiseDbHz)
  return carriertonoisedbhz_;
}
void PBGnssMeasurementsData::set_carriertonoisedbhz(double value) {

  carriertonoisedbhz_ = value;
  // @@protoc_insertion_point(field_set:PBGnssMeasurementsData.carrierToNoiseDbHz)
}

// double pseudorangeRateMps = 9;
void PBGnssMeasurementsData::clear_pseudorangeratemps() {
  pseudorangeratemps_ = 0;
}
double PBGnssMeasurementsData::pseudorangeratemps() const {
  // @@protoc_insertion_point(field_get:PBGnssMeasurementsData.pseudorangeRateMps)
  return pseudorangeratemps_;
}
void PBGnssMeasurementsData::set_pseudorangeratemps(double value) {

  pseudorangeratemps_ = value;
  // @@protoc_insertion_point(field_set:PBGnssMeasurementsData.pseudorangeRateMps)
}

// double pseudorangeRateUncertaintyMps = 10;
void PBGnssMeasurementsData::clear_pseudorangerateuncertaintymps() {
  pseudorangerateuncertaintymps_ = 0;
}
double PBGnssMeasurementsData::pseudorangerateuncertaintymps() const {
  // @@protoc_insertion_point(field_get:PBGnssMeasurementsData.pseudorangeRateUncertaintyMps)
  return pseudorangerateuncertaintymps_;
}
void PBGnssMeasurementsData::set_pseudorangerateuncertaintymps(double value) {

  pseudorangerateuncertaintymps_ = value;
  // @@protoc_insertion_point(field_set:PBGnssMeasurementsData.pseudorangeRateUncertaintyMps)
}

// uint32 adrStateMask = 11;
void PBGnssMeasurementsData::clear_adrstatemask() {
  adrstatemask_ = 0u;
}
::google::protobuf::uint32 PBGnssMeasurementsData::adrstatemask() const {
  // @@protoc_insertion_point(field_get:PBGnssMeasurementsData.adrStateMask)
  return adrstatemask_;
}
void PBGnssMeasurementsData::set_adrstatemask(::google::protobuf::uint32 value) {

  adrstatemask_ = value;
  // @@protoc_insertion_point(field_set:PBGnssMeasurementsData.adrStateMask)
}

// double adrMeters = 12;
void PBGnssMeasurementsData::clear_adrmeters() {
  adrmeters_ = 0;
}
double PBGnssMeasurementsData::adrmeters() const {
  // @@protoc_insertion_point(field_get:PBGnssMeasurementsData.adrMeters)
  return adrmeters_;
}
void PBGnssMeasurementsData::set_adrmeters(double value) {

  adrmeters_ = value;
  // @@protoc_insertion_point(field_set:PBGnssMeasurementsData.adrMeters)
}

// double adrUncertaintyMeters = 13;
void PBGnssMeasurementsData::clear_adruncertaintymeters() {
  adruncertaintymeters_ = 0;
}
double PBGnssMeasurementsData::adruncertaintymeters() const {
  // @@protoc_insertion_point(field_get:PBGnssMeasurementsData.adrUncertaintyMeters)
  return adruncertaintymeters_;
}
void PBGnssMeasurementsData::set_adruncertaintymeters(double value) {

  adruncertaintymeters_ = value;
  // @@protoc_insertion_point(field_set:PBGnssMeasurementsData.adrUncertaintyMeters)
}

// float carrierFrequencyHz = 14;
void PBGnssMeasurementsData::clear_carrierfrequencyhz() {
  carrierfrequencyhz_ = 0;
}
float PBGnssMeasurementsData::carrierfrequencyhz() const {
  // @@protoc_insertion_point(field_get:PBGnssMeasurementsData.carrierFrequencyHz)
  return carrierfrequencyhz_;
}
void PBGnssMeasurementsData::set_carrierfrequencyhz(float value) {

  carrierfrequencyhz_ = value;
  // @@protoc_insertion_point(field_set:PBGnssMeasurementsData.carrierFrequencyHz)
}

// int64 carrierCycles = 15;
void PBGnssMeasurementsData::clear_carriercycles() {
  carriercycles_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 PBGnssMeasurementsData::carriercycles() const {
  // @@protoc_insertion_point(field_get:PBGnssMeasurementsData.carrierCycles)
  return carriercycles_;
}
void PBGnssMeasurementsData::set_carriercycles(::google::protobuf::int64 value) {

  carriercycles_ = value;
  // @@protoc_insertion_point(field_set:PBGnssMeasurementsData.carrierCycles)
}

// double carrierPhase = 16;
void PBGnssMeasurementsData::clear_carrierphase() {
  carrierphase_ = 0;
}
double PBGnssMeasurementsData::carrierphase() const {
  // @@protoc_insertion_point(field_get:PBGnssMeasurementsData.carrierPhase)
  return carrierphase_;
}
void PBGnssMeasurementsData::set_carrierphase(double value) {

  carrierphase_ = value;
  // @@protoc_insertion_point(field_set:PBGnssMeasurementsData.carrierPhase)
}

// double carrierPhaseUncertainty = 17;
void PBGnssMeasurementsData::clear_carrierphaseuncertainty() {
  carrierphaseuncertainty_ = 0;
}
double PBGnssMeasurementsData::carrierphaseuncertainty() const {
  // @@protoc_insertion_point(field_get:PBGnssMeasurementsData.carrierPhaseUncertainty)
  return carrierphaseuncertainty_;
}
void PBGnssMeasurementsData::set_carrierphaseuncertainty(double value) {

  carrierphaseuncertainty_ = value;
  // @@protoc_insertion_point(field_set:PBGnssMeasurementsData.carrierPhaseUncertainty)
}

// .PBGnssMeasurementsMultipathIndicator multipathIndicator = 18;
void PBGnssMeasurementsData::clear_multipathindicator() {
  multipathindicator_ = 0;
}
::PBGnssMeasurementsMultipathIndicator PBGnssMeasurementsData::multipathindicator() const {
  // @@protoc_insertion_point(field_get:PBGnssMeasurementsData.multipathIndicator)
  return static_cast< ::PBGnssMeasurementsMultipathIndicator >(multipathindicator_);
}
void PBGnssMeasurementsData::set_multipathindicator(::PBGnssMeasurementsMultipathIndicator value) {

  multipathindicator_ = value;
  // @@protoc_insertion_point(field_set:PBGnssMeasurementsData.multipathIndicator)
}

// double signalToNoiseRatioDb = 19;
void PBGnssMeasurementsData::clear_signaltonoiseratiodb() {
  signaltonoiseratiodb_ = 0;
}
double PBGnssMeasurementsData::signaltonoiseratiodb() const {
  // @@protoc_insertion_point(field_get:PBGnssMeasurementsData.signalToNoiseRatioDb)
  return signaltonoiseratiodb_;
}
void PBGnssMeasurementsData::set_signaltonoiseratiodb(double value) {

  signaltonoiseratiodb_ = value;
  // @@protoc_insertion_point(field_set:PBGnssMeasurementsData.signalToNoiseRatioDb)
}

// double agcLevelDb = 20;
void PBGnssMeasurementsData::clear_agcleveldb() {
  agcleveldb_ = 0;
}
double PBGnssMeasurementsData::agcleveldb() const {
  // @@protoc_insertion_point(field_get:PBGnssMeasurementsData.agcLevelDb)
  return agcleveldb_;
}
void PBGnssMeasurementsData::set_agcleveldb(double value) {

  agcleveldb_ = value;
  // @@protoc_insertion_point(field_set:PBGnssMeasurementsData.agcLevelDb)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PBLocApiGnssLocationPositionDynamics::kBodyFrameDataMaskFieldNumber;
const int PBLocApiGnssLocationPositionDynamics::kLongAccelFieldNumber;
const int PBLocApiGnssLocationPositionDynamics::kLatAccelFieldNumber;
const int PBLocApiGnssLocationPositionDynamics::kVertAccelFieldNumber;
const int PBLocApiGnssLocationPositionDynamics::kLongAccelUncFieldNumber;
const int PBLocApiGnssLocationPositionDynamics::kLatAccelUncFieldNumber;
const int PBLocApiGnssLocationPositionDynamics::kVertAccelUncFieldNumber;
const int PBLocApiGnssLocationPositionDynamics::kPitchFieldNumber;
const int PBLocApiGnssLocationPositionDynamics::kPitchUncFieldNumber;
const int PBLocApiGnssLocationPositionDynamics::kPitchRateFieldNumber;
const int PBLocApiGnssLocationPositionDynamics::kPitchRateUncFieldNumber;
const int PBLocApiGnssLocationPositionDynamics::kRollFieldNumber;
const int PBLocApiGnssLocationPositionDynamics::kRollUncFieldNumber;
const int PBLocApiGnssLocationPositionDynamics::kRollRateFieldNumber;
const int PBLocApiGnssLocationPositionDynamics::kRollRateUncFieldNumber;
const int PBLocApiGnssLocationPositionDynamics::kYawFieldNumber;
const int PBLocApiGnssLocationPositionDynamics::kYawUncFieldNumber;
const int PBLocApiGnssLocationPositionDynamics::kYawRateFieldNumber;
const int PBLocApiGnssLocationPositionDynamics::kYawRateUncFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PBLocApiGnssLocationPositionDynamics::PBLocApiGnssLocationPositionDynamics()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_LocationApiDataTypes_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBLocApiGnssLocationPositionDynamics)
}
PBLocApiGnssLocationPositionDynamics::PBLocApiGnssLocationPositionDynamics(const PBLocApiGnssLocationPositionDynamics& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&bodyframedatamask_, &from.bodyframedatamask_,
    reinterpret_cast<char*>(&yawrateunc_) -
    reinterpret_cast<char*>(&bodyframedatamask_) + sizeof(yawrateunc_));
  // @@protoc_insertion_point(copy_constructor:PBLocApiGnssLocationPositionDynamics)
}

void PBLocApiGnssLocationPositionDynamics::SharedCtor() {
  ::memset(&bodyframedatamask_, 0, reinterpret_cast<char*>(&yawrateunc_) -
    reinterpret_cast<char*>(&bodyframedatamask_) + sizeof(yawrateunc_));
  _cached_size_ = 0;
}

PBLocApiGnssLocationPositionDynamics::~PBLocApiGnssLocationPositionDynamics() {
  // @@protoc_insertion_point(destructor:PBLocApiGnssLocationPositionDynamics)
  SharedDtor();
}

void PBLocApiGnssLocationPositionDynamics::SharedDtor() {
}

void PBLocApiGnssLocationPositionDynamics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBLocApiGnssLocationPositionDynamics::descriptor() {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PBLocApiGnssLocationPositionDynamics& PBLocApiGnssLocationPositionDynamics::default_instance() {
  protobuf_LocationApiDataTypes_2eproto::InitDefaults();
  return *internal_default_instance();
}

PBLocApiGnssLocationPositionDynamics* PBLocApiGnssLocationPositionDynamics::New(::google::protobuf::Arena* arena) const {
  PBLocApiGnssLocationPositionDynamics* n = new PBLocApiGnssLocationPositionDynamics;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBLocApiGnssLocationPositionDynamics::Clear() {
// @@protoc_insertion_point(message_clear_start:PBLocApiGnssLocationPositionDynamics)
  ::memset(&bodyframedatamask_, 0, reinterpret_cast<char*>(&yawrateunc_) -
    reinterpret_cast<char*>(&bodyframedatamask_) + sizeof(yawrateunc_));
}

bool PBLocApiGnssLocationPositionDynamics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBLocApiGnssLocationPositionDynamics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 bodyFrameDataMask = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bodyframedatamask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float longAccel = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &longaccel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float latAccel = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lataccel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float vertAccel = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vertaccel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float longAccelUnc = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &longaccelunc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float latAccelUnc = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lataccelunc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float vertAccelUnc = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vertaccelunc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float pitch = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pitch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float pitchUnc = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pitchunc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float pitchRate = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pitchrate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float pitchRateUnc = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pitchrateunc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float roll = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &roll_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float rollUnc = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rollunc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float rollRate = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rollrate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float rollRateUnc = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(125u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rollrateunc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float yaw = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(133u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float yawUnc = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(141u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yawunc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float yawRate = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(149u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yawrate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float yawRateUnc = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(157u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yawrateunc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBLocApiGnssLocationPositionDynamics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBLocApiGnssLocationPositionDynamics)
  return false;
#undef DO_
}

void PBLocApiGnssLocationPositionDynamics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBLocApiGnssLocationPositionDynamics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 bodyFrameDataMask = 1;
  if (this->bodyframedatamask() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bodyframedatamask(), output);
  }

  // float longAccel = 2;
  if (this->longaccel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->longaccel(), output);
  }

  // float latAccel = 3;
  if (this->lataccel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->lataccel(), output);
  }

  // float vertAccel = 4;
  if (this->vertaccel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->vertaccel(), output);
  }

  // float longAccelUnc = 5;
  if (this->longaccelunc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->longaccelunc(), output);
  }

  // float latAccelUnc = 6;
  if (this->lataccelunc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->lataccelunc(), output);
  }

  // float vertAccelUnc = 7;
  if (this->vertaccelunc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->vertaccelunc(), output);
  }

  // float pitch = 8;
  if (this->pitch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->pitch(), output);
  }

  // float pitchUnc = 9;
  if (this->pitchunc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->pitchunc(), output);
  }

  // float pitchRate = 10;
  if (this->pitchrate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->pitchrate(), output);
  }

  // float pitchRateUnc = 11;
  if (this->pitchrateunc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->pitchrateunc(), output);
  }

  // float roll = 12;
  if (this->roll() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->roll(), output);
  }

  // float rollUnc = 13;
  if (this->rollunc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->rollunc(), output);
  }

  // float rollRate = 14;
  if (this->rollrate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->rollrate(), output);
  }

  // float rollRateUnc = 15;
  if (this->rollrateunc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->rollrateunc(), output);
  }

  // float yaw = 16;
  if (this->yaw() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->yaw(), output);
  }

  // float yawUnc = 17;
  if (this->yawunc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->yawunc(), output);
  }

  // float yawRate = 18;
  if (this->yawrate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->yawrate(), output);
  }

  // float yawRateUnc = 19;
  if (this->yawrateunc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->yawrateunc(), output);
  }

  // @@protoc_insertion_point(serialize_end:PBLocApiGnssLocationPositionDynamics)
}

::google::protobuf::uint8* PBLocApiGnssLocationPositionDynamics::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBLocApiGnssLocationPositionDynamics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 bodyFrameDataMask = 1;
  if (this->bodyframedatamask() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bodyframedatamask(), target);
  }

  // float longAccel = 2;
  if (this->longaccel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->longaccel(), target);
  }

  // float latAccel = 3;
  if (this->lataccel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->lataccel(), target);
  }

  // float vertAccel = 4;
  if (this->vertaccel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->vertaccel(), target);
  }

  // float longAccelUnc = 5;
  if (this->longaccelunc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->longaccelunc(), target);
  }

  // float latAccelUnc = 6;
  if (this->lataccelunc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->lataccelunc(), target);
  }

  // float vertAccelUnc = 7;
  if (this->vertaccelunc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->vertaccelunc(), target);
  }

  // float pitch = 8;
  if (this->pitch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->pitch(), target);
  }

  // float pitchUnc = 9;
  if (this->pitchunc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->pitchunc(), target);
  }

  // float pitchRate = 10;
  if (this->pitchrate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->pitchrate(), target);
  }

  // float pitchRateUnc = 11;
  if (this->pitchrateunc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->pitchrateunc(), target);
  }

  // float roll = 12;
  if (this->roll() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->roll(), target);
  }

  // float rollUnc = 13;
  if (this->rollunc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->rollunc(), target);
  }

  // float rollRate = 14;
  if (this->rollrate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->rollrate(), target);
  }

  // float rollRateUnc = 15;
  if (this->rollrateunc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->rollrateunc(), target);
  }

  // float yaw = 16;
  if (this->yaw() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->yaw(), target);
  }

  // float yawUnc = 17;
  if (this->yawunc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->yawunc(), target);
  }

  // float yawRate = 18;
  if (this->yawrate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->yawrate(), target);
  }

  // float yawRateUnc = 19;
  if (this->yawrateunc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->yawrateunc(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PBLocApiGnssLocationPositionDynamics)
  return target;
}

size_t PBLocApiGnssLocationPositionDynamics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBLocApiGnssLocationPositionDynamics)
  size_t total_size = 0;

  // uint32 bodyFrameDataMask = 1;
  if (this->bodyframedatamask() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bodyframedatamask());
  }

  // float longAccel = 2;
  if (this->longaccel() != 0) {
    total_size += 1 + 4;
  }

  // float latAccel = 3;
  if (this->lataccel() != 0) {
    total_size += 1 + 4;
  }

  // float vertAccel = 4;
  if (this->vertaccel() != 0) {
    total_size += 1 + 4;
  }

  // float longAccelUnc = 5;
  if (this->longaccelunc() != 0) {
    total_size += 1 + 4;
  }

  // float latAccelUnc = 6;
  if (this->lataccelunc() != 0) {
    total_size += 1 + 4;
  }

  // float vertAccelUnc = 7;
  if (this->vertaccelunc() != 0) {
    total_size += 1 + 4;
  }

  // float pitch = 8;
  if (this->pitch() != 0) {
    total_size += 1 + 4;
  }

  // float pitchUnc = 9;
  if (this->pitchunc() != 0) {
    total_size += 1 + 4;
  }

  // float pitchRate = 10;
  if (this->pitchrate() != 0) {
    total_size += 1 + 4;
  }

  // float pitchRateUnc = 11;
  if (this->pitchrateunc() != 0) {
    total_size += 1 + 4;
  }

  // float roll = 12;
  if (this->roll() != 0) {
    total_size += 1 + 4;
  }

  // float rollUnc = 13;
  if (this->rollunc() != 0) {
    total_size += 1 + 4;
  }

  // float rollRate = 14;
  if (this->rollrate() != 0) {
    total_size += 1 + 4;
  }

  // float rollRateUnc = 15;
  if (this->rollrateunc() != 0) {
    total_size += 1 + 4;
  }

  // float yaw = 16;
  if (this->yaw() != 0) {
    total_size += 2 + 4;
  }

  // float yawUnc = 17;
  if (this->yawunc() != 0) {
    total_size += 2 + 4;
  }

  // float yawRate = 18;
  if (this->yawrate() != 0) {
    total_size += 2 + 4;
  }

  // float yawRateUnc = 19;
  if (this->yawrateunc() != 0) {
    total_size += 2 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBLocApiGnssLocationPositionDynamics::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PBLocApiGnssLocationPositionDynamics)
  GOOGLE_DCHECK_NE(&from, this);
  const PBLocApiGnssLocationPositionDynamics* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PBLocApiGnssLocationPositionDynamics>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PBLocApiGnssLocationPositionDynamics)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PBLocApiGnssLocationPositionDynamics)
    MergeFrom(*source);
  }
}

void PBLocApiGnssLocationPositionDynamics::MergeFrom(const PBLocApiGnssLocationPositionDynamics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBLocApiGnssLocationPositionDynamics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bodyframedatamask() != 0) {
    set_bodyframedatamask(from.bodyframedatamask());
  }
  if (from.longaccel() != 0) {
    set_longaccel(from.longaccel());
  }
  if (from.lataccel() != 0) {
    set_lataccel(from.lataccel());
  }
  if (from.vertaccel() != 0) {
    set_vertaccel(from.vertaccel());
  }
  if (from.longaccelunc() != 0) {
    set_longaccelunc(from.longaccelunc());
  }
  if (from.lataccelunc() != 0) {
    set_lataccelunc(from.lataccelunc());
  }
  if (from.vertaccelunc() != 0) {
    set_vertaccelunc(from.vertaccelunc());
  }
  if (from.pitch() != 0) {
    set_pitch(from.pitch());
  }
  if (from.pitchunc() != 0) {
    set_pitchunc(from.pitchunc());
  }
  if (from.pitchrate() != 0) {
    set_pitchrate(from.pitchrate());
  }
  if (from.pitchrateunc() != 0) {
    set_pitchrateunc(from.pitchrateunc());
  }
  if (from.roll() != 0) {
    set_roll(from.roll());
  }
  if (from.rollunc() != 0) {
    set_rollunc(from.rollunc());
  }
  if (from.rollrate() != 0) {
    set_rollrate(from.rollrate());
  }
  if (from.rollrateunc() != 0) {
    set_rollrateunc(from.rollrateunc());
  }
  if (from.yaw() != 0) {
    set_yaw(from.yaw());
  }
  if (from.yawunc() != 0) {
    set_yawunc(from.yawunc());
  }
  if (from.yawrate() != 0) {
    set_yawrate(from.yawrate());
  }
  if (from.yawrateunc() != 0) {
    set_yawrateunc(from.yawrateunc());
  }
}

void PBLocApiGnssLocationPositionDynamics::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PBLocApiGnssLocationPositionDynamics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBLocApiGnssLocationPositionDynamics::CopyFrom(const PBLocApiGnssLocationPositionDynamics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBLocApiGnssLocationPositionDynamics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBLocApiGnssLocationPositionDynamics::IsInitialized() const {
  return true;
}

void PBLocApiGnssLocationPositionDynamics::Swap(PBLocApiGnssLocationPositionDynamics* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBLocApiGnssLocationPositionDynamics::InternalSwap(PBLocApiGnssLocationPositionDynamics* other) {
  std::swap(bodyframedatamask_, other->bodyframedatamask_);
  std::swap(longaccel_, other->longaccel_);
  std::swap(lataccel_, other->lataccel_);
  std::swap(vertaccel_, other->vertaccel_);
  std::swap(longaccelunc_, other->longaccelunc_);
  std::swap(lataccelunc_, other->lataccelunc_);
  std::swap(vertaccelunc_, other->vertaccelunc_);
  std::swap(pitch_, other->pitch_);
  std::swap(pitchunc_, other->pitchunc_);
  std::swap(pitchrate_, other->pitchrate_);
  std::swap(pitchrateunc_, other->pitchrateunc_);
  std::swap(roll_, other->roll_);
  std::swap(rollunc_, other->rollunc_);
  std::swap(rollrate_, other->rollrate_);
  std::swap(rollrateunc_, other->rollrateunc_);
  std::swap(yaw_, other->yaw_);
  std::swap(yawunc_, other->yawunc_);
  std::swap(yawrate_, other->yawrate_);
  std::swap(yawrateunc_, other->yawrateunc_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PBLocApiGnssLocationPositionDynamics::GetMetadata() const {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PBLocApiGnssLocationPositionDynamics

// uint32 bodyFrameDataMask = 1;
void PBLocApiGnssLocationPositionDynamics::clear_bodyframedatamask() {
  bodyframedatamask_ = 0u;
}
::google::protobuf::uint32 PBLocApiGnssLocationPositionDynamics::bodyframedatamask() const {
  // @@protoc_insertion_point(field_get:PBLocApiGnssLocationPositionDynamics.bodyFrameDataMask)
  return bodyframedatamask_;
}
void PBLocApiGnssLocationPositionDynamics::set_bodyframedatamask(::google::protobuf::uint32 value) {

  bodyframedatamask_ = value;
  // @@protoc_insertion_point(field_set:PBLocApiGnssLocationPositionDynamics.bodyFrameDataMask)
}

// float longAccel = 2;
void PBLocApiGnssLocationPositionDynamics::clear_longaccel() {
  longaccel_ = 0;
}
float PBLocApiGnssLocationPositionDynamics::longaccel() const {
  // @@protoc_insertion_point(field_get:PBLocApiGnssLocationPositionDynamics.longAccel)
  return longaccel_;
}
void PBLocApiGnssLocationPositionDynamics::set_longaccel(float value) {

  longaccel_ = value;
  // @@protoc_insertion_point(field_set:PBLocApiGnssLocationPositionDynamics.longAccel)
}

// float latAccel = 3;
void PBLocApiGnssLocationPositionDynamics::clear_lataccel() {
  lataccel_ = 0;
}
float PBLocApiGnssLocationPositionDynamics::lataccel() const {
  // @@protoc_insertion_point(field_get:PBLocApiGnssLocationPositionDynamics.latAccel)
  return lataccel_;
}
void PBLocApiGnssLocationPositionDynamics::set_lataccel(float value) {

  lataccel_ = value;
  // @@protoc_insertion_point(field_set:PBLocApiGnssLocationPositionDynamics.latAccel)
}

// float vertAccel = 4;
void PBLocApiGnssLocationPositionDynamics::clear_vertaccel() {
  vertaccel_ = 0;
}
float PBLocApiGnssLocationPositionDynamics::vertaccel() const {
  // @@protoc_insertion_point(field_get:PBLocApiGnssLocationPositionDynamics.vertAccel)
  return vertaccel_;
}
void PBLocApiGnssLocationPositionDynamics::set_vertaccel(float value) {

  vertaccel_ = value;
  // @@protoc_insertion_point(field_set:PBLocApiGnssLocationPositionDynamics.vertAccel)
}

// float longAccelUnc = 5;
void PBLocApiGnssLocationPositionDynamics::clear_longaccelunc() {
  longaccelunc_ = 0;
}
float PBLocApiGnssLocationPositionDynamics::longaccelunc() const {
  // @@protoc_insertion_point(field_get:PBLocApiGnssLocationPositionDynamics.longAccelUnc)
  return longaccelunc_;
}
void PBLocApiGnssLocationPositionDynamics::set_longaccelunc(float value) {

  longaccelunc_ = value;
  // @@protoc_insertion_point(field_set:PBLocApiGnssLocationPositionDynamics.longAccelUnc)
}

// float latAccelUnc = 6;
void PBLocApiGnssLocationPositionDynamics::clear_lataccelunc() {
  lataccelunc_ = 0;
}
float PBLocApiGnssLocationPositionDynamics::lataccelunc() const {
  // @@protoc_insertion_point(field_get:PBLocApiGnssLocationPositionDynamics.latAccelUnc)
  return lataccelunc_;
}
void PBLocApiGnssLocationPositionDynamics::set_lataccelunc(float value) {

  lataccelunc_ = value;
  // @@protoc_insertion_point(field_set:PBLocApiGnssLocationPositionDynamics.latAccelUnc)
}

// float vertAccelUnc = 7;
void PBLocApiGnssLocationPositionDynamics::clear_vertaccelunc() {
  vertaccelunc_ = 0;
}
float PBLocApiGnssLocationPositionDynamics::vertaccelunc() const {
  // @@protoc_insertion_point(field_get:PBLocApiGnssLocationPositionDynamics.vertAccelUnc)
  return vertaccelunc_;
}
void PBLocApiGnssLocationPositionDynamics::set_vertaccelunc(float value) {

  vertaccelunc_ = value;
  // @@protoc_insertion_point(field_set:PBLocApiGnssLocationPositionDynamics.vertAccelUnc)
}

// float pitch = 8;
void PBLocApiGnssLocationPositionDynamics::clear_pitch() {
  pitch_ = 0;
}
float PBLocApiGnssLocationPositionDynamics::pitch() const {
  // @@protoc_insertion_point(field_get:PBLocApiGnssLocationPositionDynamics.pitch)
  return pitch_;
}
void PBLocApiGnssLocationPositionDynamics::set_pitch(float value) {

  pitch_ = value;
  // @@protoc_insertion_point(field_set:PBLocApiGnssLocationPositionDynamics.pitch)
}

// float pitchUnc = 9;
void PBLocApiGnssLocationPositionDynamics::clear_pitchunc() {
  pitchunc_ = 0;
}
float PBLocApiGnssLocationPositionDynamics::pitchunc() const {
  // @@protoc_insertion_point(field_get:PBLocApiGnssLocationPositionDynamics.pitchUnc)
  return pitchunc_;
}
void PBLocApiGnssLocationPositionDynamics::set_pitchunc(float value) {

  pitchunc_ = value;
  // @@protoc_insertion_point(field_set:PBLocApiGnssLocationPositionDynamics.pitchUnc)
}

// float pitchRate = 10;
void PBLocApiGnssLocationPositionDynamics::clear_pitchrate() {
  pitchrate_ = 0;
}
float PBLocApiGnssLocationPositionDynamics::pitchrate() const {
  // @@protoc_insertion_point(field_get:PBLocApiGnssLocationPositionDynamics.pitchRate)
  return pitchrate_;
}
void PBLocApiGnssLocationPositionDynamics::set_pitchrate(float value) {

  pitchrate_ = value;
  // @@protoc_insertion_point(field_set:PBLocApiGnssLocationPositionDynamics.pitchRate)
}

// float pitchRateUnc = 11;
void PBLocApiGnssLocationPositionDynamics::clear_pitchrateunc() {
  pitchrateunc_ = 0;
}
float PBLocApiGnssLocationPositionDynamics::pitchrateunc() const {
  // @@protoc_insertion_point(field_get:PBLocApiGnssLocationPositionDynamics.pitchRateUnc)
  return pitchrateunc_;
}
void PBLocApiGnssLocationPositionDynamics::set_pitchrateunc(float value) {

  pitchrateunc_ = value;
  // @@protoc_insertion_point(field_set:PBLocApiGnssLocationPositionDynamics.pitchRateUnc)
}

// float roll = 12;
void PBLocApiGnssLocationPositionDynamics::clear_roll() {
  roll_ = 0;
}
float PBLocApiGnssLocationPositionDynamics::roll() const {
  // @@protoc_insertion_point(field_get:PBLocApiGnssLocationPositionDynamics.roll)
  return roll_;
}
void PBLocApiGnssLocationPositionDynamics::set_roll(float value) {

  roll_ = value;
  // @@protoc_insertion_point(field_set:PBLocApiGnssLocationPositionDynamics.roll)
}

// float rollUnc = 13;
void PBLocApiGnssLocationPositionDynamics::clear_rollunc() {
  rollunc_ = 0;
}
float PBLocApiGnssLocationPositionDynamics::rollunc() const {
  // @@protoc_insertion_point(field_get:PBLocApiGnssLocationPositionDynamics.rollUnc)
  return rollunc_;
}
void PBLocApiGnssLocationPositionDynamics::set_rollunc(float value) {

  rollunc_ = value;
  // @@protoc_insertion_point(field_set:PBLocApiGnssLocationPositionDynamics.rollUnc)
}

// float rollRate = 14;
void PBLocApiGnssLocationPositionDynamics::clear_rollrate() {
  rollrate_ = 0;
}
float PBLocApiGnssLocationPositionDynamics::rollrate() const {
  // @@protoc_insertion_point(field_get:PBLocApiGnssLocationPositionDynamics.rollRate)
  return rollrate_;
}
void PBLocApiGnssLocationPositionDynamics::set_rollrate(float value) {

  rollrate_ = value;
  // @@protoc_insertion_point(field_set:PBLocApiGnssLocationPositionDynamics.rollRate)
}

// float rollRateUnc = 15;
void PBLocApiGnssLocationPositionDynamics::clear_rollrateunc() {
  rollrateunc_ = 0;
}
float PBLocApiGnssLocationPositionDynamics::rollrateunc() const {
  // @@protoc_insertion_point(field_get:PBLocApiGnssLocationPositionDynamics.rollRateUnc)
  return rollrateunc_;
}
void PBLocApiGnssLocationPositionDynamics::set_rollrateunc(float value) {

  rollrateunc_ = value;
  // @@protoc_insertion_point(field_set:PBLocApiGnssLocationPositionDynamics.rollRateUnc)
}

// float yaw = 16;
void PBLocApiGnssLocationPositionDynamics::clear_yaw() {
  yaw_ = 0;
}
float PBLocApiGnssLocationPositionDynamics::yaw() const {
  // @@protoc_insertion_point(field_get:PBLocApiGnssLocationPositionDynamics.yaw)
  return yaw_;
}
void PBLocApiGnssLocationPositionDynamics::set_yaw(float value) {

  yaw_ = value;
  // @@protoc_insertion_point(field_set:PBLocApiGnssLocationPositionDynamics.yaw)
}

// float yawUnc = 17;
void PBLocApiGnssLocationPositionDynamics::clear_yawunc() {
  yawunc_ = 0;
}
float PBLocApiGnssLocationPositionDynamics::yawunc() const {
  // @@protoc_insertion_point(field_get:PBLocApiGnssLocationPositionDynamics.yawUnc)
  return yawunc_;
}
void PBLocApiGnssLocationPositionDynamics::set_yawunc(float value) {

  yawunc_ = value;
  // @@protoc_insertion_point(field_set:PBLocApiGnssLocationPositionDynamics.yawUnc)
}

// float yawRate = 18;
void PBLocApiGnssLocationPositionDynamics::clear_yawrate() {
  yawrate_ = 0;
}
float PBLocApiGnssLocationPositionDynamics::yawrate() const {
  // @@protoc_insertion_point(field_get:PBLocApiGnssLocationPositionDynamics.yawRate)
  return yawrate_;
}
void PBLocApiGnssLocationPositionDynamics::set_yawrate(float value) {

  yawrate_ = value;
  // @@protoc_insertion_point(field_set:PBLocApiGnssLocationPositionDynamics.yawRate)
}

// float yawRateUnc = 19;
void PBLocApiGnssLocationPositionDynamics::clear_yawrateunc() {
  yawrateunc_ = 0;
}
float PBLocApiGnssLocationPositionDynamics::yawrateunc() const {
  // @@protoc_insertion_point(field_get:PBLocApiGnssLocationPositionDynamics.yawRateUnc)
  return yawrateunc_;
}
void PBLocApiGnssLocationPositionDynamics::set_yawrateunc(float value) {

  yawrateunc_ = value;
  // @@protoc_insertion_point(field_set:PBLocApiGnssLocationPositionDynamics.yawRateUnc)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PBLocApiSystemTimeStructUnion::kGpsSystemTimeFieldNumber;
const int PBLocApiSystemTimeStructUnion::kGalSystemTimeFieldNumber;
const int PBLocApiSystemTimeStructUnion::kBdsSystemTimeFieldNumber;
const int PBLocApiSystemTimeStructUnion::kQzssSystemTimeFieldNumber;
const int PBLocApiSystemTimeStructUnion::kGloSystemTimeFieldNumber;
const int PBLocApiSystemTimeStructUnion::kNavicSystemTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PBLocApiSystemTimeStructUnion::PBLocApiSystemTimeStructUnion()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_LocationApiDataTypes_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBLocApiSystemTimeStructUnion)
}
PBLocApiSystemTimeStructUnion::PBLocApiSystemTimeStructUnion(const PBLocApiSystemTimeStructUnion& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_sysTimeUnion();
  switch (from.sysTimeUnion_case()) {
    case kGpsSystemTime: {
      mutable_gpssystemtime()->::PBLocApiGnssSystemTimeStructType::MergeFrom(from.gpssystemtime());
      break;
    }
    case kGalSystemTime: {
      mutable_galsystemtime()->::PBLocApiGnssSystemTimeStructType::MergeFrom(from.galsystemtime());
      break;
    }
    case kBdsSystemTime: {
      mutable_bdssystemtime()->::PBLocApiGnssSystemTimeStructType::MergeFrom(from.bdssystemtime());
      break;
    }
    case kQzssSystemTime: {
      mutable_qzsssystemtime()->::PBLocApiGnssSystemTimeStructType::MergeFrom(from.qzsssystemtime());
      break;
    }
    case kGloSystemTime: {
      mutable_glosystemtime()->::PBLocApiGnssGloTimeStructType::MergeFrom(from.glosystemtime());
      break;
    }
    case kNavicSystemTime: {
      mutable_navicsystemtime()->::PBLocApiGnssSystemTimeStructType::MergeFrom(from.navicsystemtime());
      break;
    }
    case SYSTIMEUNION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:PBLocApiSystemTimeStructUnion)
}

void PBLocApiSystemTimeStructUnion::SharedCtor() {
  clear_has_sysTimeUnion();
  _cached_size_ = 0;
}

PBLocApiSystemTimeStructUnion::~PBLocApiSystemTimeStructUnion() {
  // @@protoc_insertion_point(destructor:PBLocApiSystemTimeStructUnion)
  SharedDtor();
}

void PBLocApiSystemTimeStructUnion::SharedDtor() {
  if (has_sysTimeUnion()) {
    clear_sysTimeUnion();
  }
}

void PBLocApiSystemTimeStructUnion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBLocApiSystemTimeStructUnion::descriptor() {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PBLocApiSystemTimeStructUnion& PBLocApiSystemTimeStructUnion::default_instance() {
  protobuf_LocationApiDataTypes_2eproto::InitDefaults();
  return *internal_default_instance();
}

PBLocApiSystemTimeStructUnion* PBLocApiSystemTimeStructUnion::New(::google::protobuf::Arena* arena) const {
  PBLocApiSystemTimeStructUnion* n = new PBLocApiSystemTimeStructUnion;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBLocApiSystemTimeStructUnion::clear_sysTimeUnion() {
// @@protoc_insertion_point(one_of_clear_start:PBLocApiSystemTimeStructUnion)
  switch (sysTimeUnion_case()) {
    case kGpsSystemTime: {
      delete sysTimeUnion_.gpssystemtime_;
      break;
    }
    case kGalSystemTime: {
      delete sysTimeUnion_.galsystemtime_;
      break;
    }
    case kBdsSystemTime: {
      delete sysTimeUnion_.bdssystemtime_;
      break;
    }
    case kQzssSystemTime: {
      delete sysTimeUnion_.qzsssystemtime_;
      break;
    }
    case kGloSystemTime: {
      delete sysTimeUnion_.glosystemtime_;
      break;
    }
    case kNavicSystemTime: {
      delete sysTimeUnion_.navicsystemtime_;
      break;
    }
    case SYSTIMEUNION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SYSTIMEUNION_NOT_SET;
}


void PBLocApiSystemTimeStructUnion::Clear() {
// @@protoc_insertion_point(message_clear_start:PBLocApiSystemTimeStructUnion)
  clear_sysTimeUnion();
}

bool PBLocApiSystemTimeStructUnion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBLocApiSystemTimeStructUnion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .PBLocApiGnssSystemTimeStructType gpsSystemTime = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gpssystemtime()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .PBLocApiGnssSystemTimeStructType galSystemTime = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_galsystemtime()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .PBLocApiGnssSystemTimeStructType bdsSystemTime = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bdssystemtime()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .PBLocApiGnssSystemTimeStructType qzssSystemTime = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_qzsssystemtime()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .PBLocApiGnssGloTimeStructType gloSystemTime = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_glosystemtime()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .PBLocApiGnssSystemTimeStructType navicSystemTime = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_navicsystemtime()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBLocApiSystemTimeStructUnion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBLocApiSystemTimeStructUnion)
  return false;
#undef DO_
}

void PBLocApiSystemTimeStructUnion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBLocApiSystemTimeStructUnion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .PBLocApiGnssSystemTimeStructType gpsSystemTime = 1;
  if (has_gpssystemtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *sysTimeUnion_.gpssystemtime_, output);
  }

  // .PBLocApiGnssSystemTimeStructType galSystemTime = 2;
  if (has_galsystemtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *sysTimeUnion_.galsystemtime_, output);
  }

  // .PBLocApiGnssSystemTimeStructType bdsSystemTime = 3;
  if (has_bdssystemtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *sysTimeUnion_.bdssystemtime_, output);
  }

  // .PBLocApiGnssSystemTimeStructType qzssSystemTime = 4;
  if (has_qzsssystemtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *sysTimeUnion_.qzsssystemtime_, output);
  }

  // .PBLocApiGnssGloTimeStructType gloSystemTime = 5;
  if (has_glosystemtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *sysTimeUnion_.glosystemtime_, output);
  }

  // .PBLocApiGnssSystemTimeStructType navicSystemTime = 6;
  if (has_navicsystemtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *sysTimeUnion_.navicsystemtime_, output);
  }

  // @@protoc_insertion_point(serialize_end:PBLocApiSystemTimeStructUnion)
}

::google::protobuf::uint8* PBLocApiSystemTimeStructUnion::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBLocApiSystemTimeStructUnion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .PBLocApiGnssSystemTimeStructType gpsSystemTime = 1;
  if (has_gpssystemtime()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *sysTimeUnion_.gpssystemtime_, deterministic, target);
  }

  // .PBLocApiGnssSystemTimeStructType galSystemTime = 2;
  if (has_galsystemtime()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *sysTimeUnion_.galsystemtime_, deterministic, target);
  }

  // .PBLocApiGnssSystemTimeStructType bdsSystemTime = 3;
  if (has_bdssystemtime()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *sysTimeUnion_.bdssystemtime_, deterministic, target);
  }

  // .PBLocApiGnssSystemTimeStructType qzssSystemTime = 4;
  if (has_qzsssystemtime()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *sysTimeUnion_.qzsssystemtime_, deterministic, target);
  }

  // .PBLocApiGnssGloTimeStructType gloSystemTime = 5;
  if (has_glosystemtime()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *sysTimeUnion_.glosystemtime_, deterministic, target);
  }

  // .PBLocApiGnssSystemTimeStructType navicSystemTime = 6;
  if (has_navicsystemtime()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *sysTimeUnion_.navicsystemtime_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PBLocApiSystemTimeStructUnion)
  return target;
}

size_t PBLocApiSystemTimeStructUnion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBLocApiSystemTimeStructUnion)
  size_t total_size = 0;

  switch (sysTimeUnion_case()) {
    // .PBLocApiGnssSystemTimeStructType gpsSystemTime = 1;
    case kGpsSystemTime: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *sysTimeUnion_.gpssystemtime_);
      break;
    }
    // .PBLocApiGnssSystemTimeStructType galSystemTime = 2;
    case kGalSystemTime: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *sysTimeUnion_.galsystemtime_);
      break;
    }
    // .PBLocApiGnssSystemTimeStructType bdsSystemTime = 3;
    case kBdsSystemTime: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *sysTimeUnion_.bdssystemtime_);
      break;
    }
    // .PBLocApiGnssSystemTimeStructType qzssSystemTime = 4;
    case kQzssSystemTime: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *sysTimeUnion_.qzsssystemtime_);
      break;
    }
    // .PBLocApiGnssGloTimeStructType gloSystemTime = 5;
    case kGloSystemTime: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *sysTimeUnion_.glosystemtime_);
      break;
    }
    // .PBLocApiGnssSystemTimeStructType navicSystemTime = 6;
    case kNavicSystemTime: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *sysTimeUnion_.navicsystemtime_);
      break;
    }
    case SYSTIMEUNION_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBLocApiSystemTimeStructUnion::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PBLocApiSystemTimeStructUnion)
  GOOGLE_DCHECK_NE(&from, this);
  const PBLocApiSystemTimeStructUnion* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PBLocApiSystemTimeStructUnion>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PBLocApiSystemTimeStructUnion)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PBLocApiSystemTimeStructUnion)
    MergeFrom(*source);
  }
}

void PBLocApiSystemTimeStructUnion::MergeFrom(const PBLocApiSystemTimeStructUnion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBLocApiSystemTimeStructUnion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.sysTimeUnion_case()) {
    case kGpsSystemTime: {
      mutable_gpssystemtime()->::PBLocApiGnssSystemTimeStructType::MergeFrom(from.gpssystemtime());
      break;
    }
    case kGalSystemTime: {
      mutable_galsystemtime()->::PBLocApiGnssSystemTimeStructType::MergeFrom(from.galsystemtime());
      break;
    }
    case kBdsSystemTime: {
      mutable_bdssystemtime()->::PBLocApiGnssSystemTimeStructType::MergeFrom(from.bdssystemtime());
      break;
    }
    case kQzssSystemTime: {
      mutable_qzsssystemtime()->::PBLocApiGnssSystemTimeStructType::MergeFrom(from.qzsssystemtime());
      break;
    }
    case kGloSystemTime: {
      mutable_glosystemtime()->::PBLocApiGnssGloTimeStructType::MergeFrom(from.glosystemtime());
      break;
    }
    case kNavicSystemTime: {
      mutable_navicsystemtime()->::PBLocApiGnssSystemTimeStructType::MergeFrom(from.navicsystemtime());
      break;
    }
    case SYSTIMEUNION_NOT_SET: {
      break;
    }
  }
}

void PBLocApiSystemTimeStructUnion::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PBLocApiSystemTimeStructUnion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBLocApiSystemTimeStructUnion::CopyFrom(const PBLocApiSystemTimeStructUnion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBLocApiSystemTimeStructUnion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBLocApiSystemTimeStructUnion::IsInitialized() const {
  return true;
}

void PBLocApiSystemTimeStructUnion::Swap(PBLocApiSystemTimeStructUnion* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBLocApiSystemTimeStructUnion::InternalSwap(PBLocApiSystemTimeStructUnion* other) {
  std::swap(sysTimeUnion_, other->sysTimeUnion_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PBLocApiSystemTimeStructUnion::GetMetadata() const {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PBLocApiSystemTimeStructUnion

// .PBLocApiGnssSystemTimeStructType gpsSystemTime = 1;
bool PBLocApiSystemTimeStructUnion::has_gpssystemtime() const {
  return sysTimeUnion_case() == kGpsSystemTime;
}
void PBLocApiSystemTimeStructUnion::set_has_gpssystemtime() {
  _oneof_case_[0] = kGpsSystemTime;
}
void PBLocApiSystemTimeStructUnion::clear_gpssystemtime() {
  if (has_gpssystemtime()) {
    delete sysTimeUnion_.gpssystemtime_;
    clear_has_sysTimeUnion();
  }
}
 const ::PBLocApiGnssSystemTimeStructType& PBLocApiSystemTimeStructUnion::gpssystemtime() const {
  // @@protoc_insertion_point(field_get:PBLocApiSystemTimeStructUnion.gpsSystemTime)
  return has_gpssystemtime()
      ? *sysTimeUnion_.gpssystemtime_
      : ::PBLocApiGnssSystemTimeStructType::default_instance();
}
::PBLocApiGnssSystemTimeStructType* PBLocApiSystemTimeStructUnion::mutable_gpssystemtime() {
  if (!has_gpssystemtime()) {
    clear_sysTimeUnion();
    set_has_gpssystemtime();
    sysTimeUnion_.gpssystemtime_ = new ::PBLocApiGnssSystemTimeStructType;
  }
  // @@protoc_insertion_point(field_mutable:PBLocApiSystemTimeStructUnion.gpsSystemTime)
  return sysTimeUnion_.gpssystemtime_;
}
::PBLocApiGnssSystemTimeStructType* PBLocApiSystemTimeStructUnion::release_gpssystemtime() {
  // @@protoc_insertion_point(field_release:PBLocApiSystemTimeStructUnion.gpsSystemTime)
  if (has_gpssystemtime()) {
    clear_has_sysTimeUnion();
    ::PBLocApiGnssSystemTimeStructType* temp = sysTimeUnion_.gpssystemtime_;
    sysTimeUnion_.gpssystemtime_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void PBLocApiSystemTimeStructUnion::set_allocated_gpssystemtime(::PBLocApiGnssSystemTimeStructType* gpssystemtime) {
  clear_sysTimeUnion();
  if (gpssystemtime) {
    set_has_gpssystemtime();
    sysTimeUnion_.gpssystemtime_ = gpssystemtime;
  }
  // @@protoc_insertion_point(field_set_allocated:PBLocApiSystemTimeStructUnion.gpsSystemTime)
}

// .PBLocApiGnssSystemTimeStructType galSystemTime = 2;
bool PBLocApiSystemTimeStructUnion::has_galsystemtime() const {
  return sysTimeUnion_case() == kGalSystemTime;
}
void PBLocApiSystemTimeStructUnion::set_has_galsystemtime() {
  _oneof_case_[0] = kGalSystemTime;
}
void PBLocApiSystemTimeStructUnion::clear_galsystemtime() {
  if (has_galsystemtime()) {
    delete sysTimeUnion_.galsystemtime_;
    clear_has_sysTimeUnion();
  }
}
 const ::PBLocApiGnssSystemTimeStructType& PBLocApiSystemTimeStructUnion::galsystemtime() const {
  // @@protoc_insertion_point(field_get:PBLocApiSystemTimeStructUnion.galSystemTime)
  return has_galsystemtime()
      ? *sysTimeUnion_.galsystemtime_
      : ::PBLocApiGnssSystemTimeStructType::default_instance();
}
::PBLocApiGnssSystemTimeStructType* PBLocApiSystemTimeStructUnion::mutable_galsystemtime() {
  if (!has_galsystemtime()) {
    clear_sysTimeUnion();
    set_has_galsystemtime();
    sysTimeUnion_.galsystemtime_ = new ::PBLocApiGnssSystemTimeStructType;
  }
  // @@protoc_insertion_point(field_mutable:PBLocApiSystemTimeStructUnion.galSystemTime)
  return sysTimeUnion_.galsystemtime_;
}
::PBLocApiGnssSystemTimeStructType* PBLocApiSystemTimeStructUnion::release_galsystemtime() {
  // @@protoc_insertion_point(field_release:PBLocApiSystemTimeStructUnion.galSystemTime)
  if (has_galsystemtime()) {
    clear_has_sysTimeUnion();
    ::PBLocApiGnssSystemTimeStructType* temp = sysTimeUnion_.galsystemtime_;
    sysTimeUnion_.galsystemtime_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void PBLocApiSystemTimeStructUnion::set_allocated_galsystemtime(::PBLocApiGnssSystemTimeStructType* galsystemtime) {
  clear_sysTimeUnion();
  if (galsystemtime) {
    set_has_galsystemtime();
    sysTimeUnion_.galsystemtime_ = galsystemtime;
  }
  // @@protoc_insertion_point(field_set_allocated:PBLocApiSystemTimeStructUnion.galSystemTime)
}

// .PBLocApiGnssSystemTimeStructType bdsSystemTime = 3;
bool PBLocApiSystemTimeStructUnion::has_bdssystemtime() const {
  return sysTimeUnion_case() == kBdsSystemTime;
}
void PBLocApiSystemTimeStructUnion::set_has_bdssystemtime() {
  _oneof_case_[0] = kBdsSystemTime;
}
void PBLocApiSystemTimeStructUnion::clear_bdssystemtime() {
  if (has_bdssystemtime()) {
    delete sysTimeUnion_.bdssystemtime_;
    clear_has_sysTimeUnion();
  }
}
 const ::PBLocApiGnssSystemTimeStructType& PBLocApiSystemTimeStructUnion::bdssystemtime() const {
  // @@protoc_insertion_point(field_get:PBLocApiSystemTimeStructUnion.bdsSystemTime)
  return has_bdssystemtime()
      ? *sysTimeUnion_.bdssystemtime_
      : ::PBLocApiGnssSystemTimeStructType::default_instance();
}
::PBLocApiGnssSystemTimeStructType* PBLocApiSystemTimeStructUnion::mutable_bdssystemtime() {
  if (!has_bdssystemtime()) {
    clear_sysTimeUnion();
    set_has_bdssystemtime();
    sysTimeUnion_.bdssystemtime_ = new ::PBLocApiGnssSystemTimeStructType;
  }
  // @@protoc_insertion_point(field_mutable:PBLocApiSystemTimeStructUnion.bdsSystemTime)
  return sysTimeUnion_.bdssystemtime_;
}
::PBLocApiGnssSystemTimeStructType* PBLocApiSystemTimeStructUnion::release_bdssystemtime() {
  // @@protoc_insertion_point(field_release:PBLocApiSystemTimeStructUnion.bdsSystemTime)
  if (has_bdssystemtime()) {
    clear_has_sysTimeUnion();
    ::PBLocApiGnssSystemTimeStructType* temp = sysTimeUnion_.bdssystemtime_;
    sysTimeUnion_.bdssystemtime_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void PBLocApiSystemTimeStructUnion::set_allocated_bdssystemtime(::PBLocApiGnssSystemTimeStructType* bdssystemtime) {
  clear_sysTimeUnion();
  if (bdssystemtime) {
    set_has_bdssystemtime();
    sysTimeUnion_.bdssystemtime_ = bdssystemtime;
  }
  // @@protoc_insertion_point(field_set_allocated:PBLocApiSystemTimeStructUnion.bdsSystemTime)
}

// .PBLocApiGnssSystemTimeStructType qzssSystemTime = 4;
bool PBLocApiSystemTimeStructUnion::has_qzsssystemtime() const {
  return sysTimeUnion_case() == kQzssSystemTime;
}
void PBLocApiSystemTimeStructUnion::set_has_qzsssystemtime() {
  _oneof_case_[0] = kQzssSystemTime;
}
void PBLocApiSystemTimeStructUnion::clear_qzsssystemtime() {
  if (has_qzsssystemtime()) {
    delete sysTimeUnion_.qzsssystemtime_;
    clear_has_sysTimeUnion();
  }
}
 const ::PBLocApiGnssSystemTimeStructType& PBLocApiSystemTimeStructUnion::qzsssystemtime() const {
  // @@protoc_insertion_point(field_get:PBLocApiSystemTimeStructUnion.qzssSystemTime)
  return has_qzsssystemtime()
      ? *sysTimeUnion_.qzsssystemtime_
      : ::PBLocApiGnssSystemTimeStructType::default_instance();
}
::PBLocApiGnssSystemTimeStructType* PBLocApiSystemTimeStructUnion::mutable_qzsssystemtime() {
  if (!has_qzsssystemtime()) {
    clear_sysTimeUnion();
    set_has_qzsssystemtime();
    sysTimeUnion_.qzsssystemtime_ = new ::PBLocApiGnssSystemTimeStructType;
  }
  // @@protoc_insertion_point(field_mutable:PBLocApiSystemTimeStructUnion.qzssSystemTime)
  return sysTimeUnion_.qzsssystemtime_;
}
::PBLocApiGnssSystemTimeStructType* PBLocApiSystemTimeStructUnion::release_qzsssystemtime() {
  // @@protoc_insertion_point(field_release:PBLocApiSystemTimeStructUnion.qzssSystemTime)
  if (has_qzsssystemtime()) {
    clear_has_sysTimeUnion();
    ::PBLocApiGnssSystemTimeStructType* temp = sysTimeUnion_.qzsssystemtime_;
    sysTimeUnion_.qzsssystemtime_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void PBLocApiSystemTimeStructUnion::set_allocated_qzsssystemtime(::PBLocApiGnssSystemTimeStructType* qzsssystemtime) {
  clear_sysTimeUnion();
  if (qzsssystemtime) {
    set_has_qzsssystemtime();
    sysTimeUnion_.qzsssystemtime_ = qzsssystemtime;
  }
  // @@protoc_insertion_point(field_set_allocated:PBLocApiSystemTimeStructUnion.qzssSystemTime)
}

// .PBLocApiGnssGloTimeStructType gloSystemTime = 5;
bool PBLocApiSystemTimeStructUnion::has_glosystemtime() const {
  return sysTimeUnion_case() == kGloSystemTime;
}
void PBLocApiSystemTimeStructUnion::set_has_glosystemtime() {
  _oneof_case_[0] = kGloSystemTime;
}
void PBLocApiSystemTimeStructUnion::clear_glosystemtime() {
  if (has_glosystemtime()) {
    delete sysTimeUnion_.glosystemtime_;
    clear_has_sysTimeUnion();
  }
}
 const ::PBLocApiGnssGloTimeStructType& PBLocApiSystemTimeStructUnion::glosystemtime() const {
  // @@protoc_insertion_point(field_get:PBLocApiSystemTimeStructUnion.gloSystemTime)
  return has_glosystemtime()
      ? *sysTimeUnion_.glosystemtime_
      : ::PBLocApiGnssGloTimeStructType::default_instance();
}
::PBLocApiGnssGloTimeStructType* PBLocApiSystemTimeStructUnion::mutable_glosystemtime() {
  if (!has_glosystemtime()) {
    clear_sysTimeUnion();
    set_has_glosystemtime();
    sysTimeUnion_.glosystemtime_ = new ::PBLocApiGnssGloTimeStructType;
  }
  // @@protoc_insertion_point(field_mutable:PBLocApiSystemTimeStructUnion.gloSystemTime)
  return sysTimeUnion_.glosystemtime_;
}
::PBLocApiGnssGloTimeStructType* PBLocApiSystemTimeStructUnion::release_glosystemtime() {
  // @@protoc_insertion_point(field_release:PBLocApiSystemTimeStructUnion.gloSystemTime)
  if (has_glosystemtime()) {
    clear_has_sysTimeUnion();
    ::PBLocApiGnssGloTimeStructType* temp = sysTimeUnion_.glosystemtime_;
    sysTimeUnion_.glosystemtime_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void PBLocApiSystemTimeStructUnion::set_allocated_glosystemtime(::PBLocApiGnssGloTimeStructType* glosystemtime) {
  clear_sysTimeUnion();
  if (glosystemtime) {
    set_has_glosystemtime();
    sysTimeUnion_.glosystemtime_ = glosystemtime;
  }
  // @@protoc_insertion_point(field_set_allocated:PBLocApiSystemTimeStructUnion.gloSystemTime)
}

// .PBLocApiGnssSystemTimeStructType navicSystemTime = 6;
bool PBLocApiSystemTimeStructUnion::has_navicsystemtime() const {
  return sysTimeUnion_case() == kNavicSystemTime;
}
void PBLocApiSystemTimeStructUnion::set_has_navicsystemtime() {
  _oneof_case_[0] = kNavicSystemTime;
}
void PBLocApiSystemTimeStructUnion::clear_navicsystemtime() {
  if (has_navicsystemtime()) {
    delete sysTimeUnion_.navicsystemtime_;
    clear_has_sysTimeUnion();
  }
}
 const ::PBLocApiGnssSystemTimeStructType& PBLocApiSystemTimeStructUnion::navicsystemtime() const {
  // @@protoc_insertion_point(field_get:PBLocApiSystemTimeStructUnion.navicSystemTime)
  return has_navicsystemtime()
      ? *sysTimeUnion_.navicsystemtime_
      : ::PBLocApiGnssSystemTimeStructType::default_instance();
}
::PBLocApiGnssSystemTimeStructType* PBLocApiSystemTimeStructUnion::mutable_navicsystemtime() {
  if (!has_navicsystemtime()) {
    clear_sysTimeUnion();
    set_has_navicsystemtime();
    sysTimeUnion_.navicsystemtime_ = new ::PBLocApiGnssSystemTimeStructType;
  }
  // @@protoc_insertion_point(field_mutable:PBLocApiSystemTimeStructUnion.navicSystemTime)
  return sysTimeUnion_.navicsystemtime_;
}
::PBLocApiGnssSystemTimeStructType* PBLocApiSystemTimeStructUnion::release_navicsystemtime() {
  // @@protoc_insertion_point(field_release:PBLocApiSystemTimeStructUnion.navicSystemTime)
  if (has_navicsystemtime()) {
    clear_has_sysTimeUnion();
    ::PBLocApiGnssSystemTimeStructType* temp = sysTimeUnion_.navicsystemtime_;
    sysTimeUnion_.navicsystemtime_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void PBLocApiSystemTimeStructUnion::set_allocated_navicsystemtime(::PBLocApiGnssSystemTimeStructType* navicsystemtime) {
  clear_sysTimeUnion();
  if (navicsystemtime) {
    set_has_navicsystemtime();
    sysTimeUnion_.navicsystemtime_ = navicsystemtime;
  }
  // @@protoc_insertion_point(field_set_allocated:PBLocApiSystemTimeStructUnion.navicSystemTime)
}

bool PBLocApiSystemTimeStructUnion::has_sysTimeUnion() const {
  return sysTimeUnion_case() != SYSTIMEUNION_NOT_SET;
}
void PBLocApiSystemTimeStructUnion::clear_has_sysTimeUnion() {
  _oneof_case_[0] = SYSTIMEUNION_NOT_SET;
}
PBLocApiSystemTimeStructUnion::SysTimeUnionCase PBLocApiSystemTimeStructUnion::sysTimeUnion_case() const {
  return PBLocApiSystemTimeStructUnion::SysTimeUnionCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PBLocApiGnssSystemTime::kGnssSystemTimeSrcFieldNumber;
const int PBLocApiGnssSystemTime::kUFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PBLocApiGnssSystemTime::PBLocApiGnssSystemTime()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_LocationApiDataTypes_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBLocApiGnssSystemTime)
}
PBLocApiGnssSystemTime::PBLocApiGnssSystemTime(const PBLocApiGnssSystemTime& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_u()) {
    u_ = new ::PBLocApiSystemTimeStructUnion(*from.u_);
  } else {
    u_ = NULL;
  }
  gnsssystemtimesrc_ = from.gnsssystemtimesrc_;
  // @@protoc_insertion_point(copy_constructor:PBLocApiGnssSystemTime)
}

void PBLocApiGnssSystemTime::SharedCtor() {
  ::memset(&u_, 0, reinterpret_cast<char*>(&gnsssystemtimesrc_) -
    reinterpret_cast<char*>(&u_) + sizeof(gnsssystemtimesrc_));
  _cached_size_ = 0;
}

PBLocApiGnssSystemTime::~PBLocApiGnssSystemTime() {
  // @@protoc_insertion_point(destructor:PBLocApiGnssSystemTime)
  SharedDtor();
}

void PBLocApiGnssSystemTime::SharedDtor() {
  if (this != internal_default_instance()) {
    delete u_;
  }
}

void PBLocApiGnssSystemTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBLocApiGnssSystemTime::descriptor() {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PBLocApiGnssSystemTime& PBLocApiGnssSystemTime::default_instance() {
  protobuf_LocationApiDataTypes_2eproto::InitDefaults();
  return *internal_default_instance();
}

PBLocApiGnssSystemTime* PBLocApiGnssSystemTime::New(::google::protobuf::Arena* arena) const {
  PBLocApiGnssSystemTime* n = new PBLocApiGnssSystemTime;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBLocApiGnssSystemTime::Clear() {
// @@protoc_insertion_point(message_clear_start:PBLocApiGnssSystemTime)
  if (GetArenaNoVirtual() == NULL && u_ != NULL) {
    delete u_;
  }
  u_ = NULL;
  gnsssystemtimesrc_ = 0;
}

bool PBLocApiGnssSystemTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBLocApiGnssSystemTime)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .PBLocApiGnss_LocSvSystemEnumType gnssSystemTimeSrc = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_gnsssystemtimesrc(static_cast< ::PBLocApiGnss_LocSvSystemEnumType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .PBLocApiSystemTimeStructUnion u = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_u()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBLocApiGnssSystemTime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBLocApiGnssSystemTime)
  return false;
#undef DO_
}

void PBLocApiGnssSystemTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBLocApiGnssSystemTime)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .PBLocApiGnss_LocSvSystemEnumType gnssSystemTimeSrc = 1;
  if (this->gnsssystemtimesrc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->gnsssystemtimesrc(), output);
  }

  // .PBLocApiSystemTimeStructUnion u = 2;
  if (this->has_u()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->u_, output);
  }

  // @@protoc_insertion_point(serialize_end:PBLocApiGnssSystemTime)
}

::google::protobuf::uint8* PBLocApiGnssSystemTime::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBLocApiGnssSystemTime)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .PBLocApiGnss_LocSvSystemEnumType gnssSystemTimeSrc = 1;
  if (this->gnsssystemtimesrc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->gnsssystemtimesrc(), target);
  }

  // .PBLocApiSystemTimeStructUnion u = 2;
  if (this->has_u()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->u_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PBLocApiGnssSystemTime)
  return target;
}

size_t PBLocApiGnssSystemTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBLocApiGnssSystemTime)
  size_t total_size = 0;

  // .PBLocApiSystemTimeStructUnion u = 2;
  if (this->has_u()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->u_);
  }

  // .PBLocApiGnss_LocSvSystemEnumType gnssSystemTimeSrc = 1;
  if (this->gnsssystemtimesrc() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->gnsssystemtimesrc());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBLocApiGnssSystemTime::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PBLocApiGnssSystemTime)
  GOOGLE_DCHECK_NE(&from, this);
  const PBLocApiGnssSystemTime* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PBLocApiGnssSystemTime>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PBLocApiGnssSystemTime)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PBLocApiGnssSystemTime)
    MergeFrom(*source);
  }
}

void PBLocApiGnssSystemTime::MergeFrom(const PBLocApiGnssSystemTime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBLocApiGnssSystemTime)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_u()) {
    mutable_u()->::PBLocApiSystemTimeStructUnion::MergeFrom(from.u());
  }
  if (from.gnsssystemtimesrc() != 0) {
    set_gnsssystemtimesrc(from.gnsssystemtimesrc());
  }
}

void PBLocApiGnssSystemTime::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PBLocApiGnssSystemTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBLocApiGnssSystemTime::CopyFrom(const PBLocApiGnssSystemTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBLocApiGnssSystemTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBLocApiGnssSystemTime::IsInitialized() const {
  return true;
}

void PBLocApiGnssSystemTime::Swap(PBLocApiGnssSystemTime* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBLocApiGnssSystemTime::InternalSwap(PBLocApiGnssSystemTime* other) {
  std::swap(u_, other->u_);
  std::swap(gnsssystemtimesrc_, other->gnsssystemtimesrc_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PBLocApiGnssSystemTime::GetMetadata() const {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PBLocApiGnssSystemTime

// .PBLocApiGnss_LocSvSystemEnumType gnssSystemTimeSrc = 1;
void PBLocApiGnssSystemTime::clear_gnsssystemtimesrc() {
  gnsssystemtimesrc_ = 0;
}
::PBLocApiGnss_LocSvSystemEnumType PBLocApiGnssSystemTime::gnsssystemtimesrc() const {
  // @@protoc_insertion_point(field_get:PBLocApiGnssSystemTime.gnssSystemTimeSrc)
  return static_cast< ::PBLocApiGnss_LocSvSystemEnumType >(gnsssystemtimesrc_);
}
void PBLocApiGnssSystemTime::set_gnsssystemtimesrc(::PBLocApiGnss_LocSvSystemEnumType value) {

  gnsssystemtimesrc_ = value;
  // @@protoc_insertion_point(field_set:PBLocApiGnssSystemTime.gnssSystemTimeSrc)
}

// .PBLocApiSystemTimeStructUnion u = 2;
bool PBLocApiGnssSystemTime::has_u() const {
  return this != internal_default_instance() && u_ != NULL;
}
void PBLocApiGnssSystemTime::clear_u() {
  if (GetArenaNoVirtual() == NULL && u_ != NULL) delete u_;
  u_ = NULL;
}
const ::PBLocApiSystemTimeStructUnion& PBLocApiGnssSystemTime::u() const {
  // @@protoc_insertion_point(field_get:PBLocApiGnssSystemTime.u)
  return u_ != NULL ? *u_
                         : *::PBLocApiSystemTimeStructUnion::internal_default_instance();
}
::PBLocApiSystemTimeStructUnion* PBLocApiGnssSystemTime::mutable_u() {

  if (u_ == NULL) {
    u_ = new ::PBLocApiSystemTimeStructUnion;
  }
  // @@protoc_insertion_point(field_mutable:PBLocApiGnssSystemTime.u)
  return u_;
}
::PBLocApiSystemTimeStructUnion* PBLocApiGnssSystemTime::release_u() {
  // @@protoc_insertion_point(field_release:PBLocApiGnssSystemTime.u)

  ::PBLocApiSystemTimeStructUnion* temp = u_;
  u_ = NULL;
  return temp;
}
void PBLocApiGnssSystemTime::set_allocated_u(::PBLocApiSystemTimeStructUnion* u) {
  delete u_;
  u_ = u;
  if (u) {

  } else {

  }
  // @@protoc_insertion_point(field_set_allocated:PBLocApiGnssSystemTime.u)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PBGnssLocationSvUsedInPosition::kGpsSvUsedIdsMaskFieldNumber;
const int PBGnssLocationSvUsedInPosition::kGloSvUsedIdsMaskFieldNumber;
const int PBGnssLocationSvUsedInPosition::kGalSvUsedIdsMaskFieldNumber;
const int PBGnssLocationSvUsedInPosition::kBdsSvUsedIdsMaskFieldNumber;
const int PBGnssLocationSvUsedInPosition::kQzssSvUsedIdsMaskFieldNumber;
const int PBGnssLocationSvUsedInPosition::kNavicSvUsedIdsMaskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PBGnssLocationSvUsedInPosition::PBGnssLocationSvUsedInPosition()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_LocationApiDataTypes_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBGnssLocationSvUsedInPosition)
}
PBGnssLocationSvUsedInPosition::PBGnssLocationSvUsedInPosition(const PBGnssLocationSvUsedInPosition& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&gpssvusedidsmask_, &from.gpssvusedidsmask_,
    reinterpret_cast<char*>(&navicsvusedidsmask_) -
    reinterpret_cast<char*>(&gpssvusedidsmask_) + sizeof(navicsvusedidsmask_));
  // @@protoc_insertion_point(copy_constructor:PBGnssLocationSvUsedInPosition)
}

void PBGnssLocationSvUsedInPosition::SharedCtor() {
  ::memset(&gpssvusedidsmask_, 0, reinterpret_cast<char*>(&navicsvusedidsmask_) -
    reinterpret_cast<char*>(&gpssvusedidsmask_) + sizeof(navicsvusedidsmask_));
  _cached_size_ = 0;
}

PBGnssLocationSvUsedInPosition::~PBGnssLocationSvUsedInPosition() {
  // @@protoc_insertion_point(destructor:PBGnssLocationSvUsedInPosition)
  SharedDtor();
}

void PBGnssLocationSvUsedInPosition::SharedDtor() {
}

void PBGnssLocationSvUsedInPosition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBGnssLocationSvUsedInPosition::descriptor() {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PBGnssLocationSvUsedInPosition& PBGnssLocationSvUsedInPosition::default_instance() {
  protobuf_LocationApiDataTypes_2eproto::InitDefaults();
  return *internal_default_instance();
}

PBGnssLocationSvUsedInPosition* PBGnssLocationSvUsedInPosition::New(::google::protobuf::Arena* arena) const {
  PBGnssLocationSvUsedInPosition* n = new PBGnssLocationSvUsedInPosition;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBGnssLocationSvUsedInPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:PBGnssLocationSvUsedInPosition)
  ::memset(&gpssvusedidsmask_, 0, reinterpret_cast<char*>(&navicsvusedidsmask_) -
    reinterpret_cast<char*>(&gpssvusedidsmask_) + sizeof(navicsvusedidsmask_));
}

bool PBGnssLocationSvUsedInPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBGnssLocationSvUsedInPosition)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 gpsSvUsedIdsMask = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gpssvusedidsmask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 gloSvUsedIdsMask = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &glosvusedidsmask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 galSvUsedIdsMask = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &galsvusedidsmask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 bdsSvUsedIdsMask = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bdssvusedidsmask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 qzssSvUsedIdsMask = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &qzsssvusedidsmask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 navicSvUsedIdsMask = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &navicsvusedidsmask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBGnssLocationSvUsedInPosition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBGnssLocationSvUsedInPosition)
  return false;
#undef DO_
}

void PBGnssLocationSvUsedInPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBGnssLocationSvUsedInPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 gpsSvUsedIdsMask = 1;
  if (this->gpssvusedidsmask() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->gpssvusedidsmask(), output);
  }

  // uint64 gloSvUsedIdsMask = 2;
  if (this->glosvusedidsmask() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->glosvusedidsmask(), output);
  }

  // uint64 galSvUsedIdsMask = 3;
  if (this->galsvusedidsmask() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->galsvusedidsmask(), output);
  }

  // uint64 bdsSvUsedIdsMask = 4;
  if (this->bdssvusedidsmask() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->bdssvusedidsmask(), output);
  }

  // uint64 qzssSvUsedIdsMask = 5;
  if (this->qzsssvusedidsmask() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->qzsssvusedidsmask(), output);
  }

  // uint64 navicSvUsedIdsMask = 6;
  if (this->navicsvusedidsmask() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->navicsvusedidsmask(), output);
  }

  // @@protoc_insertion_point(serialize_end:PBGnssLocationSvUsedInPosition)
}

::google::protobuf::uint8* PBGnssLocationSvUsedInPosition::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBGnssLocationSvUsedInPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 gpsSvUsedIdsMask = 1;
  if (this->gpssvusedidsmask() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->gpssvusedidsmask(), target);
  }

  // uint64 gloSvUsedIdsMask = 2;
  if (this->glosvusedidsmask() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->glosvusedidsmask(), target);
  }

  // uint64 galSvUsedIdsMask = 3;
  if (this->galsvusedidsmask() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->galsvusedidsmask(), target);
  }

  // uint64 bdsSvUsedIdsMask = 4;
  if (this->bdssvusedidsmask() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->bdssvusedidsmask(), target);
  }

  // uint64 qzssSvUsedIdsMask = 5;
  if (this->qzsssvusedidsmask() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->qzsssvusedidsmask(), target);
  }

  // uint64 navicSvUsedIdsMask = 6;
  if (this->navicsvusedidsmask() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->navicsvusedidsmask(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PBGnssLocationSvUsedInPosition)
  return target;
}

size_t PBGnssLocationSvUsedInPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBGnssLocationSvUsedInPosition)
  size_t total_size = 0;

  // uint64 gpsSvUsedIdsMask = 1;
  if (this->gpssvusedidsmask() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->gpssvusedidsmask());
  }

  // uint64 gloSvUsedIdsMask = 2;
  if (this->glosvusedidsmask() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->glosvusedidsmask());
  }

  // uint64 galSvUsedIdsMask = 3;
  if (this->galsvusedidsmask() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->galsvusedidsmask());
  }

  // uint64 bdsSvUsedIdsMask = 4;
  if (this->bdssvusedidsmask() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->bdssvusedidsmask());
  }

  // uint64 qzssSvUsedIdsMask = 5;
  if (this->qzsssvusedidsmask() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->qzsssvusedidsmask());
  }

  // uint64 navicSvUsedIdsMask = 6;
  if (this->navicsvusedidsmask() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->navicsvusedidsmask());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBGnssLocationSvUsedInPosition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PBGnssLocationSvUsedInPosition)
  GOOGLE_DCHECK_NE(&from, this);
  const PBGnssLocationSvUsedInPosition* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PBGnssLocationSvUsedInPosition>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PBGnssLocationSvUsedInPosition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PBGnssLocationSvUsedInPosition)
    MergeFrom(*source);
  }
}

void PBGnssLocationSvUsedInPosition::MergeFrom(const PBGnssLocationSvUsedInPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBGnssLocationSvUsedInPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gpssvusedidsmask() != 0) {
    set_gpssvusedidsmask(from.gpssvusedidsmask());
  }
  if (from.glosvusedidsmask() != 0) {
    set_glosvusedidsmask(from.glosvusedidsmask());
  }
  if (from.galsvusedidsmask() != 0) {
    set_galsvusedidsmask(from.galsvusedidsmask());
  }
  if (from.bdssvusedidsmask() != 0) {
    set_bdssvusedidsmask(from.bdssvusedidsmask());
  }
  if (from.qzsssvusedidsmask() != 0) {
    set_qzsssvusedidsmask(from.qzsssvusedidsmask());
  }
  if (from.navicsvusedidsmask() != 0) {
    set_navicsvusedidsmask(from.navicsvusedidsmask());
  }
}

void PBGnssLocationSvUsedInPosition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PBGnssLocationSvUsedInPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBGnssLocationSvUsedInPosition::CopyFrom(const PBGnssLocationSvUsedInPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBGnssLocationSvUsedInPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBGnssLocationSvUsedInPosition::IsInitialized() const {
  return true;
}

void PBGnssLocationSvUsedInPosition::Swap(PBGnssLocationSvUsedInPosition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBGnssLocationSvUsedInPosition::InternalSwap(PBGnssLocationSvUsedInPosition* other) {
  std::swap(gpssvusedidsmask_, other->gpssvusedidsmask_);
  std::swap(glosvusedidsmask_, other->glosvusedidsmask_);
  std::swap(galsvusedidsmask_, other->galsvusedidsmask_);
  std::swap(bdssvusedidsmask_, other->bdssvusedidsmask_);
  std::swap(qzsssvusedidsmask_, other->qzsssvusedidsmask_);
  std::swap(navicsvusedidsmask_, other->navicsvusedidsmask_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PBGnssLocationSvUsedInPosition::GetMetadata() const {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PBGnssLocationSvUsedInPosition

// uint64 gpsSvUsedIdsMask = 1;
void PBGnssLocationSvUsedInPosition::clear_gpssvusedidsmask() {
  gpssvusedidsmask_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 PBGnssLocationSvUsedInPosition::gpssvusedidsmask() const {
  // @@protoc_insertion_point(field_get:PBGnssLocationSvUsedInPosition.gpsSvUsedIdsMask)
  return gpssvusedidsmask_;
}
void PBGnssLocationSvUsedInPosition::set_gpssvusedidsmask(::google::protobuf::uint64 value) {

  gpssvusedidsmask_ = value;
  // @@protoc_insertion_point(field_set:PBGnssLocationSvUsedInPosition.gpsSvUsedIdsMask)
}

// uint64 gloSvUsedIdsMask = 2;
void PBGnssLocationSvUsedInPosition::clear_glosvusedidsmask() {
  glosvusedidsmask_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 PBGnssLocationSvUsedInPosition::glosvusedidsmask() const {
  // @@protoc_insertion_point(field_get:PBGnssLocationSvUsedInPosition.gloSvUsedIdsMask)
  return glosvusedidsmask_;
}
void PBGnssLocationSvUsedInPosition::set_glosvusedidsmask(::google::protobuf::uint64 value) {

  glosvusedidsmask_ = value;
  // @@protoc_insertion_point(field_set:PBGnssLocationSvUsedInPosition.gloSvUsedIdsMask)
}

// uint64 galSvUsedIdsMask = 3;
void PBGnssLocationSvUsedInPosition::clear_galsvusedidsmask() {
  galsvusedidsmask_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 PBGnssLocationSvUsedInPosition::galsvusedidsmask() const {
  // @@protoc_insertion_point(field_get:PBGnssLocationSvUsedInPosition.galSvUsedIdsMask)
  return galsvusedidsmask_;
}
void PBGnssLocationSvUsedInPosition::set_galsvusedidsmask(::google::protobuf::uint64 value) {

  galsvusedidsmask_ = value;
  // @@protoc_insertion_point(field_set:PBGnssLocationSvUsedInPosition.galSvUsedIdsMask)
}

// uint64 bdsSvUsedIdsMask = 4;
void PBGnssLocationSvUsedInPosition::clear_bdssvusedidsmask() {
  bdssvusedidsmask_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 PBGnssLocationSvUsedInPosition::bdssvusedidsmask() const {
  // @@protoc_insertion_point(field_get:PBGnssLocationSvUsedInPosition.bdsSvUsedIdsMask)
  return bdssvusedidsmask_;
}
void PBGnssLocationSvUsedInPosition::set_bdssvusedidsmask(::google::protobuf::uint64 value) {

  bdssvusedidsmask_ = value;
  // @@protoc_insertion_point(field_set:PBGnssLocationSvUsedInPosition.bdsSvUsedIdsMask)
}

// uint64 qzssSvUsedIdsMask = 5;
void PBGnssLocationSvUsedInPosition::clear_qzsssvusedidsmask() {
  qzsssvusedidsmask_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 PBGnssLocationSvUsedInPosition::qzsssvusedidsmask() const {
  // @@protoc_insertion_point(field_get:PBGnssLocationSvUsedInPosition.qzssSvUsedIdsMask)
  return qzsssvusedidsmask_;
}
void PBGnssLocationSvUsedInPosition::set_qzsssvusedidsmask(::google::protobuf::uint64 value) {

  qzsssvusedidsmask_ = value;
  // @@protoc_insertion_point(field_set:PBGnssLocationSvUsedInPosition.qzssSvUsedIdsMask)
}

// uint64 navicSvUsedIdsMask = 6;
void PBGnssLocationSvUsedInPosition::clear_navicsvusedidsmask() {
  navicsvusedidsmask_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 PBGnssLocationSvUsedInPosition::navicsvusedidsmask() const {
  // @@protoc_insertion_point(field_get:PBGnssLocationSvUsedInPosition.navicSvUsedIdsMask)
  return navicsvusedidsmask_;
}
void PBGnssLocationSvUsedInPosition::set_navicsvusedidsmask(::google::protobuf::uint64 value) {

  navicsvusedidsmask_ = value;
  // @@protoc_insertion_point(field_set:PBGnssLocationSvUsedInPosition.navicSvUsedIdsMask)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PBGnssMeasUsageInfo::kGnssConstellationFieldNumber;
const int PBGnssMeasUsageInfo::kGnssSvIdFieldNumber;
const int PBGnssMeasUsageInfo::kGnssSignalTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PBGnssMeasUsageInfo::PBGnssMeasUsageInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_LocationApiDataTypes_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBGnssMeasUsageInfo)
}
PBGnssMeasUsageInfo::PBGnssMeasUsageInfo(const PBGnssMeasUsageInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&gnssconstellation_, &from.gnssconstellation_,
    reinterpret_cast<char*>(&gnsssignaltype_) -
    reinterpret_cast<char*>(&gnssconstellation_) + sizeof(gnsssignaltype_));
  // @@protoc_insertion_point(copy_constructor:PBGnssMeasUsageInfo)
}

void PBGnssMeasUsageInfo::SharedCtor() {
  ::memset(&gnssconstellation_, 0, reinterpret_cast<char*>(&gnsssignaltype_) -
    reinterpret_cast<char*>(&gnssconstellation_) + sizeof(gnsssignaltype_));
  _cached_size_ = 0;
}

PBGnssMeasUsageInfo::~PBGnssMeasUsageInfo() {
  // @@protoc_insertion_point(destructor:PBGnssMeasUsageInfo)
  SharedDtor();
}

void PBGnssMeasUsageInfo::SharedDtor() {
}

void PBGnssMeasUsageInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBGnssMeasUsageInfo::descriptor() {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PBGnssMeasUsageInfo& PBGnssMeasUsageInfo::default_instance() {
  protobuf_LocationApiDataTypes_2eproto::InitDefaults();
  return *internal_default_instance();
}

PBGnssMeasUsageInfo* PBGnssMeasUsageInfo::New(::google::protobuf::Arena* arena) const {
  PBGnssMeasUsageInfo* n = new PBGnssMeasUsageInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBGnssMeasUsageInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PBGnssMeasUsageInfo)
  ::memset(&gnssconstellation_, 0, reinterpret_cast<char*>(&gnsssignaltype_) -
    reinterpret_cast<char*>(&gnssconstellation_) + sizeof(gnsssignaltype_));
}

bool PBGnssMeasUsageInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBGnssMeasUsageInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .PBLocApiGnss_LocSvSystemEnumType gnssConstellation = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_gnssconstellation(static_cast< ::PBLocApiGnss_LocSvSystemEnumType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 gnssSvId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gnsssvid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 gnssSignalType = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gnsssignaltype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBGnssMeasUsageInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBGnssMeasUsageInfo)
  return false;
#undef DO_
}

void PBGnssMeasUsageInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBGnssMeasUsageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .PBLocApiGnss_LocSvSystemEnumType gnssConstellation = 1;
  if (this->gnssconstellation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->gnssconstellation(), output);
  }

  // uint32 gnssSvId = 2;
  if (this->gnsssvid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gnsssvid(), output);
  }

  // uint32 gnssSignalType = 3;
  if (this->gnsssignaltype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gnsssignaltype(), output);
  }

  // @@protoc_insertion_point(serialize_end:PBGnssMeasUsageInfo)
}

::google::protobuf::uint8* PBGnssMeasUsageInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBGnssMeasUsageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .PBLocApiGnss_LocSvSystemEnumType gnssConstellation = 1;
  if (this->gnssconstellation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->gnssconstellation(), target);
  }

  // uint32 gnssSvId = 2;
  if (this->gnsssvid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gnsssvid(), target);
  }

  // uint32 gnssSignalType = 3;
  if (this->gnsssignaltype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gnsssignaltype(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PBGnssMeasUsageInfo)
  return target;
}

size_t PBGnssMeasUsageInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBGnssMeasUsageInfo)
  size_t total_size = 0;

  // .PBLocApiGnss_LocSvSystemEnumType gnssConstellation = 1;
  if (this->gnssconstellation() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->gnssconstellation());
  }

  // uint32 gnssSvId = 2;
  if (this->gnsssvid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gnsssvid());
  }

  // uint32 gnssSignalType = 3;
  if (this->gnsssignaltype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gnsssignaltype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBGnssMeasUsageInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PBGnssMeasUsageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PBGnssMeasUsageInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PBGnssMeasUsageInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PBGnssMeasUsageInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PBGnssMeasUsageInfo)
    MergeFrom(*source);
  }
}

void PBGnssMeasUsageInfo::MergeFrom(const PBGnssMeasUsageInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBGnssMeasUsageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gnssconstellation() != 0) {
    set_gnssconstellation(from.gnssconstellation());
  }
  if (from.gnsssvid() != 0) {
    set_gnsssvid(from.gnsssvid());
  }
  if (from.gnsssignaltype() != 0) {
    set_gnsssignaltype(from.gnsssignaltype());
  }
}

void PBGnssMeasUsageInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PBGnssMeasUsageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBGnssMeasUsageInfo::CopyFrom(const PBGnssMeasUsageInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBGnssMeasUsageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBGnssMeasUsageInfo::IsInitialized() const {
  return true;
}

void PBGnssMeasUsageInfo::Swap(PBGnssMeasUsageInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBGnssMeasUsageInfo::InternalSwap(PBGnssMeasUsageInfo* other) {
  std::swap(gnssconstellation_, other->gnssconstellation_);
  std::swap(gnsssvid_, other->gnsssvid_);
  std::swap(gnsssignaltype_, other->gnsssignaltype_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PBGnssMeasUsageInfo::GetMetadata() const {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PBGnssMeasUsageInfo

// .PBLocApiGnss_LocSvSystemEnumType gnssConstellation = 1;
void PBGnssMeasUsageInfo::clear_gnssconstellation() {
  gnssconstellation_ = 0;
}
::PBLocApiGnss_LocSvSystemEnumType PBGnssMeasUsageInfo::gnssconstellation() const {
  // @@protoc_insertion_point(field_get:PBGnssMeasUsageInfo.gnssConstellation)
  return static_cast< ::PBLocApiGnss_LocSvSystemEnumType >(gnssconstellation_);
}
void PBGnssMeasUsageInfo::set_gnssconstellation(::PBLocApiGnss_LocSvSystemEnumType value) {

  gnssconstellation_ = value;
  // @@protoc_insertion_point(field_set:PBGnssMeasUsageInfo.gnssConstellation)
}

// uint32 gnssSvId = 2;
void PBGnssMeasUsageInfo::clear_gnsssvid() {
  gnsssvid_ = 0u;
}
::google::protobuf::uint32 PBGnssMeasUsageInfo::gnsssvid() const {
  // @@protoc_insertion_point(field_get:PBGnssMeasUsageInfo.gnssSvId)
  return gnsssvid_;
}
void PBGnssMeasUsageInfo::set_gnsssvid(::google::protobuf::uint32 value) {

  gnsssvid_ = value;
  // @@protoc_insertion_point(field_set:PBGnssMeasUsageInfo.gnssSvId)
}

// uint32 gnssSignalType = 3;
void PBGnssMeasUsageInfo::clear_gnsssignaltype() {
  gnsssignaltype_ = 0u;
}
::google::protobuf::uint32 PBGnssMeasUsageInfo::gnsssignaltype() const {
  // @@protoc_insertion_point(field_get:PBGnssMeasUsageInfo.gnssSignalType)
  return gnsssignaltype_;
}
void PBGnssMeasUsageInfo::set_gnsssignaltype(::google::protobuf::uint32 value) {

  gnsssignaltype_ = value;
  // @@protoc_insertion_point(field_set:PBGnssMeasUsageInfo.gnssSignalType)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PBGnssLocationInfoNotification::kLocationFieldNumber;
const int PBGnssLocationInfoNotification::kFlagsFieldNumber;
const int PBGnssLocationInfoNotification::kAltitudeMeanSeaLevelFieldNumber;
const int PBGnssLocationInfoNotification::kPdopFieldNumber;
const int PBGnssLocationInfoNotification::kHdopFieldNumber;
const int PBGnssLocationInfoNotification::kVdopFieldNumber;
const int PBGnssLocationInfoNotification::kGdopFieldNumber;
const int PBGnssLocationInfoNotification::kTdopFieldNumber;
const int PBGnssLocationInfoNotification::kMagneticDeviationFieldNumber;
const int PBGnssLocationInfoNotification::kHorReliabilityFieldNumber;
const int PBGnssLocationInfoNotification::kVerReliabilityFieldNumber;
const int PBGnssLocationInfoNotification::kHorUncEllipseSemiMajorFieldNumber;
const int PBGnssLocationInfoNotification::kHorUncEllipseSemiMinorFieldNumber;
const int PBGnssLocationInfoNotification::kHorUncEllipseOrientAzimuthFieldNumber;
const int PBGnssLocationInfoNotification::kNorthStdDeviationFieldNumber;
const int PBGnssLocationInfoNotification::kEastStdDeviationFieldNumber;
const int PBGnssLocationInfoNotification::kNorthVelocityFieldNumber;
const int PBGnssLocationInfoNotification::kEastVelocityFieldNumber;
const int PBGnssLocationInfoNotification::kUpVelocityFieldNumber;
const int PBGnssLocationInfoNotification::kNorthVelocityStdDeviationFieldNumber;
const int PBGnssLocationInfoNotification::kEastVelocityStdDeviationFieldNumber;
const int PBGnssLocationInfoNotification::kUpVelocityStdDeviationFieldNumber;
const int PBGnssLocationInfoNotification::kNumSvUsedInPositionFieldNumber;
const int PBGnssLocationInfoNotification::kSvUsedInPositionFieldNumber;
const int PBGnssLocationInfoNotification::kNavSolutionMaskFieldNumber;
const int PBGnssLocationInfoNotification::kBodyFrameDataFieldNumber;
const int PBGnssLocationInfoNotification::kGnssSystemTimeFieldNumber;
const int PBGnssLocationInfoNotification::kNumOfMeasReceivedFieldNumber;
const int PBGnssLocationInfoNotification::kMeasUsageInfoFieldNumber;
const int PBGnssLocationInfoNotification::kLeapSecondsFieldNumber;
const int PBGnssLocationInfoNotification::kTimeUncMsFieldNumber;
const int PBGnssLocationInfoNotification::kCalibrationConfidenceFieldNumber;
const int PBGnssLocationInfoNotification::kCalibrationStatusFieldNumber;
const int PBGnssLocationInfoNotification::kLocOutputEngTypeFieldNumber;
const int PBGnssLocationInfoNotification::kLocOutputEngMaskFieldNumber;
const int PBGnssLocationInfoNotification::kConformityIndexFieldNumber;
const int PBGnssLocationInfoNotification::kLlaVRPBasedFieldNumber;
const int PBGnssLocationInfoNotification::kEnuVelocityVRPBasedFieldNumber;
const int PBGnssLocationInfoNotification::kDrSolutionStatusMaskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PBGnssLocationInfoNotification::PBGnssLocationInfoNotification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_LocationApiDataTypes_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBGnssLocationInfoNotification)
}
PBGnssLocationInfoNotification::PBGnssLocationInfoNotification(const PBGnssLocationInfoNotification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      measusageinfo_(from.measusageinfo_),
      enuvelocityvrpbased_(from.enuvelocityvrpbased_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location()) {
    location_ = new ::PBLocation(*from.location_);
  } else {
    location_ = NULL;
  }
  if (from.has_svusedinposition()) {
    svusedinposition_ = new ::PBGnssLocationSvUsedInPosition(*from.svusedinposition_);
  } else {
    svusedinposition_ = NULL;
  }
  if (from.has_bodyframedata()) {
    bodyframedata_ = new ::PBLocApiGnssLocationPositionDynamics(*from.bodyframedata_);
  } else {
    bodyframedata_ = NULL;
  }
  if (from.has_gnsssystemtime()) {
    gnsssystemtime_ = new ::PBLocApiGnssSystemTime(*from.gnsssystemtime_);
  } else {
    gnsssystemtime_ = NULL;
  }
  if (from.has_llavrpbased()) {
    llavrpbased_ = new ::PBLLAInfo(*from.llavrpbased_);
  } else {
    llavrpbased_ = NULL;
  }
  ::memcpy(&flags_, &from.flags_,
    reinterpret_cast<char*>(&drsolutionstatusmask_) -
    reinterpret_cast<char*>(&flags_) + sizeof(drsolutionstatusmask_));
  // @@protoc_insertion_point(copy_constructor:PBGnssLocationInfoNotification)
}

void PBGnssLocationInfoNotification::SharedCtor() {
  ::memset(&location_, 0, reinterpret_cast<char*>(&drsolutionstatusmask_) -
    reinterpret_cast<char*>(&location_) + sizeof(drsolutionstatusmask_));
  _cached_size_ = 0;
}

PBGnssLocationInfoNotification::~PBGnssLocationInfoNotification() {
  // @@protoc_insertion_point(destructor:PBGnssLocationInfoNotification)
  SharedDtor();
}

void PBGnssLocationInfoNotification::SharedDtor() {
  if (this != internal_default_instance()) {
    delete location_;
  }
  if (this != internal_default_instance()) {
    delete svusedinposition_;
  }
  if (this != internal_default_instance()) {
    delete bodyframedata_;
  }
  if (this != internal_default_instance()) {
    delete gnsssystemtime_;
  }
  if (this != internal_default_instance()) {
    delete llavrpbased_;
  }
}

void PBGnssLocationInfoNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBGnssLocationInfoNotification::descriptor() {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PBGnssLocationInfoNotification& PBGnssLocationInfoNotification::default_instance() {
  protobuf_LocationApiDataTypes_2eproto::InitDefaults();
  return *internal_default_instance();
}

PBGnssLocationInfoNotification* PBGnssLocationInfoNotification::New(::google::protobuf::Arena* arena) const {
  PBGnssLocationInfoNotification* n = new PBGnssLocationInfoNotification;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBGnssLocationInfoNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:PBGnssLocationInfoNotification)
  measusageinfo_.Clear();
  enuvelocityvrpbased_.Clear();
  if (GetArenaNoVirtual() == NULL && location_ != NULL) {
    delete location_;
  }
  location_ = NULL;
  if (GetArenaNoVirtual() == NULL && svusedinposition_ != NULL) {
    delete svusedinposition_;
  }
  svusedinposition_ = NULL;
  if (GetArenaNoVirtual() == NULL && bodyframedata_ != NULL) {
    delete bodyframedata_;
  }
  bodyframedata_ = NULL;
  if (GetArenaNoVirtual() == NULL && gnsssystemtime_ != NULL) {
    delete gnsssystemtime_;
  }
  gnsssystemtime_ = NULL;
  if (GetArenaNoVirtual() == NULL && llavrpbased_ != NULL) {
    delete llavrpbased_;
  }
  llavrpbased_ = NULL;
  ::memset(&flags_, 0, reinterpret_cast<char*>(&drsolutionstatusmask_) -
    reinterpret_cast<char*>(&flags_) + sizeof(drsolutionstatusmask_));
}

bool PBGnssLocationInfoNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBGnssLocationInfoNotification)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .PBLocation location = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 flags = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float altitudeMeanSeaLevel = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &altitudemeansealevel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float pdop = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pdop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float hdop = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hdop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float vdop = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vdop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float gdop = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gdop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float tdop = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tdop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float magneticDeviation = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &magneticdeviation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .PBLocationReliability horReliability = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_horreliability(static_cast< ::PBLocationReliability >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .PBLocationReliability verReliability = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_verreliability(static_cast< ::PBLocationReliability >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float horUncEllipseSemiMajor = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &horuncellipsesemimajor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float horUncEllipseSemiMinor = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &horuncellipsesemiminor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float horUncEllipseOrientAzimuth = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &horuncellipseorientazimuth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float northStdDeviation = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(125u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &northstddeviation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float eastStdDeviation = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(133u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &eaststddeviation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float northVelocity = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(141u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &northvelocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float eastVelocity = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(149u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &eastvelocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float upVelocity = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(157u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &upvelocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float northVelocityStdDeviation = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(165u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &northvelocitystddeviation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float eastVelocityStdDeviation = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(173u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &eastvelocitystddeviation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float upVelocityStdDeviation = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(181u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &upvelocitystddeviation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 numSvUsedInPosition = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numsvusedinposition_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .PBGnssLocationSvUsedInPosition svUsedInPosition = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svusedinposition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 navSolutionMask = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &navsolutionmask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .PBLocApiGnssLocationPositionDynamics bodyFrameData = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bodyframedata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .PBLocApiGnssSystemTime gnssSystemTime = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gnsssystemtime()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 numOfMeasReceived = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numofmeasreceived_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .PBGnssMeasUsageInfo measUsageInfo = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_measusageinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 leapSeconds = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leapseconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float timeUncMs = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(253u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &timeuncms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 calibrationConfidence = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(256u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &calibrationconfidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 calibrationStatus = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(264u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &calibrationstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .PBLocApiOutputEngineType locOutputEngType = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(272u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_locoutputengtype(static_cast< ::PBLocApiOutputEngineType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 locOutputEngMask = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(280u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &locoutputengmask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float conformityIndex = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(293u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &conformityindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .PBLLAInfo llaVRPBased = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(298u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_llavrpbased()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float enuVelocityVRPBased = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(306u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_enuvelocityvrpbased())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(309u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 306u, input, this->mutable_enuvelocityvrpbased())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 drSolutionStatusMask = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(312u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &drsolutionstatusmask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBGnssLocationInfoNotification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBGnssLocationInfoNotification)
  return false;
#undef DO_
}

void PBGnssLocationInfoNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBGnssLocationInfoNotification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .PBLocation location = 1;
  if (this->has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->location_, output);
  }

  // uint32 flags = 2;
  if (this->flags() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->flags(), output);
  }

  // float altitudeMeanSeaLevel = 3;
  if (this->altitudemeansealevel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->altitudemeansealevel(), output);
  }

  // float pdop = 4;
  if (this->pdop() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->pdop(), output);
  }

  // float hdop = 5;
  if (this->hdop() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->hdop(), output);
  }

  // float vdop = 6;
  if (this->vdop() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->vdop(), output);
  }

  // float gdop = 7;
  if (this->gdop() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->gdop(), output);
  }

  // float tdop = 8;
  if (this->tdop() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->tdop(), output);
  }

  // float magneticDeviation = 9;
  if (this->magneticdeviation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->magneticdeviation(), output);
  }

  // .PBLocationReliability horReliability = 10;
  if (this->horreliability() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->horreliability(), output);
  }

  // .PBLocationReliability verReliability = 11;
  if (this->verreliability() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->verreliability(), output);
  }

  // float horUncEllipseSemiMajor = 12;
  if (this->horuncellipsesemimajor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->horuncellipsesemimajor(), output);
  }

  // float horUncEllipseSemiMinor = 13;
  if (this->horuncellipsesemiminor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->horuncellipsesemiminor(), output);
  }

  // float horUncEllipseOrientAzimuth = 14;
  if (this->horuncellipseorientazimuth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->horuncellipseorientazimuth(), output);
  }

  // float northStdDeviation = 15;
  if (this->northstddeviation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->northstddeviation(), output);
  }

  // float eastStdDeviation = 16;
  if (this->eaststddeviation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->eaststddeviation(), output);
  }

  // float northVelocity = 17;
  if (this->northvelocity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->northvelocity(), output);
  }

  // float eastVelocity = 18;
  if (this->eastvelocity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->eastvelocity(), output);
  }

  // float upVelocity = 19;
  if (this->upvelocity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->upvelocity(), output);
  }

  // float northVelocityStdDeviation = 20;
  if (this->northvelocitystddeviation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->northvelocitystddeviation(), output);
  }

  // float eastVelocityStdDeviation = 21;
  if (this->eastvelocitystddeviation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->eastvelocitystddeviation(), output);
  }

  // float upVelocityStdDeviation = 22;
  if (this->upvelocitystddeviation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->upvelocitystddeviation(), output);
  }

  // uint32 numSvUsedInPosition = 23;
  if (this->numsvusedinposition() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->numsvusedinposition(), output);
  }

  // .PBGnssLocationSvUsedInPosition svUsedInPosition = 24;
  if (this->has_svusedinposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, *this->svusedinposition_, output);
  }

  // uint32 navSolutionMask = 25;
  if (this->navsolutionmask() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->navsolutionmask(), output);
  }

  // .PBLocApiGnssLocationPositionDynamics bodyFrameData = 26;
  if (this->has_bodyframedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, *this->bodyframedata_, output);
  }

  // .PBLocApiGnssSystemTime gnssSystemTime = 27;
  if (this->has_gnsssystemtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, *this->gnsssystemtime_, output);
  }

  // uint32 numOfMeasReceived = 28;
  if (this->numofmeasreceived() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->numofmeasreceived(), output);
  }

  // repeated .PBGnssMeasUsageInfo measUsageInfo = 29;
  for (unsigned int i = 0, n = this->measusageinfo_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, this->measusageinfo(i), output);
  }

  // uint32 leapSeconds = 30;
  if (this->leapseconds() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->leapseconds(), output);
  }

  // float timeUncMs = 31;
  if (this->timeuncms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(31, this->timeuncms(), output);
  }

  // uint32 calibrationConfidence = 32;
  if (this->calibrationconfidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->calibrationconfidence(), output);
  }

  // uint32 calibrationStatus = 33;
  if (this->calibrationstatus() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(33, this->calibrationstatus(), output);
  }

  // .PBLocApiOutputEngineType locOutputEngType = 34;
  if (this->locoutputengtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      34, this->locoutputengtype(), output);
  }

  // uint32 locOutputEngMask = 35;
  if (this->locoutputengmask() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(35, this->locoutputengmask(), output);
  }

  // float conformityIndex = 36;
  if (this->conformityindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(36, this->conformityindex(), output);
  }

  // .PBLLAInfo llaVRPBased = 37;
  if (this->has_llavrpbased()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      37, *this->llavrpbased_, output);
  }

  // repeated float enuVelocityVRPBased = 38;
  if (this->enuvelocityvrpbased_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(38, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_enuvelocityvrpbased_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->enuvelocityvrpbased().data(), this->enuvelocityvrpbased_size(), output);
  }

  // uint32 drSolutionStatusMask = 39;
  if (this->drsolutionstatusmask() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(39, this->drsolutionstatusmask(), output);
  }

  // @@protoc_insertion_point(serialize_end:PBGnssLocationInfoNotification)
}

::google::protobuf::uint8* PBGnssLocationInfoNotification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBGnssLocationInfoNotification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .PBLocation location = 1;
  if (this->has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->location_, deterministic, target);
  }

  // uint32 flags = 2;
  if (this->flags() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->flags(), target);
  }

  // float altitudeMeanSeaLevel = 3;
  if (this->altitudemeansealevel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->altitudemeansealevel(), target);
  }

  // float pdop = 4;
  if (this->pdop() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->pdop(), target);
  }

  // float hdop = 5;
  if (this->hdop() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->hdop(), target);
  }

  // float vdop = 6;
  if (this->vdop() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->vdop(), target);
  }

  // float gdop = 7;
  if (this->gdop() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->gdop(), target);
  }

  // float tdop = 8;
  if (this->tdop() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->tdop(), target);
  }

  // float magneticDeviation = 9;
  if (this->magneticdeviation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->magneticdeviation(), target);
  }

  // .PBLocationReliability horReliability = 10;
  if (this->horreliability() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->horreliability(), target);
  }

  // .PBLocationReliability verReliability = 11;
  if (this->verreliability() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->verreliability(), target);
  }

  // float horUncEllipseSemiMajor = 12;
  if (this->horuncellipsesemimajor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->horuncellipsesemimajor(), target);
  }

  // float horUncEllipseSemiMinor = 13;
  if (this->horuncellipsesemiminor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->horuncellipsesemiminor(), target);
  }

  // float horUncEllipseOrientAzimuth = 14;
  if (this->horuncellipseorientazimuth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->horuncellipseorientazimuth(), target);
  }

  // float northStdDeviation = 15;
  if (this->northstddeviation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->northstddeviation(), target);
  }

  // float eastStdDeviation = 16;
  if (this->eaststddeviation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->eaststddeviation(), target);
  }

  // float northVelocity = 17;
  if (this->northvelocity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->northvelocity(), target);
  }

  // float eastVelocity = 18;
  if (this->eastvelocity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->eastvelocity(), target);
  }

  // float upVelocity = 19;
  if (this->upvelocity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->upvelocity(), target);
  }

  // float northVelocityStdDeviation = 20;
  if (this->northvelocitystddeviation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(20, this->northvelocitystddeviation(), target);
  }

  // float eastVelocityStdDeviation = 21;
  if (this->eastvelocitystddeviation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(21, this->eastvelocitystddeviation(), target);
  }

  // float upVelocityStdDeviation = 22;
  if (this->upvelocitystddeviation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(22, this->upvelocitystddeviation(), target);
  }

  // uint32 numSvUsedInPosition = 23;
  if (this->numsvusedinposition() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->numsvusedinposition(), target);
  }

  // .PBGnssLocationSvUsedInPosition svUsedInPosition = 24;
  if (this->has_svusedinposition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        24, *this->svusedinposition_, deterministic, target);
  }

  // uint32 navSolutionMask = 25;
  if (this->navsolutionmask() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->navsolutionmask(), target);
  }

  // .PBLocApiGnssLocationPositionDynamics bodyFrameData = 26;
  if (this->has_bodyframedata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        26, *this->bodyframedata_, deterministic, target);
  }

  // .PBLocApiGnssSystemTime gnssSystemTime = 27;
  if (this->has_gnsssystemtime()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        27, *this->gnsssystemtime_, deterministic, target);
  }

  // uint32 numOfMeasReceived = 28;
  if (this->numofmeasreceived() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->numofmeasreceived(), target);
  }

  // repeated .PBGnssMeasUsageInfo measUsageInfo = 29;
  for (unsigned int i = 0, n = this->measusageinfo_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        29, this->measusageinfo(i), deterministic, target);
  }

  // uint32 leapSeconds = 30;
  if (this->leapseconds() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->leapseconds(), target);
  }

  // float timeUncMs = 31;
  if (this->timeuncms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(31, this->timeuncms(), target);
  }

  // uint32 calibrationConfidence = 32;
  if (this->calibrationconfidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(32, this->calibrationconfidence(), target);
  }

  // uint32 calibrationStatus = 33;
  if (this->calibrationstatus() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(33, this->calibrationstatus(), target);
  }

  // .PBLocApiOutputEngineType locOutputEngType = 34;
  if (this->locoutputengtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      34, this->locoutputengtype(), target);
  }

  // uint32 locOutputEngMask = 35;
  if (this->locoutputengmask() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(35, this->locoutputengmask(), target);
  }

  // float conformityIndex = 36;
  if (this->conformityindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(36, this->conformityindex(), target);
  }

  // .PBLLAInfo llaVRPBased = 37;
  if (this->has_llavrpbased()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        37, *this->llavrpbased_, deterministic, target);
  }

  // repeated float enuVelocityVRPBased = 38;
  if (this->enuvelocityvrpbased_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      38,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _enuvelocityvrpbased_cached_byte_size_, target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->enuvelocityvrpbased_, target);
  }

  // uint32 drSolutionStatusMask = 39;
  if (this->drsolutionstatusmask() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(39, this->drsolutionstatusmask(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PBGnssLocationInfoNotification)
  return target;
}

size_t PBGnssLocationInfoNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBGnssLocationInfoNotification)
  size_t total_size = 0;

  // repeated .PBGnssMeasUsageInfo measUsageInfo = 29;
  {
    unsigned int count = this->measusageinfo_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->measusageinfo(i));
    }
  }

  // repeated float enuVelocityVRPBased = 38;
  {
    unsigned int count = this->enuvelocityvrpbased_size();
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _enuvelocityvrpbased_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .PBLocation location = 1;
  if (this->has_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->location_);
  }

  // .PBGnssLocationSvUsedInPosition svUsedInPosition = 24;
  if (this->has_svusedinposition()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->svusedinposition_);
  }

  // .PBLocApiGnssLocationPositionDynamics bodyFrameData = 26;
  if (this->has_bodyframedata()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->bodyframedata_);
  }

  // .PBLocApiGnssSystemTime gnssSystemTime = 27;
  if (this->has_gnsssystemtime()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->gnsssystemtime_);
  }

  // .PBLLAInfo llaVRPBased = 37;
  if (this->has_llavrpbased()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->llavrpbased_);
  }

  // uint32 flags = 2;
  if (this->flags() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->flags());
  }

  // float altitudeMeanSeaLevel = 3;
  if (this->altitudemeansealevel() != 0) {
    total_size += 1 + 4;
  }

  // float pdop = 4;
  if (this->pdop() != 0) {
    total_size += 1 + 4;
  }

  // float hdop = 5;
  if (this->hdop() != 0) {
    total_size += 1 + 4;
  }

  // float vdop = 6;
  if (this->vdop() != 0) {
    total_size += 1 + 4;
  }

  // float gdop = 7;
  if (this->gdop() != 0) {
    total_size += 1 + 4;
  }

  // float tdop = 8;
  if (this->tdop() != 0) {
    total_size += 1 + 4;
  }

  // float magneticDeviation = 9;
  if (this->magneticdeviation() != 0) {
    total_size += 1 + 4;
  }

  // .PBLocationReliability horReliability = 10;
  if (this->horreliability() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->horreliability());
  }

  // .PBLocationReliability verReliability = 11;
  if (this->verreliability() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->verreliability());
  }

  // float horUncEllipseSemiMajor = 12;
  if (this->horuncellipsesemimajor() != 0) {
    total_size += 1 + 4;
  }

  // float horUncEllipseSemiMinor = 13;
  if (this->horuncellipsesemiminor() != 0) {
    total_size += 1 + 4;
  }

  // float horUncEllipseOrientAzimuth = 14;
  if (this->horuncellipseorientazimuth() != 0) {
    total_size += 1 + 4;
  }

  // float northStdDeviation = 15;
  if (this->northstddeviation() != 0) {
    total_size += 1 + 4;
  }

  // float eastStdDeviation = 16;
  if (this->eaststddeviation() != 0) {
    total_size += 2 + 4;
  }

  // float northVelocity = 17;
  if (this->northvelocity() != 0) {
    total_size += 2 + 4;
  }

  // float eastVelocity = 18;
  if (this->eastvelocity() != 0) {
    total_size += 2 + 4;
  }

  // float upVelocity = 19;
  if (this->upvelocity() != 0) {
    total_size += 2 + 4;
  }

  // float northVelocityStdDeviation = 20;
  if (this->northvelocitystddeviation() != 0) {
    total_size += 2 + 4;
  }

  // float eastVelocityStdDeviation = 21;
  if (this->eastvelocitystddeviation() != 0) {
    total_size += 2 + 4;
  }

  // float upVelocityStdDeviation = 22;
  if (this->upvelocitystddeviation() != 0) {
    total_size += 2 + 4;
  }

  // uint32 numSvUsedInPosition = 23;
  if (this->numsvusedinposition() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->numsvusedinposition());
  }

  // uint32 navSolutionMask = 25;
  if (this->navsolutionmask() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->navsolutionmask());
  }

  // uint32 numOfMeasReceived = 28;
  if (this->numofmeasreceived() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->numofmeasreceived());
  }

  // uint32 leapSeconds = 30;
  if (this->leapseconds() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->leapseconds());
  }

  // float timeUncMs = 31;
  if (this->timeuncms() != 0) {
    total_size += 2 + 4;
  }

  // uint32 calibrationConfidence = 32;
  if (this->calibrationconfidence() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->calibrationconfidence());
  }

  // uint32 calibrationStatus = 33;
  if (this->calibrationstatus() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->calibrationstatus());
  }

  // .PBLocApiOutputEngineType locOutputEngType = 34;
  if (this->locoutputengtype() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->locoutputengtype());
  }

  // uint32 locOutputEngMask = 35;
  if (this->locoutputengmask() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->locoutputengmask());
  }

  // float conformityIndex = 36;
  if (this->conformityindex() != 0) {
    total_size += 2 + 4;
  }

  // uint32 drSolutionStatusMask = 39;
  if (this->drsolutionstatusmask() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->drsolutionstatusmask());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBGnssLocationInfoNotification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PBGnssLocationInfoNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const PBGnssLocationInfoNotification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PBGnssLocationInfoNotification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PBGnssLocationInfoNotification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PBGnssLocationInfoNotification)
    MergeFrom(*source);
  }
}

void PBGnssLocationInfoNotification::MergeFrom(const PBGnssLocationInfoNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBGnssLocationInfoNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  measusageinfo_.MergeFrom(from.measusageinfo_);
  enuvelocityvrpbased_.MergeFrom(from.enuvelocityvrpbased_);
  if (from.has_location()) {
    mutable_location()->::PBLocation::MergeFrom(from.location());
  }
  if (from.has_svusedinposition()) {
    mutable_svusedinposition()->::PBGnssLocationSvUsedInPosition::MergeFrom(from.svusedinposition());
  }
  if (from.has_bodyframedata()) {
    mutable_bodyframedata()->::PBLocApiGnssLocationPositionDynamics::MergeFrom(from.bodyframedata());
  }
  if (from.has_gnsssystemtime()) {
    mutable_gnsssystemtime()->::PBLocApiGnssSystemTime::MergeFrom(from.gnsssystemtime());
  }
  if (from.has_llavrpbased()) {
    mutable_llavrpbased()->::PBLLAInfo::MergeFrom(from.llavrpbased());
  }
  if (from.flags() != 0) {
    set_flags(from.flags());
  }
  if (from.altitudemeansealevel() != 0) {
    set_altitudemeansealevel(from.altitudemeansealevel());
  }
  if (from.pdop() != 0) {
    set_pdop(from.pdop());
  }
  if (from.hdop() != 0) {
    set_hdop(from.hdop());
  }
  if (from.vdop() != 0) {
    set_vdop(from.vdop());
  }
  if (from.gdop() != 0) {
    set_gdop(from.gdop());
  }
  if (from.tdop() != 0) {
    set_tdop(from.tdop());
  }
  if (from.magneticdeviation() != 0) {
    set_magneticdeviation(from.magneticdeviation());
  }
  if (from.horreliability() != 0) {
    set_horreliability(from.horreliability());
  }
  if (from.verreliability() != 0) {
    set_verreliability(from.verreliability());
  }
  if (from.horuncellipsesemimajor() != 0) {
    set_horuncellipsesemimajor(from.horuncellipsesemimajor());
  }
  if (from.horuncellipsesemiminor() != 0) {
    set_horuncellipsesemiminor(from.horuncellipsesemiminor());
  }
  if (from.horuncellipseorientazimuth() != 0) {
    set_horuncellipseorientazimuth(from.horuncellipseorientazimuth());
  }
  if (from.northstddeviation() != 0) {
    set_northstddeviation(from.northstddeviation());
  }
  if (from.eaststddeviation() != 0) {
    set_eaststddeviation(from.eaststddeviation());
  }
  if (from.northvelocity() != 0) {
    set_northvelocity(from.northvelocity());
  }
  if (from.eastvelocity() != 0) {
    set_eastvelocity(from.eastvelocity());
  }
  if (from.upvelocity() != 0) {
    set_upvelocity(from.upvelocity());
  }
  if (from.northvelocitystddeviation() != 0) {
    set_northvelocitystddeviation(from.northvelocitystddeviation());
  }
  if (from.eastvelocitystddeviation() != 0) {
    set_eastvelocitystddeviation(from.eastvelocitystddeviation());
  }
  if (from.upvelocitystddeviation() != 0) {
    set_upvelocitystddeviation(from.upvelocitystddeviation());
  }
  if (from.numsvusedinposition() != 0) {
    set_numsvusedinposition(from.numsvusedinposition());
  }
  if (from.navsolutionmask() != 0) {
    set_navsolutionmask(from.navsolutionmask());
  }
  if (from.numofmeasreceived() != 0) {
    set_numofmeasreceived(from.numofmeasreceived());
  }
  if (from.leapseconds() != 0) {
    set_leapseconds(from.leapseconds());
  }
  if (from.timeuncms() != 0) {
    set_timeuncms(from.timeuncms());
  }
  if (from.calibrationconfidence() != 0) {
    set_calibrationconfidence(from.calibrationconfidence());
  }
  if (from.calibrationstatus() != 0) {
    set_calibrationstatus(from.calibrationstatus());
  }
  if (from.locoutputengtype() != 0) {
    set_locoutputengtype(from.locoutputengtype());
  }
  if (from.locoutputengmask() != 0) {
    set_locoutputengmask(from.locoutputengmask());
  }
  if (from.conformityindex() != 0) {
    set_conformityindex(from.conformityindex());
  }
  if (from.drsolutionstatusmask() != 0) {
    set_drsolutionstatusmask(from.drsolutionstatusmask());
  }
}

void PBGnssLocationInfoNotification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PBGnssLocationInfoNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBGnssLocationInfoNotification::CopyFrom(const PBGnssLocationInfoNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBGnssLocationInfoNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBGnssLocationInfoNotification::IsInitialized() const {
  return true;
}

void PBGnssLocationInfoNotification::Swap(PBGnssLocationInfoNotification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBGnssLocationInfoNotification::InternalSwap(PBGnssLocationInfoNotification* other) {
  measusageinfo_.InternalSwap(&other->measusageinfo_);
  enuvelocityvrpbased_.InternalSwap(&other->enuvelocityvrpbased_);
  std::swap(location_, other->location_);
  std::swap(svusedinposition_, other->svusedinposition_);
  std::swap(bodyframedata_, other->bodyframedata_);
  std::swap(gnsssystemtime_, other->gnsssystemtime_);
  std::swap(llavrpbased_, other->llavrpbased_);
  std::swap(flags_, other->flags_);
  std::swap(altitudemeansealevel_, other->altitudemeansealevel_);
  std::swap(pdop_, other->pdop_);
  std::swap(hdop_, other->hdop_);
  std::swap(vdop_, other->vdop_);
  std::swap(gdop_, other->gdop_);
  std::swap(tdop_, other->tdop_);
  std::swap(magneticdeviation_, other->magneticdeviation_);
  std::swap(horreliability_, other->horreliability_);
  std::swap(verreliability_, other->verreliability_);
  std::swap(horuncellipsesemimajor_, other->horuncellipsesemimajor_);
  std::swap(horuncellipsesemiminor_, other->horuncellipsesemiminor_);
  std::swap(horuncellipseorientazimuth_, other->horuncellipseorientazimuth_);
  std::swap(northstddeviation_, other->northstddeviation_);
  std::swap(eaststddeviation_, other->eaststddeviation_);
  std::swap(northvelocity_, other->northvelocity_);
  std::swap(eastvelocity_, other->eastvelocity_);
  std::swap(upvelocity_, other->upvelocity_);
  std::swap(northvelocitystddeviation_, other->northvelocitystddeviation_);
  std::swap(eastvelocitystddeviation_, other->eastvelocitystddeviation_);
  std::swap(upvelocitystddeviation_, other->upvelocitystddeviation_);
  std::swap(numsvusedinposition_, other->numsvusedinposition_);
  std::swap(navsolutionmask_, other->navsolutionmask_);
  std::swap(numofmeasreceived_, other->numofmeasreceived_);
  std::swap(leapseconds_, other->leapseconds_);
  std::swap(timeuncms_, other->timeuncms_);
  std::swap(calibrationconfidence_, other->calibrationconfidence_);
  std::swap(calibrationstatus_, other->calibrationstatus_);
  std::swap(locoutputengtype_, other->locoutputengtype_);
  std::swap(locoutputengmask_, other->locoutputengmask_);
  std::swap(conformityindex_, other->conformityindex_);
  std::swap(drsolutionstatusmask_, other->drsolutionstatusmask_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PBGnssLocationInfoNotification::GetMetadata() const {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PBGnssLocationInfoNotification

// .PBLocation location = 1;
bool PBGnssLocationInfoNotification::has_location() const {
  return this != internal_default_instance() && location_ != NULL;
}
void PBGnssLocationInfoNotification::clear_location() {
  if (GetArenaNoVirtual() == NULL && location_ != NULL) delete location_;
  location_ = NULL;
}
const ::PBLocation& PBGnssLocationInfoNotification::location() const {
  // @@protoc_insertion_point(field_get:PBGnssLocationInfoNotification.location)
  return location_ != NULL ? *location_
                         : *::PBLocation::internal_default_instance();
}
::PBLocation* PBGnssLocationInfoNotification::mutable_location() {

  if (location_ == NULL) {
    location_ = new ::PBLocation;
  }
  // @@protoc_insertion_point(field_mutable:PBGnssLocationInfoNotification.location)
  return location_;
}
::PBLocation* PBGnssLocationInfoNotification::release_location() {
  // @@protoc_insertion_point(field_release:PBGnssLocationInfoNotification.location)

  ::PBLocation* temp = location_;
  location_ = NULL;
  return temp;
}
void PBGnssLocationInfoNotification::set_allocated_location(::PBLocation* location) {
  delete location_;
  location_ = location;
  if (location) {

  } else {

  }
  // @@protoc_insertion_point(field_set_allocated:PBGnssLocationInfoNotification.location)
}

// uint32 flags = 2;
void PBGnssLocationInfoNotification::clear_flags() {
  flags_ = 0u;
}
::google::protobuf::uint32 PBGnssLocationInfoNotification::flags() const {
  // @@protoc_insertion_point(field_get:PBGnssLocationInfoNotification.flags)
  return flags_;
}
void PBGnssLocationInfoNotification::set_flags(::google::protobuf::uint32 value) {

  flags_ = value;
  // @@protoc_insertion_point(field_set:PBGnssLocationInfoNotification.flags)
}

// float altitudeMeanSeaLevel = 3;
void PBGnssLocationInfoNotification::clear_altitudemeansealevel() {
  altitudemeansealevel_ = 0;
}
float PBGnssLocationInfoNotification::altitudemeansealevel() const {
  // @@protoc_insertion_point(field_get:PBGnssLocationInfoNotification.altitudeMeanSeaLevel)
  return altitudemeansealevel_;
}
void PBGnssLocationInfoNotification::set_altitudemeansealevel(float value) {

  altitudemeansealevel_ = value;
  // @@protoc_insertion_point(field_set:PBGnssLocationInfoNotification.altitudeMeanSeaLevel)
}

// float pdop = 4;
void PBGnssLocationInfoNotification::clear_pdop() {
  pdop_ = 0;
}
float PBGnssLocationInfoNotification::pdop() const {
  // @@protoc_insertion_point(field_get:PBGnssLocationInfoNotification.pdop)
  return pdop_;
}
void PBGnssLocationInfoNotification::set_pdop(float value) {

  pdop_ = value;
  // @@protoc_insertion_point(field_set:PBGnssLocationInfoNotification.pdop)
}

// float hdop = 5;
void PBGnssLocationInfoNotification::clear_hdop() {
  hdop_ = 0;
}
float PBGnssLocationInfoNotification::hdop() const {
  // @@protoc_insertion_point(field_get:PBGnssLocationInfoNotification.hdop)
  return hdop_;
}
void PBGnssLocationInfoNotification::set_hdop(float value) {

  hdop_ = value;
  // @@protoc_insertion_point(field_set:PBGnssLocationInfoNotification.hdop)
}

// float vdop = 6;
void PBGnssLocationInfoNotification::clear_vdop() {
  vdop_ = 0;
}
float PBGnssLocationInfoNotification::vdop() const {
  // @@protoc_insertion_point(field_get:PBGnssLocationInfoNotification.vdop)
  return vdop_;
}
void PBGnssLocationInfoNotification::set_vdop(float value) {

  vdop_ = value;
  // @@protoc_insertion_point(field_set:PBGnssLocationInfoNotification.vdop)
}

// float gdop = 7;
void PBGnssLocationInfoNotification::clear_gdop() {
  gdop_ = 0;
}
float PBGnssLocationInfoNotification::gdop() const {
  // @@protoc_insertion_point(field_get:PBGnssLocationInfoNotification.gdop)
  return gdop_;
}
void PBGnssLocationInfoNotification::set_gdop(float value) {

  gdop_ = value;
  // @@protoc_insertion_point(field_set:PBGnssLocationInfoNotification.gdop)
}

// float tdop = 8;
void PBGnssLocationInfoNotification::clear_tdop() {
  tdop_ = 0;
}
float PBGnssLocationInfoNotification::tdop() const {
  // @@protoc_insertion_point(field_get:PBGnssLocationInfoNotification.tdop)
  return tdop_;
}
void PBGnssLocationInfoNotification::set_tdop(float value) {

  tdop_ = value;
  // @@protoc_insertion_point(field_set:PBGnssLocationInfoNotification.tdop)
}

// float magneticDeviation = 9;
void PBGnssLocationInfoNotification::clear_magneticdeviation() {
  magneticdeviation_ = 0;
}
float PBGnssLocationInfoNotification::magneticdeviation() const {
  // @@protoc_insertion_point(field_get:PBGnssLocationInfoNotification.magneticDeviation)
  return magneticdeviation_;
}
void PBGnssLocationInfoNotification::set_magneticdeviation(float value) {

  magneticdeviation_ = value;
  // @@protoc_insertion_point(field_set:PBGnssLocationInfoNotification.magneticDeviation)
}

// .PBLocationReliability horReliability = 10;
void PBGnssLocationInfoNotification::clear_horreliability() {
  horreliability_ = 0;
}
::PBLocationReliability PBGnssLocationInfoNotification::horreliability() const {
  // @@protoc_insertion_point(field_get:PBGnssLocationInfoNotification.horReliability)
  return static_cast< ::PBLocationReliability >(horreliability_);
}
void PBGnssLocationInfoNotification::set_horreliability(::PBLocationReliability value) {

  horreliability_ = value;
  // @@protoc_insertion_point(field_set:PBGnssLocationInfoNotification.horReliability)
}

// .PBLocationReliability verReliability = 11;
void PBGnssLocationInfoNotification::clear_verreliability() {
  verreliability_ = 0;
}
::PBLocationReliability PBGnssLocationInfoNotification::verreliability() const {
  // @@protoc_insertion_point(field_get:PBGnssLocationInfoNotification.verReliability)
  return static_cast< ::PBLocationReliability >(verreliability_);
}
void PBGnssLocationInfoNotification::set_verreliability(::PBLocationReliability value) {

  verreliability_ = value;
  // @@protoc_insertion_point(field_set:PBGnssLocationInfoNotification.verReliability)
}

// float horUncEllipseSemiMajor = 12;
void PBGnssLocationInfoNotification::clear_horuncellipsesemimajor() {
  horuncellipsesemimajor_ = 0;
}
float PBGnssLocationInfoNotification::horuncellipsesemimajor() const {
  // @@protoc_insertion_point(field_get:PBGnssLocationInfoNotification.horUncEllipseSemiMajor)
  return horuncellipsesemimajor_;
}
void PBGnssLocationInfoNotification::set_horuncellipsesemimajor(float value) {

  horuncellipsesemimajor_ = value;
  // @@protoc_insertion_point(field_set:PBGnssLocationInfoNotification.horUncEllipseSemiMajor)
}

// float horUncEllipseSemiMinor = 13;
void PBGnssLocationInfoNotification::clear_horuncellipsesemiminor() {
  horuncellipsesemiminor_ = 0;
}
float PBGnssLocationInfoNotification::horuncellipsesemiminor() const {
  // @@protoc_insertion_point(field_get:PBGnssLocationInfoNotification.horUncEllipseSemiMinor)
  return horuncellipsesemiminor_;
}
void PBGnssLocationInfoNotification::set_horuncellipsesemiminor(float value) {

  horuncellipsesemiminor_ = value;
  // @@protoc_insertion_point(field_set:PBGnssLocationInfoNotification.horUncEllipseSemiMinor)
}

// float horUncEllipseOrientAzimuth = 14;
void PBGnssLocationInfoNotification::clear_horuncellipseorientazimuth() {
  horuncellipseorientazimuth_ = 0;
}
float PBGnssLocationInfoNotification::horuncellipseorientazimuth() const {
  // @@protoc_insertion_point(field_get:PBGnssLocationInfoNotification.horUncEllipseOrientAzimuth)
  return horuncellipseorientazimuth_;
}
void PBGnssLocationInfoNotification::set_horuncellipseorientazimuth(float value) {

  horuncellipseorientazimuth_ = value;
  // @@protoc_insertion_point(field_set:PBGnssLocationInfoNotification.horUncEllipseOrientAzimuth)
}

// float northStdDeviation = 15;
void PBGnssLocationInfoNotification::clear_northstddeviation() {
  northstddeviation_ = 0;
}
float PBGnssLocationInfoNotification::northstddeviation() const {
  // @@protoc_insertion_point(field_get:PBGnssLocationInfoNotification.northStdDeviation)
  return northstddeviation_;
}
void PBGnssLocationInfoNotification::set_northstddeviation(float value) {

  northstddeviation_ = value;
  // @@protoc_insertion_point(field_set:PBGnssLocationInfoNotification.northStdDeviation)
}

// float eastStdDeviation = 16;
void PBGnssLocationInfoNotification::clear_eaststddeviation() {
  eaststddeviation_ = 0;
}
float PBGnssLocationInfoNotification::eaststddeviation() const {
  // @@protoc_insertion_point(field_get:PBGnssLocationInfoNotification.eastStdDeviation)
  return eaststddeviation_;
}
void PBGnssLocationInfoNotification::set_eaststddeviation(float value) {

  eaststddeviation_ = value;
  // @@protoc_insertion_point(field_set:PBGnssLocationInfoNotification.eastStdDeviation)
}

// float northVelocity = 17;
void PBGnssLocationInfoNotification::clear_northvelocity() {
  northvelocity_ = 0;
}
float PBGnssLocationInfoNotification::northvelocity() const {
  // @@protoc_insertion_point(field_get:PBGnssLocationInfoNotification.northVelocity)
  return northvelocity_;
}
void PBGnssLocationInfoNotification::set_northvelocity(float value) {

  northvelocity_ = value;
  // @@protoc_insertion_point(field_set:PBGnssLocationInfoNotification.northVelocity)
}

// float eastVelocity = 18;
void PBGnssLocationInfoNotification::clear_eastvelocity() {
  eastvelocity_ = 0;
}
float PBGnssLocationInfoNotification::eastvelocity() const {
  // @@protoc_insertion_point(field_get:PBGnssLocationInfoNotification.eastVelocity)
  return eastvelocity_;
}
void PBGnssLocationInfoNotification::set_eastvelocity(float value) {

  eastvelocity_ = value;
  // @@protoc_insertion_point(field_set:PBGnssLocationInfoNotification.eastVelocity)
}

// float upVelocity = 19;
void PBGnssLocationInfoNotification::clear_upvelocity() {
  upvelocity_ = 0;
}
float PBGnssLocationInfoNotification::upvelocity() const {
  // @@protoc_insertion_point(field_get:PBGnssLocationInfoNotification.upVelocity)
  return upvelocity_;
}
void PBGnssLocationInfoNotification::set_upvelocity(float value) {

  upvelocity_ = value;
  // @@protoc_insertion_point(field_set:PBGnssLocationInfoNotification.upVelocity)
}

// float northVelocityStdDeviation = 20;
void PBGnssLocationInfoNotification::clear_northvelocitystddeviation() {
  northvelocitystddeviation_ = 0;
}
float PBGnssLocationInfoNotification::northvelocitystddeviation() const {
  // @@protoc_insertion_point(field_get:PBGnssLocationInfoNotification.northVelocityStdDeviation)
  return northvelocitystddeviation_;
}
void PBGnssLocationInfoNotification::set_northvelocitystddeviation(float value) {

  northvelocitystddeviation_ = value;
  // @@protoc_insertion_point(field_set:PBGnssLocationInfoNotification.northVelocityStdDeviation)
}

// float eastVelocityStdDeviation = 21;
void PBGnssLocationInfoNotification::clear_eastvelocitystddeviation() {
  eastvelocitystddeviation_ = 0;
}
float PBGnssLocationInfoNotification::eastvelocitystddeviation() const {
  // @@protoc_insertion_point(field_get:PBGnssLocationInfoNotification.eastVelocityStdDeviation)
  return eastvelocitystddeviation_;
}
void PBGnssLocationInfoNotification::set_eastvelocitystddeviation(float value) {

  eastvelocitystddeviation_ = value;
  // @@protoc_insertion_point(field_set:PBGnssLocationInfoNotification.eastVelocityStdDeviation)
}

// float upVelocityStdDeviation = 22;
void PBGnssLocationInfoNotification::clear_upvelocitystddeviation() {
  upvelocitystddeviation_ = 0;
}
float PBGnssLocationInfoNotification::upvelocitystddeviation() const {
  // @@protoc_insertion_point(field_get:PBGnssLocationInfoNotification.upVelocityStdDeviation)
  return upvelocitystddeviation_;
}
void PBGnssLocationInfoNotification::set_upvelocitystddeviation(float value) {

  upvelocitystddeviation_ = value;
  // @@protoc_insertion_point(field_set:PBGnssLocationInfoNotification.upVelocityStdDeviation)
}

// uint32 numSvUsedInPosition = 23;
void PBGnssLocationInfoNotification::clear_numsvusedinposition() {
  numsvusedinposition_ = 0u;
}
::google::protobuf::uint32 PBGnssLocationInfoNotification::numsvusedinposition() const {
  // @@protoc_insertion_point(field_get:PBGnssLocationInfoNotification.numSvUsedInPosition)
  return numsvusedinposition_;
}
void PBGnssLocationInfoNotification::set_numsvusedinposition(::google::protobuf::uint32 value) {

  numsvusedinposition_ = value;
  // @@protoc_insertion_point(field_set:PBGnssLocationInfoNotification.numSvUsedInPosition)
}

// .PBGnssLocationSvUsedInPosition svUsedInPosition = 24;
bool PBGnssLocationInfoNotification::has_svusedinposition() const {
  return this != internal_default_instance() && svusedinposition_ != NULL;
}
void PBGnssLocationInfoNotification::clear_svusedinposition() {
  if (GetArenaNoVirtual() == NULL && svusedinposition_ != NULL) delete svusedinposition_;
  svusedinposition_ = NULL;
}
const ::PBGnssLocationSvUsedInPosition& PBGnssLocationInfoNotification::svusedinposition() const {
  // @@protoc_insertion_point(field_get:PBGnssLocationInfoNotification.svUsedInPosition)
  return svusedinposition_ != NULL ? *svusedinposition_
                         : *::PBGnssLocationSvUsedInPosition::internal_default_instance();
}
::PBGnssLocationSvUsedInPosition* PBGnssLocationInfoNotification::mutable_svusedinposition() {

  if (svusedinposition_ == NULL) {
    svusedinposition_ = new ::PBGnssLocationSvUsedInPosition;
  }
  // @@protoc_insertion_point(field_mutable:PBGnssLocationInfoNotification.svUsedInPosition)
  return svusedinposition_;
}
::PBGnssLocationSvUsedInPosition* PBGnssLocationInfoNotification::release_svusedinposition() {
  // @@protoc_insertion_point(field_release:PBGnssLocationInfoNotification.svUsedInPosition)

  ::PBGnssLocationSvUsedInPosition* temp = svusedinposition_;
  svusedinposition_ = NULL;
  return temp;
}
void PBGnssLocationInfoNotification::set_allocated_svusedinposition(::PBGnssLocationSvUsedInPosition* svusedinposition) {
  delete svusedinposition_;
  svusedinposition_ = svusedinposition;
  if (svusedinposition) {

  } else {

  }
  // @@protoc_insertion_point(field_set_allocated:PBGnssLocationInfoNotification.svUsedInPosition)
}

// uint32 navSolutionMask = 25;
void PBGnssLocationInfoNotification::clear_navsolutionmask() {
  navsolutionmask_ = 0u;
}
::google::protobuf::uint32 PBGnssLocationInfoNotification::navsolutionmask() const {
  // @@protoc_insertion_point(field_get:PBGnssLocationInfoNotification.navSolutionMask)
  return navsolutionmask_;
}
void PBGnssLocationInfoNotification::set_navsolutionmask(::google::protobuf::uint32 value) {

  navsolutionmask_ = value;
  // @@protoc_insertion_point(field_set:PBGnssLocationInfoNotification.navSolutionMask)
}

// .PBLocApiGnssLocationPositionDynamics bodyFrameData = 26;
bool PBGnssLocationInfoNotification::has_bodyframedata() const {
  return this != internal_default_instance() && bodyframedata_ != NULL;
}
void PBGnssLocationInfoNotification::clear_bodyframedata() {
  if (GetArenaNoVirtual() == NULL && bodyframedata_ != NULL) delete bodyframedata_;
  bodyframedata_ = NULL;
}
const ::PBLocApiGnssLocationPositionDynamics& PBGnssLocationInfoNotification::bodyframedata() const {
  // @@protoc_insertion_point(field_get:PBGnssLocationInfoNotification.bodyFrameData)
  return bodyframedata_ != NULL ? *bodyframedata_
                         : *::PBLocApiGnssLocationPositionDynamics::internal_default_instance();
}
::PBLocApiGnssLocationPositionDynamics* PBGnssLocationInfoNotification::mutable_bodyframedata() {

  if (bodyframedata_ == NULL) {
    bodyframedata_ = new ::PBLocApiGnssLocationPositionDynamics;
  }
  // @@protoc_insertion_point(field_mutable:PBGnssLocationInfoNotification.bodyFrameData)
  return bodyframedata_;
}
::PBLocApiGnssLocationPositionDynamics* PBGnssLocationInfoNotification::release_bodyframedata() {
  // @@protoc_insertion_point(field_release:PBGnssLocationInfoNotification.bodyFrameData)

  ::PBLocApiGnssLocationPositionDynamics* temp = bodyframedata_;
  bodyframedata_ = NULL;
  return temp;
}
void PBGnssLocationInfoNotification::set_allocated_bodyframedata(::PBLocApiGnssLocationPositionDynamics* bodyframedata) {
  delete bodyframedata_;
  bodyframedata_ = bodyframedata;
  if (bodyframedata) {

  } else {

  }
  // @@protoc_insertion_point(field_set_allocated:PBGnssLocationInfoNotification.bodyFrameData)
}

// .PBLocApiGnssSystemTime gnssSystemTime = 27;
bool PBGnssLocationInfoNotification::has_gnsssystemtime() const {
  return this != internal_default_instance() && gnsssystemtime_ != NULL;
}
void PBGnssLocationInfoNotification::clear_gnsssystemtime() {
  if (GetArenaNoVirtual() == NULL && gnsssystemtime_ != NULL) delete gnsssystemtime_;
  gnsssystemtime_ = NULL;
}
const ::PBLocApiGnssSystemTime& PBGnssLocationInfoNotification::gnsssystemtime() const {
  // @@protoc_insertion_point(field_get:PBGnssLocationInfoNotification.gnssSystemTime)
  return gnsssystemtime_ != NULL ? *gnsssystemtime_
                         : *::PBLocApiGnssSystemTime::internal_default_instance();
}
::PBLocApiGnssSystemTime* PBGnssLocationInfoNotification::mutable_gnsssystemtime() {

  if (gnsssystemtime_ == NULL) {
    gnsssystemtime_ = new ::PBLocApiGnssSystemTime;
  }
  // @@protoc_insertion_point(field_mutable:PBGnssLocationInfoNotification.gnssSystemTime)
  return gnsssystemtime_;
}
::PBLocApiGnssSystemTime* PBGnssLocationInfoNotification::release_gnsssystemtime() {
  // @@protoc_insertion_point(field_release:PBGnssLocationInfoNotification.gnssSystemTime)

  ::PBLocApiGnssSystemTime* temp = gnsssystemtime_;
  gnsssystemtime_ = NULL;
  return temp;
}
void PBGnssLocationInfoNotification::set_allocated_gnsssystemtime(::PBLocApiGnssSystemTime* gnsssystemtime) {
  delete gnsssystemtime_;
  gnsssystemtime_ = gnsssystemtime;
  if (gnsssystemtime) {

  } else {

  }
  // @@protoc_insertion_point(field_set_allocated:PBGnssLocationInfoNotification.gnssSystemTime)
}

// uint32 numOfMeasReceived = 28;
void PBGnssLocationInfoNotification::clear_numofmeasreceived() {
  numofmeasreceived_ = 0u;
}
::google::protobuf::uint32 PBGnssLocationInfoNotification::numofmeasreceived() const {
  // @@protoc_insertion_point(field_get:PBGnssLocationInfoNotification.numOfMeasReceived)
  return numofmeasreceived_;
}
void PBGnssLocationInfoNotification::set_numofmeasreceived(::google::protobuf::uint32 value) {

  numofmeasreceived_ = value;
  // @@protoc_insertion_point(field_set:PBGnssLocationInfoNotification.numOfMeasReceived)
}

// repeated .PBGnssMeasUsageInfo measUsageInfo = 29;
int PBGnssLocationInfoNotification::measusageinfo_size() const {
  return measusageinfo_.size();
}
void PBGnssLocationInfoNotification::clear_measusageinfo() {
  measusageinfo_.Clear();
}
const ::PBGnssMeasUsageInfo& PBGnssLocationInfoNotification::measusageinfo(int index) const {
  // @@protoc_insertion_point(field_get:PBGnssLocationInfoNotification.measUsageInfo)
  return measusageinfo_.Get(index);
}
::PBGnssMeasUsageInfo* PBGnssLocationInfoNotification::mutable_measusageinfo(int index) {
  // @@protoc_insertion_point(field_mutable:PBGnssLocationInfoNotification.measUsageInfo)
  return measusageinfo_.Mutable(index);
}
::PBGnssMeasUsageInfo* PBGnssLocationInfoNotification::add_measusageinfo() {
  // @@protoc_insertion_point(field_add:PBGnssLocationInfoNotification.measUsageInfo)
  return measusageinfo_.Add();
}
::google::protobuf::RepeatedPtrField< ::PBGnssMeasUsageInfo >*
PBGnssLocationInfoNotification::mutable_measusageinfo() {
  // @@protoc_insertion_point(field_mutable_list:PBGnssLocationInfoNotification.measUsageInfo)
  return &measusageinfo_;
}
const ::google::protobuf::RepeatedPtrField< ::PBGnssMeasUsageInfo >&
PBGnssLocationInfoNotification::measusageinfo() const {
  // @@protoc_insertion_point(field_list:PBGnssLocationInfoNotification.measUsageInfo)
  return measusageinfo_;
}

// uint32 leapSeconds = 30;
void PBGnssLocationInfoNotification::clear_leapseconds() {
  leapseconds_ = 0u;
}
::google::protobuf::uint32 PBGnssLocationInfoNotification::leapseconds() const {
  // @@protoc_insertion_point(field_get:PBGnssLocationInfoNotification.leapSeconds)
  return leapseconds_;
}
void PBGnssLocationInfoNotification::set_leapseconds(::google::protobuf::uint32 value) {

  leapseconds_ = value;
  // @@protoc_insertion_point(field_set:PBGnssLocationInfoNotification.leapSeconds)
}

// float timeUncMs = 31;
void PBGnssLocationInfoNotification::clear_timeuncms() {
  timeuncms_ = 0;
}
float PBGnssLocationInfoNotification::timeuncms() const {
  // @@protoc_insertion_point(field_get:PBGnssLocationInfoNotification.timeUncMs)
  return timeuncms_;
}
void PBGnssLocationInfoNotification::set_timeuncms(float value) {

  timeuncms_ = value;
  // @@protoc_insertion_point(field_set:PBGnssLocationInfoNotification.timeUncMs)
}

// uint32 calibrationConfidence = 32;
void PBGnssLocationInfoNotification::clear_calibrationconfidence() {
  calibrationconfidence_ = 0u;
}
::google::protobuf::uint32 PBGnssLocationInfoNotification::calibrationconfidence() const {
  // @@protoc_insertion_point(field_get:PBGnssLocationInfoNotification.calibrationConfidence)
  return calibrationconfidence_;
}
void PBGnssLocationInfoNotification::set_calibrationconfidence(::google::protobuf::uint32 value) {

  calibrationconfidence_ = value;
  // @@protoc_insertion_point(field_set:PBGnssLocationInfoNotification.calibrationConfidence)
}

// uint32 calibrationStatus = 33;
void PBGnssLocationInfoNotification::clear_calibrationstatus() {
  calibrationstatus_ = 0u;
}
::google::protobuf::uint32 PBGnssLocationInfoNotification::calibrationstatus() const {
  // @@protoc_insertion_point(field_get:PBGnssLocationInfoNotification.calibrationStatus)
  return calibrationstatus_;
}
void PBGnssLocationInfoNotification::set_calibrationstatus(::google::protobuf::uint32 value) {

  calibrationstatus_ = value;
  // @@protoc_insertion_point(field_set:PBGnssLocationInfoNotification.calibrationStatus)
}

// .PBLocApiOutputEngineType locOutputEngType = 34;
void PBGnssLocationInfoNotification::clear_locoutputengtype() {
  locoutputengtype_ = 0;
}
::PBLocApiOutputEngineType PBGnssLocationInfoNotification::locoutputengtype() const {
  // @@protoc_insertion_point(field_get:PBGnssLocationInfoNotification.locOutputEngType)
  return static_cast< ::PBLocApiOutputEngineType >(locoutputengtype_);
}
void PBGnssLocationInfoNotification::set_locoutputengtype(::PBLocApiOutputEngineType value) {

  locoutputengtype_ = value;
  // @@protoc_insertion_point(field_set:PBGnssLocationInfoNotification.locOutputEngType)
}

// uint32 locOutputEngMask = 35;
void PBGnssLocationInfoNotification::clear_locoutputengmask() {
  locoutputengmask_ = 0u;
}
::google::protobuf::uint32 PBGnssLocationInfoNotification::locoutputengmask() const {
  // @@protoc_insertion_point(field_get:PBGnssLocationInfoNotification.locOutputEngMask)
  return locoutputengmask_;
}
void PBGnssLocationInfoNotification::set_locoutputengmask(::google::protobuf::uint32 value) {

  locoutputengmask_ = value;
  // @@protoc_insertion_point(field_set:PBGnssLocationInfoNotification.locOutputEngMask)
}

// float conformityIndex = 36;
void PBGnssLocationInfoNotification::clear_conformityindex() {
  conformityindex_ = 0;
}
float PBGnssLocationInfoNotification::conformityindex() const {
  // @@protoc_insertion_point(field_get:PBGnssLocationInfoNotification.conformityIndex)
  return conformityindex_;
}
void PBGnssLocationInfoNotification::set_conformityindex(float value) {

  conformityindex_ = value;
  // @@protoc_insertion_point(field_set:PBGnssLocationInfoNotification.conformityIndex)
}

// .PBLLAInfo llaVRPBased = 37;
bool PBGnssLocationInfoNotification::has_llavrpbased() const {
  return this != internal_default_instance() && llavrpbased_ != NULL;
}
void PBGnssLocationInfoNotification::clear_llavrpbased() {
  if (GetArenaNoVirtual() == NULL && llavrpbased_ != NULL) delete llavrpbased_;
  llavrpbased_ = NULL;
}
const ::PBLLAInfo& PBGnssLocationInfoNotification::llavrpbased() const {
  // @@protoc_insertion_point(field_get:PBGnssLocationInfoNotification.llaVRPBased)
  return llavrpbased_ != NULL ? *llavrpbased_
                         : *::PBLLAInfo::internal_default_instance();
}
::PBLLAInfo* PBGnssLocationInfoNotification::mutable_llavrpbased() {

  if (llavrpbased_ == NULL) {
    llavrpbased_ = new ::PBLLAInfo;
  }
  // @@protoc_insertion_point(field_mutable:PBGnssLocationInfoNotification.llaVRPBased)
  return llavrpbased_;
}
::PBLLAInfo* PBGnssLocationInfoNotification::release_llavrpbased() {
  // @@protoc_insertion_point(field_release:PBGnssLocationInfoNotification.llaVRPBased)

  ::PBLLAInfo* temp = llavrpbased_;
  llavrpbased_ = NULL;
  return temp;
}
void PBGnssLocationInfoNotification::set_allocated_llavrpbased(::PBLLAInfo* llavrpbased) {
  delete llavrpbased_;
  llavrpbased_ = llavrpbased;
  if (llavrpbased) {

  } else {

  }
  // @@protoc_insertion_point(field_set_allocated:PBGnssLocationInfoNotification.llaVRPBased)
}

// repeated float enuVelocityVRPBased = 38;
int PBGnssLocationInfoNotification::enuvelocityvrpbased_size() const {
  return enuvelocityvrpbased_.size();
}
void PBGnssLocationInfoNotification::clear_enuvelocityvrpbased() {
  enuvelocityvrpbased_.Clear();
}
float PBGnssLocationInfoNotification::enuvelocityvrpbased(int index) const {
  // @@protoc_insertion_point(field_get:PBGnssLocationInfoNotification.enuVelocityVRPBased)
  return enuvelocityvrpbased_.Get(index);
}
void PBGnssLocationInfoNotification::set_enuvelocityvrpbased(int index, float value) {
  enuvelocityvrpbased_.Set(index, value);
  // @@protoc_insertion_point(field_set:PBGnssLocationInfoNotification.enuVelocityVRPBased)
}
void PBGnssLocationInfoNotification::add_enuvelocityvrpbased(float value) {
  enuvelocityvrpbased_.Add(value);
  // @@protoc_insertion_point(field_add:PBGnssLocationInfoNotification.enuVelocityVRPBased)
}
const ::google::protobuf::RepeatedField< float >&
PBGnssLocationInfoNotification::enuvelocityvrpbased() const {
  // @@protoc_insertion_point(field_list:PBGnssLocationInfoNotification.enuVelocityVRPBased)
  return enuvelocityvrpbased_;
}
::google::protobuf::RepeatedField< float >*
PBGnssLocationInfoNotification::mutable_enuvelocityvrpbased() {
  // @@protoc_insertion_point(field_mutable_list:PBGnssLocationInfoNotification.enuVelocityVRPBased)
  return &enuvelocityvrpbased_;
}

// uint32 drSolutionStatusMask = 39;
void PBGnssLocationInfoNotification::clear_drsolutionstatusmask() {
  drsolutionstatusmask_ = 0u;
}
::google::protobuf::uint32 PBGnssLocationInfoNotification::drsolutionstatusmask() const {
  // @@protoc_insertion_point(field_get:PBGnssLocationInfoNotification.drSolutionStatusMask)
  return drsolutionstatusmask_;
}
void PBGnssLocationInfoNotification::set_drsolutionstatusmask(::google::protobuf::uint32 value) {

  drsolutionstatusmask_ = value;
  // @@protoc_insertion_point(field_set:PBGnssLocationInfoNotification.drSolutionStatusMask)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PBGnssDataNotification::kNumberSignalTypesFieldNumber;
const int PBGnssDataNotification::kGnssDataMaskFieldNumber;
const int PBGnssDataNotification::kJammerIndFieldNumber;
const int PBGnssDataNotification::kAgcFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PBGnssDataNotification::PBGnssDataNotification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_LocationApiDataTypes_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBGnssDataNotification)
}
PBGnssDataNotification::PBGnssDataNotification(const PBGnssDataNotification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      gnssdatamask_(from.gnssdatamask_),
      jammerind_(from.jammerind_),
      agc_(from.agc_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  numbersignaltypes_ = from.numbersignaltypes_;
  // @@protoc_insertion_point(copy_constructor:PBGnssDataNotification)
}

void PBGnssDataNotification::SharedCtor() {
  numbersignaltypes_ = 0u;
  _cached_size_ = 0;
}

PBGnssDataNotification::~PBGnssDataNotification() {
  // @@protoc_insertion_point(destructor:PBGnssDataNotification)
  SharedDtor();
}

void PBGnssDataNotification::SharedDtor() {
}

void PBGnssDataNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBGnssDataNotification::descriptor() {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PBGnssDataNotification& PBGnssDataNotification::default_instance() {
  protobuf_LocationApiDataTypes_2eproto::InitDefaults();
  return *internal_default_instance();
}

PBGnssDataNotification* PBGnssDataNotification::New(::google::protobuf::Arena* arena) const {
  PBGnssDataNotification* n = new PBGnssDataNotification;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBGnssDataNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:PBGnssDataNotification)
  gnssdatamask_.Clear();
  jammerind_.Clear();
  agc_.Clear();
  numbersignaltypes_ = 0u;
}

bool PBGnssDataNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBGnssDataNotification)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 numberSignalTypes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numbersignaltypes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 gnssDataMask = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_gnssdatamask())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 18u, input, this->mutable_gnssdatamask())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double jammerInd = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_jammerind())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(25u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 26u, input, this->mutable_jammerind())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double agc = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_agc())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(33u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 34u, input, this->mutable_agc())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBGnssDataNotification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBGnssDataNotification)
  return false;
#undef DO_
}

void PBGnssDataNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBGnssDataNotification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 numberSignalTypes = 1;
  if (this->numbersignaltypes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->numbersignaltypes(), output);
  }

  // repeated uint64 gnssDataMask = 2;
  if (this->gnssdatamask_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_gnssdatamask_cached_byte_size_);
  }
  for (int i = 0, n = this->gnssdatamask_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->gnssdatamask(i), output);
  }

  // repeated double jammerInd = 3;
  if (this->jammerind_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_jammerind_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->jammerind().data(), this->jammerind_size(), output);
  }

  // repeated double agc = 4;
  if (this->agc_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_agc_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->agc().data(), this->agc_size(), output);
  }

  // @@protoc_insertion_point(serialize_end:PBGnssDataNotification)
}

::google::protobuf::uint8* PBGnssDataNotification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBGnssDataNotification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 numberSignalTypes = 1;
  if (this->numbersignaltypes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->numbersignaltypes(), target);
  }

  // repeated uint64 gnssDataMask = 2;
  if (this->gnssdatamask_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _gnssdatamask_cached_byte_size_, target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->gnssdatamask_, target);
  }

  // repeated double jammerInd = 3;
  if (this->jammerind_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _jammerind_cached_byte_size_, target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->jammerind_, target);
  }

  // repeated double agc = 4;
  if (this->agc_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _agc_cached_byte_size_, target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->agc_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PBGnssDataNotification)
  return target;
}

size_t PBGnssDataNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBGnssDataNotification)
  size_t total_size = 0;

  // repeated uint64 gnssDataMask = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->gnssdatamask_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _gnssdatamask_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double jammerInd = 3;
  {
    unsigned int count = this->jammerind_size();
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _jammerind_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double agc = 4;
  {
    unsigned int count = this->agc_size();
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _agc_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint32 numberSignalTypes = 1;
  if (this->numbersignaltypes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->numbersignaltypes());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBGnssDataNotification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PBGnssDataNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const PBGnssDataNotification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PBGnssDataNotification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PBGnssDataNotification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PBGnssDataNotification)
    MergeFrom(*source);
  }
}

void PBGnssDataNotification::MergeFrom(const PBGnssDataNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBGnssDataNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  gnssdatamask_.MergeFrom(from.gnssdatamask_);
  jammerind_.MergeFrom(from.jammerind_);
  agc_.MergeFrom(from.agc_);
  if (from.numbersignaltypes() != 0) {
    set_numbersignaltypes(from.numbersignaltypes());
  }
}

void PBGnssDataNotification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PBGnssDataNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBGnssDataNotification::CopyFrom(const PBGnssDataNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBGnssDataNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBGnssDataNotification::IsInitialized() const {
  return true;
}

void PBGnssDataNotification::Swap(PBGnssDataNotification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBGnssDataNotification::InternalSwap(PBGnssDataNotification* other) {
  gnssdatamask_.InternalSwap(&other->gnssdatamask_);
  jammerind_.InternalSwap(&other->jammerind_);
  agc_.InternalSwap(&other->agc_);
  std::swap(numbersignaltypes_, other->numbersignaltypes_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PBGnssDataNotification::GetMetadata() const {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PBGnssDataNotification

// uint32 numberSignalTypes = 1;
void PBGnssDataNotification::clear_numbersignaltypes() {
  numbersignaltypes_ = 0u;
}
::google::protobuf::uint32 PBGnssDataNotification::numbersignaltypes() const {
  // @@protoc_insertion_point(field_get:PBGnssDataNotification.numberSignalTypes)
  return numbersignaltypes_;
}
void PBGnssDataNotification::set_numbersignaltypes(::google::protobuf::uint32 value) {

  numbersignaltypes_ = value;
  // @@protoc_insertion_point(field_set:PBGnssDataNotification.numberSignalTypes)
}

// repeated uint64 gnssDataMask = 2;
int PBGnssDataNotification::gnssdatamask_size() const {
  return gnssdatamask_.size();
}
void PBGnssDataNotification::clear_gnssdatamask() {
  gnssdatamask_.Clear();
}
::google::protobuf::uint64 PBGnssDataNotification::gnssdatamask(int index) const {
  // @@protoc_insertion_point(field_get:PBGnssDataNotification.gnssDataMask)
  return gnssdatamask_.Get(index);
}
void PBGnssDataNotification::set_gnssdatamask(int index, ::google::protobuf::uint64 value) {
  gnssdatamask_.Set(index, value);
  // @@protoc_insertion_point(field_set:PBGnssDataNotification.gnssDataMask)
}
void PBGnssDataNotification::add_gnssdatamask(::google::protobuf::uint64 value) {
  gnssdatamask_.Add(value);
  // @@protoc_insertion_point(field_add:PBGnssDataNotification.gnssDataMask)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
PBGnssDataNotification::gnssdatamask() const {
  // @@protoc_insertion_point(field_list:PBGnssDataNotification.gnssDataMask)
  return gnssdatamask_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
PBGnssDataNotification::mutable_gnssdatamask() {
  // @@protoc_insertion_point(field_mutable_list:PBGnssDataNotification.gnssDataMask)
  return &gnssdatamask_;
}

// repeated double jammerInd = 3;
int PBGnssDataNotification::jammerind_size() const {
  return jammerind_.size();
}
void PBGnssDataNotification::clear_jammerind() {
  jammerind_.Clear();
}
double PBGnssDataNotification::jammerind(int index) const {
  // @@protoc_insertion_point(field_get:PBGnssDataNotification.jammerInd)
  return jammerind_.Get(index);
}
void PBGnssDataNotification::set_jammerind(int index, double value) {
  jammerind_.Set(index, value);
  // @@protoc_insertion_point(field_set:PBGnssDataNotification.jammerInd)
}
void PBGnssDataNotification::add_jammerind(double value) {
  jammerind_.Add(value);
  // @@protoc_insertion_point(field_add:PBGnssDataNotification.jammerInd)
}
const ::google::protobuf::RepeatedField< double >&
PBGnssDataNotification::jammerind() const {
  // @@protoc_insertion_point(field_list:PBGnssDataNotification.jammerInd)
  return jammerind_;
}
::google::protobuf::RepeatedField< double >*
PBGnssDataNotification::mutable_jammerind() {
  // @@protoc_insertion_point(field_mutable_list:PBGnssDataNotification.jammerInd)
  return &jammerind_;
}

// repeated double agc = 4;
int PBGnssDataNotification::agc_size() const {
  return agc_.size();
}
void PBGnssDataNotification::clear_agc() {
  agc_.Clear();
}
double PBGnssDataNotification::agc(int index) const {
  // @@protoc_insertion_point(field_get:PBGnssDataNotification.agc)
  return agc_.Get(index);
}
void PBGnssDataNotification::set_agc(int index, double value) {
  agc_.Set(index, value);
  // @@protoc_insertion_point(field_set:PBGnssDataNotification.agc)
}
void PBGnssDataNotification::add_agc(double value) {
  agc_.Add(value);
  // @@protoc_insertion_point(field_add:PBGnssDataNotification.agc)
}
const ::google::protobuf::RepeatedField< double >&
PBGnssDataNotification::agc() const {
  // @@protoc_insertion_point(field_list:PBGnssDataNotification.agc)
  return agc_;
}
::google::protobuf::RepeatedField< double >*
PBGnssDataNotification::mutable_agc() {
  // @@protoc_insertion_point(field_mutable_list:PBGnssDataNotification.agc)
  return &agc_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PBGnssMeasurementsNotification::kMeasurementsFieldNumber;
const int PBGnssMeasurementsNotification::kClockFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PBGnssMeasurementsNotification::PBGnssMeasurementsNotification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_LocationApiDataTypes_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBGnssMeasurementsNotification)
}
PBGnssMeasurementsNotification::PBGnssMeasurementsNotification(const PBGnssMeasurementsNotification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      measurements_(from.measurements_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_clock()) {
    clock_ = new ::PBGnssMeasurementsClock(*from.clock_);
  } else {
    clock_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:PBGnssMeasurementsNotification)
}

void PBGnssMeasurementsNotification::SharedCtor() {
  clock_ = NULL;
  _cached_size_ = 0;
}

PBGnssMeasurementsNotification::~PBGnssMeasurementsNotification() {
  // @@protoc_insertion_point(destructor:PBGnssMeasurementsNotification)
  SharedDtor();
}

void PBGnssMeasurementsNotification::SharedDtor() {
  if (this != internal_default_instance()) {
    delete clock_;
  }
}

void PBGnssMeasurementsNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBGnssMeasurementsNotification::descriptor() {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PBGnssMeasurementsNotification& PBGnssMeasurementsNotification::default_instance() {
  protobuf_LocationApiDataTypes_2eproto::InitDefaults();
  return *internal_default_instance();
}

PBGnssMeasurementsNotification* PBGnssMeasurementsNotification::New(::google::protobuf::Arena* arena) const {
  PBGnssMeasurementsNotification* n = new PBGnssMeasurementsNotification;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBGnssMeasurementsNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:PBGnssMeasurementsNotification)
  measurements_.Clear();
  if (GetArenaNoVirtual() == NULL && clock_ != NULL) {
    delete clock_;
  }
  clock_ = NULL;
}

bool PBGnssMeasurementsNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBGnssMeasurementsNotification)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PBGnssMeasurementsData measurements = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_measurements()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .PBGnssMeasurementsClock clock = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clock()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBGnssMeasurementsNotification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBGnssMeasurementsNotification)
  return false;
#undef DO_
}

void PBGnssMeasurementsNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBGnssMeasurementsNotification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PBGnssMeasurementsData measurements = 1;
  for (unsigned int i = 0, n = this->measurements_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->measurements(i), output);
  }

  // .PBGnssMeasurementsClock clock = 2;
  if (this->has_clock()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->clock_, output);
  }

  // @@protoc_insertion_point(serialize_end:PBGnssMeasurementsNotification)
}

::google::protobuf::uint8* PBGnssMeasurementsNotification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBGnssMeasurementsNotification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PBGnssMeasurementsData measurements = 1;
  for (unsigned int i = 0, n = this->measurements_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->measurements(i), deterministic, target);
  }

  // .PBGnssMeasurementsClock clock = 2;
  if (this->has_clock()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->clock_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PBGnssMeasurementsNotification)
  return target;
}

size_t PBGnssMeasurementsNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBGnssMeasurementsNotification)
  size_t total_size = 0;

  // repeated .PBGnssMeasurementsData measurements = 1;
  {
    unsigned int count = this->measurements_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->measurements(i));
    }
  }

  // .PBGnssMeasurementsClock clock = 2;
  if (this->has_clock()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->clock_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBGnssMeasurementsNotification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PBGnssMeasurementsNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const PBGnssMeasurementsNotification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PBGnssMeasurementsNotification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PBGnssMeasurementsNotification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PBGnssMeasurementsNotification)
    MergeFrom(*source);
  }
}

void PBGnssMeasurementsNotification::MergeFrom(const PBGnssMeasurementsNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBGnssMeasurementsNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  measurements_.MergeFrom(from.measurements_);
  if (from.has_clock()) {
    mutable_clock()->::PBGnssMeasurementsClock::MergeFrom(from.clock());
  }
}

void PBGnssMeasurementsNotification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PBGnssMeasurementsNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBGnssMeasurementsNotification::CopyFrom(const PBGnssMeasurementsNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBGnssMeasurementsNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBGnssMeasurementsNotification::IsInitialized() const {
  return true;
}

void PBGnssMeasurementsNotification::Swap(PBGnssMeasurementsNotification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBGnssMeasurementsNotification::InternalSwap(PBGnssMeasurementsNotification* other) {
  measurements_.InternalSwap(&other->measurements_);
  std::swap(clock_, other->clock_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PBGnssMeasurementsNotification::GetMetadata() const {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PBGnssMeasurementsNotification

// repeated .PBGnssMeasurementsData measurements = 1;
int PBGnssMeasurementsNotification::measurements_size() const {
  return measurements_.size();
}
void PBGnssMeasurementsNotification::clear_measurements() {
  measurements_.Clear();
}
const ::PBGnssMeasurementsData& PBGnssMeasurementsNotification::measurements(int index) const {
  // @@protoc_insertion_point(field_get:PBGnssMeasurementsNotification.measurements)
  return measurements_.Get(index);
}
::PBGnssMeasurementsData* PBGnssMeasurementsNotification::mutable_measurements(int index) {
  // @@protoc_insertion_point(field_mutable:PBGnssMeasurementsNotification.measurements)
  return measurements_.Mutable(index);
}
::PBGnssMeasurementsData* PBGnssMeasurementsNotification::add_measurements() {
  // @@protoc_insertion_point(field_add:PBGnssMeasurementsNotification.measurements)
  return measurements_.Add();
}
::google::protobuf::RepeatedPtrField< ::PBGnssMeasurementsData >*
PBGnssMeasurementsNotification::mutable_measurements() {
  // @@protoc_insertion_point(field_mutable_list:PBGnssMeasurementsNotification.measurements)
  return &measurements_;
}
const ::google::protobuf::RepeatedPtrField< ::PBGnssMeasurementsData >&
PBGnssMeasurementsNotification::measurements() const {
  // @@protoc_insertion_point(field_list:PBGnssMeasurementsNotification.measurements)
  return measurements_;
}

// .PBGnssMeasurementsClock clock = 2;
bool PBGnssMeasurementsNotification::has_clock() const {
  return this != internal_default_instance() && clock_ != NULL;
}
void PBGnssMeasurementsNotification::clear_clock() {
  if (GetArenaNoVirtual() == NULL && clock_ != NULL) delete clock_;
  clock_ = NULL;
}
const ::PBGnssMeasurementsClock& PBGnssMeasurementsNotification::clock() const {
  // @@protoc_insertion_point(field_get:PBGnssMeasurementsNotification.clock)
  return clock_ != NULL ? *clock_
                         : *::PBGnssMeasurementsClock::internal_default_instance();
}
::PBGnssMeasurementsClock* PBGnssMeasurementsNotification::mutable_clock() {

  if (clock_ == NULL) {
    clock_ = new ::PBGnssMeasurementsClock;
  }
  // @@protoc_insertion_point(field_mutable:PBGnssMeasurementsNotification.clock)
  return clock_;
}
::PBGnssMeasurementsClock* PBGnssMeasurementsNotification::release_clock() {
  // @@protoc_insertion_point(field_release:PBGnssMeasurementsNotification.clock)

  ::PBGnssMeasurementsClock* temp = clock_;
  clock_ = NULL;
  return temp;
}
void PBGnssMeasurementsNotification::set_allocated_clock(::PBGnssMeasurementsClock* clock) {
  delete clock_;
  clock_ = clock;
  if (clock) {

  } else {

  }
  // @@protoc_insertion_point(field_set_allocated:PBGnssMeasurementsNotification.clock)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PBLocApiGnssSystemTimeStructType::kValidityMaskFieldNumber;
const int PBLocApiGnssSystemTimeStructType::kSystemWeekFieldNumber;
const int PBLocApiGnssSystemTimeStructType::kSystemMsecFieldNumber;
const int PBLocApiGnssSystemTimeStructType::kSystemClkTimeBiasMsFieldNumber;
const int PBLocApiGnssSystemTimeStructType::kSystemClkTimeBiasUncMsFieldNumber;
const int PBLocApiGnssSystemTimeStructType::kRefFCountFieldNumber;
const int PBLocApiGnssSystemTimeStructType::kNumClockResetsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PBLocApiGnssSystemTimeStructType::PBLocApiGnssSystemTimeStructType()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_LocationApiDataTypes_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBLocApiGnssSystemTimeStructType)
}
PBLocApiGnssSystemTimeStructType::PBLocApiGnssSystemTimeStructType(const PBLocApiGnssSystemTimeStructType& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&validitymask_, &from.validitymask_,
    reinterpret_cast<char*>(&numclockresets_) -
    reinterpret_cast<char*>(&validitymask_) + sizeof(numclockresets_));
  // @@protoc_insertion_point(copy_constructor:PBLocApiGnssSystemTimeStructType)
}

void PBLocApiGnssSystemTimeStructType::SharedCtor() {
  ::memset(&validitymask_, 0, reinterpret_cast<char*>(&numclockresets_) -
    reinterpret_cast<char*>(&validitymask_) + sizeof(numclockresets_));
  _cached_size_ = 0;
}

PBLocApiGnssSystemTimeStructType::~PBLocApiGnssSystemTimeStructType() {
  // @@protoc_insertion_point(destructor:PBLocApiGnssSystemTimeStructType)
  SharedDtor();
}

void PBLocApiGnssSystemTimeStructType::SharedDtor() {
}

void PBLocApiGnssSystemTimeStructType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBLocApiGnssSystemTimeStructType::descriptor() {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PBLocApiGnssSystemTimeStructType& PBLocApiGnssSystemTimeStructType::default_instance() {
  protobuf_LocationApiDataTypes_2eproto::InitDefaults();
  return *internal_default_instance();
}

PBLocApiGnssSystemTimeStructType* PBLocApiGnssSystemTimeStructType::New(::google::protobuf::Arena* arena) const {
  PBLocApiGnssSystemTimeStructType* n = new PBLocApiGnssSystemTimeStructType;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBLocApiGnssSystemTimeStructType::Clear() {
// @@protoc_insertion_point(message_clear_start:PBLocApiGnssSystemTimeStructType)
  ::memset(&validitymask_, 0, reinterpret_cast<char*>(&numclockresets_) -
    reinterpret_cast<char*>(&validitymask_) + sizeof(numclockresets_));
}

bool PBLocApiGnssSystemTimeStructType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBLocApiGnssSystemTimeStructType)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 validityMask = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &validitymask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 systemWeek = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &systemweek_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 systemMsec = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &systemmsec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float systemClkTimeBiasMs = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &systemclktimebiasms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float systemClkTimeBiasUncMs = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &systemclktimebiasuncms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 refFCount = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reffcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 numClockResets = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numclockresets_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBLocApiGnssSystemTimeStructType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBLocApiGnssSystemTimeStructType)
  return false;
#undef DO_
}

void PBLocApiGnssSystemTimeStructType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBLocApiGnssSystemTimeStructType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 validityMask = 1;
  if (this->validitymask() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->validitymask(), output);
  }

  // uint32 systemWeek = 2;
  if (this->systemweek() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->systemweek(), output);
  }

  // uint32 systemMsec = 3;
  if (this->systemmsec() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->systemmsec(), output);
  }

  // float systemClkTimeBiasMs = 4;
  if (this->systemclktimebiasms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->systemclktimebiasms(), output);
  }

  // float systemClkTimeBiasUncMs = 5;
  if (this->systemclktimebiasuncms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->systemclktimebiasuncms(), output);
  }

  // uint32 refFCount = 6;
  if (this->reffcount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->reffcount(), output);
  }

  // uint32 numClockResets = 7;
  if (this->numclockresets() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->numclockresets(), output);
  }

  // @@protoc_insertion_point(serialize_end:PBLocApiGnssSystemTimeStructType)
}

::google::protobuf::uint8* PBLocApiGnssSystemTimeStructType::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBLocApiGnssSystemTimeStructType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 validityMask = 1;
  if (this->validitymask() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->validitymask(), target);
  }

  // uint32 systemWeek = 2;
  if (this->systemweek() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->systemweek(), target);
  }

  // uint32 systemMsec = 3;
  if (this->systemmsec() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->systemmsec(), target);
  }

  // float systemClkTimeBiasMs = 4;
  if (this->systemclktimebiasms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->systemclktimebiasms(), target);
  }

  // float systemClkTimeBiasUncMs = 5;
  if (this->systemclktimebiasuncms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->systemclktimebiasuncms(), target);
  }

  // uint32 refFCount = 6;
  if (this->reffcount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->reffcount(), target);
  }

  // uint32 numClockResets = 7;
  if (this->numclockresets() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->numclockresets(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PBLocApiGnssSystemTimeStructType)
  return target;
}

size_t PBLocApiGnssSystemTimeStructType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBLocApiGnssSystemTimeStructType)
  size_t total_size = 0;

  // uint32 validityMask = 1;
  if (this->validitymask() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->validitymask());
  }

  // uint32 systemWeek = 2;
  if (this->systemweek() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->systemweek());
  }

  // uint32 systemMsec = 3;
  if (this->systemmsec() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->systemmsec());
  }

  // float systemClkTimeBiasMs = 4;
  if (this->systemclktimebiasms() != 0) {
    total_size += 1 + 4;
  }

  // float systemClkTimeBiasUncMs = 5;
  if (this->systemclktimebiasuncms() != 0) {
    total_size += 1 + 4;
  }

  // uint32 refFCount = 6;
  if (this->reffcount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->reffcount());
  }

  // uint32 numClockResets = 7;
  if (this->numclockresets() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->numclockresets());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBLocApiGnssSystemTimeStructType::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PBLocApiGnssSystemTimeStructType)
  GOOGLE_DCHECK_NE(&from, this);
  const PBLocApiGnssSystemTimeStructType* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PBLocApiGnssSystemTimeStructType>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PBLocApiGnssSystemTimeStructType)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PBLocApiGnssSystemTimeStructType)
    MergeFrom(*source);
  }
}

void PBLocApiGnssSystemTimeStructType::MergeFrom(const PBLocApiGnssSystemTimeStructType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBLocApiGnssSystemTimeStructType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.validitymask() != 0) {
    set_validitymask(from.validitymask());
  }
  if (from.systemweek() != 0) {
    set_systemweek(from.systemweek());
  }
  if (from.systemmsec() != 0) {
    set_systemmsec(from.systemmsec());
  }
  if (from.systemclktimebiasms() != 0) {
    set_systemclktimebiasms(from.systemclktimebiasms());
  }
  if (from.systemclktimebiasuncms() != 0) {
    set_systemclktimebiasuncms(from.systemclktimebiasuncms());
  }
  if (from.reffcount() != 0) {
    set_reffcount(from.reffcount());
  }
  if (from.numclockresets() != 0) {
    set_numclockresets(from.numclockresets());
  }
}

void PBLocApiGnssSystemTimeStructType::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PBLocApiGnssSystemTimeStructType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBLocApiGnssSystemTimeStructType::CopyFrom(const PBLocApiGnssSystemTimeStructType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBLocApiGnssSystemTimeStructType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBLocApiGnssSystemTimeStructType::IsInitialized() const {
  return true;
}

void PBLocApiGnssSystemTimeStructType::Swap(PBLocApiGnssSystemTimeStructType* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBLocApiGnssSystemTimeStructType::InternalSwap(PBLocApiGnssSystemTimeStructType* other) {
  std::swap(validitymask_, other->validitymask_);
  std::swap(systemweek_, other->systemweek_);
  std::swap(systemmsec_, other->systemmsec_);
  std::swap(systemclktimebiasms_, other->systemclktimebiasms_);
  std::swap(systemclktimebiasuncms_, other->systemclktimebiasuncms_);
  std::swap(reffcount_, other->reffcount_);
  std::swap(numclockresets_, other->numclockresets_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PBLocApiGnssSystemTimeStructType::GetMetadata() const {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PBLocApiGnssSystemTimeStructType

// uint32 validityMask = 1;
void PBLocApiGnssSystemTimeStructType::clear_validitymask() {
  validitymask_ = 0u;
}
::google::protobuf::uint32 PBLocApiGnssSystemTimeStructType::validitymask() const {
  // @@protoc_insertion_point(field_get:PBLocApiGnssSystemTimeStructType.validityMask)
  return validitymask_;
}
void PBLocApiGnssSystemTimeStructType::set_validitymask(::google::protobuf::uint32 value) {

  validitymask_ = value;
  // @@protoc_insertion_point(field_set:PBLocApiGnssSystemTimeStructType.validityMask)
}

// uint32 systemWeek = 2;
void PBLocApiGnssSystemTimeStructType::clear_systemweek() {
  systemweek_ = 0u;
}
::google::protobuf::uint32 PBLocApiGnssSystemTimeStructType::systemweek() const {
  // @@protoc_insertion_point(field_get:PBLocApiGnssSystemTimeStructType.systemWeek)
  return systemweek_;
}
void PBLocApiGnssSystemTimeStructType::set_systemweek(::google::protobuf::uint32 value) {

  systemweek_ = value;
  // @@protoc_insertion_point(field_set:PBLocApiGnssSystemTimeStructType.systemWeek)
}

// uint32 systemMsec = 3;
void PBLocApiGnssSystemTimeStructType::clear_systemmsec() {
  systemmsec_ = 0u;
}
::google::protobuf::uint32 PBLocApiGnssSystemTimeStructType::systemmsec() const {
  // @@protoc_insertion_point(field_get:PBLocApiGnssSystemTimeStructType.systemMsec)
  return systemmsec_;
}
void PBLocApiGnssSystemTimeStructType::set_systemmsec(::google::protobuf::uint32 value) {

  systemmsec_ = value;
  // @@protoc_insertion_point(field_set:PBLocApiGnssSystemTimeStructType.systemMsec)
}

// float systemClkTimeBiasMs = 4;
void PBLocApiGnssSystemTimeStructType::clear_systemclktimebiasms() {
  systemclktimebiasms_ = 0;
}
float PBLocApiGnssSystemTimeStructType::systemclktimebiasms() const {
  // @@protoc_insertion_point(field_get:PBLocApiGnssSystemTimeStructType.systemClkTimeBiasMs)
  return systemclktimebiasms_;
}
void PBLocApiGnssSystemTimeStructType::set_systemclktimebiasms(float value) {

  systemclktimebiasms_ = value;
  // @@protoc_insertion_point(field_set:PBLocApiGnssSystemTimeStructType.systemClkTimeBiasMs)
}

// float systemClkTimeBiasUncMs = 5;
void PBLocApiGnssSystemTimeStructType::clear_systemclktimebiasuncms() {
  systemclktimebiasuncms_ = 0;
}
float PBLocApiGnssSystemTimeStructType::systemclktimebiasuncms() const {
  // @@protoc_insertion_point(field_get:PBLocApiGnssSystemTimeStructType.systemClkTimeBiasUncMs)
  return systemclktimebiasuncms_;
}
void PBLocApiGnssSystemTimeStructType::set_systemclktimebiasuncms(float value) {

  systemclktimebiasuncms_ = value;
  // @@protoc_insertion_point(field_set:PBLocApiGnssSystemTimeStructType.systemClkTimeBiasUncMs)
}

// uint32 refFCount = 6;
void PBLocApiGnssSystemTimeStructType::clear_reffcount() {
  reffcount_ = 0u;
}
::google::protobuf::uint32 PBLocApiGnssSystemTimeStructType::reffcount() const {
  // @@protoc_insertion_point(field_get:PBLocApiGnssSystemTimeStructType.refFCount)
  return reffcount_;
}
void PBLocApiGnssSystemTimeStructType::set_reffcount(::google::protobuf::uint32 value) {

  reffcount_ = value;
  // @@protoc_insertion_point(field_set:PBLocApiGnssSystemTimeStructType.refFCount)
}

// uint32 numClockResets = 7;
void PBLocApiGnssSystemTimeStructType::clear_numclockresets() {
  numclockresets_ = 0u;
}
::google::protobuf::uint32 PBLocApiGnssSystemTimeStructType::numclockresets() const {
  // @@protoc_insertion_point(field_get:PBLocApiGnssSystemTimeStructType.numClockResets)
  return numclockresets_;
}
void PBLocApiGnssSystemTimeStructType::set_numclockresets(::google::protobuf::uint32 value) {

  numclockresets_ = value;
  // @@protoc_insertion_point(field_set:PBLocApiGnssSystemTimeStructType.numClockResets)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PBLocApiGnssGloTimeStructType::kValidityMaskFieldNumber;
const int PBLocApiGnssGloTimeStructType::kGloFourYearFieldNumber;
const int PBLocApiGnssGloTimeStructType::kGloDaysFieldNumber;
const int PBLocApiGnssGloTimeStructType::kGloMsecFieldNumber;
const int PBLocApiGnssGloTimeStructType::kGloClkTimeBiasFieldNumber;
const int PBLocApiGnssGloTimeStructType::kGloClkTimeUncMsFieldNumber;
const int PBLocApiGnssGloTimeStructType::kRefFCountFieldNumber;
const int PBLocApiGnssGloTimeStructType::kNumClockResetsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PBLocApiGnssGloTimeStructType::PBLocApiGnssGloTimeStructType()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_LocationApiDataTypes_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBLocApiGnssGloTimeStructType)
}
PBLocApiGnssGloTimeStructType::PBLocApiGnssGloTimeStructType(const PBLocApiGnssGloTimeStructType& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&validitymask_, &from.validitymask_,
    reinterpret_cast<char*>(&numclockresets_) -
    reinterpret_cast<char*>(&validitymask_) + sizeof(numclockresets_));
  // @@protoc_insertion_point(copy_constructor:PBLocApiGnssGloTimeStructType)
}

void PBLocApiGnssGloTimeStructType::SharedCtor() {
  ::memset(&validitymask_, 0, reinterpret_cast<char*>(&numclockresets_) -
    reinterpret_cast<char*>(&validitymask_) + sizeof(numclockresets_));
  _cached_size_ = 0;
}

PBLocApiGnssGloTimeStructType::~PBLocApiGnssGloTimeStructType() {
  // @@protoc_insertion_point(destructor:PBLocApiGnssGloTimeStructType)
  SharedDtor();
}

void PBLocApiGnssGloTimeStructType::SharedDtor() {
}

void PBLocApiGnssGloTimeStructType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBLocApiGnssGloTimeStructType::descriptor() {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PBLocApiGnssGloTimeStructType& PBLocApiGnssGloTimeStructType::default_instance() {
  protobuf_LocationApiDataTypes_2eproto::InitDefaults();
  return *internal_default_instance();
}

PBLocApiGnssGloTimeStructType* PBLocApiGnssGloTimeStructType::New(::google::protobuf::Arena* arena) const {
  PBLocApiGnssGloTimeStructType* n = new PBLocApiGnssGloTimeStructType;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBLocApiGnssGloTimeStructType::Clear() {
// @@protoc_insertion_point(message_clear_start:PBLocApiGnssGloTimeStructType)
  ::memset(&validitymask_, 0, reinterpret_cast<char*>(&numclockresets_) -
    reinterpret_cast<char*>(&validitymask_) + sizeof(numclockresets_));
}

bool PBLocApiGnssGloTimeStructType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBLocApiGnssGloTimeStructType)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 validityMask = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &validitymask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 gloFourYear = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &glofouryear_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 gloDays = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &glodays_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 gloMsec = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &glomsec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float gloClkTimeBias = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gloclktimebias_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float gloClkTimeUncMs = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gloclktimeuncms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 refFCount = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reffcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 numClockResets = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numclockresets_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBLocApiGnssGloTimeStructType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBLocApiGnssGloTimeStructType)
  return false;
#undef DO_
}

void PBLocApiGnssGloTimeStructType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBLocApiGnssGloTimeStructType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 validityMask = 1;
  if (this->validitymask() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->validitymask(), output);
  }

  // uint32 gloFourYear = 2;
  if (this->glofouryear() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->glofouryear(), output);
  }

  // uint32 gloDays = 3;
  if (this->glodays() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->glodays(), output);
  }

  // uint32 gloMsec = 4;
  if (this->glomsec() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->glomsec(), output);
  }

  // float gloClkTimeBias = 5;
  if (this->gloclktimebias() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->gloclktimebias(), output);
  }

  // float gloClkTimeUncMs = 6;
  if (this->gloclktimeuncms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->gloclktimeuncms(), output);
  }

  // uint32 refFCount = 7;
  if (this->reffcount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->reffcount(), output);
  }

  // uint32 numClockResets = 8;
  if (this->numclockresets() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->numclockresets(), output);
  }

  // @@protoc_insertion_point(serialize_end:PBLocApiGnssGloTimeStructType)
}

::google::protobuf::uint8* PBLocApiGnssGloTimeStructType::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBLocApiGnssGloTimeStructType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 validityMask = 1;
  if (this->validitymask() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->validitymask(), target);
  }

  // uint32 gloFourYear = 2;
  if (this->glofouryear() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->glofouryear(), target);
  }

  // uint32 gloDays = 3;
  if (this->glodays() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->glodays(), target);
  }

  // uint32 gloMsec = 4;
  if (this->glomsec() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->glomsec(), target);
  }

  // float gloClkTimeBias = 5;
  if (this->gloclktimebias() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->gloclktimebias(), target);
  }

  // float gloClkTimeUncMs = 6;
  if (this->gloclktimeuncms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->gloclktimeuncms(), target);
  }

  // uint32 refFCount = 7;
  if (this->reffcount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->reffcount(), target);
  }

  // uint32 numClockResets = 8;
  if (this->numclockresets() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->numclockresets(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PBLocApiGnssGloTimeStructType)
  return target;
}

size_t PBLocApiGnssGloTimeStructType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBLocApiGnssGloTimeStructType)
  size_t total_size = 0;

  // uint32 validityMask = 1;
  if (this->validitymask() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->validitymask());
  }

  // uint32 gloFourYear = 2;
  if (this->glofouryear() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->glofouryear());
  }

  // uint32 gloDays = 3;
  if (this->glodays() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->glodays());
  }

  // uint32 gloMsec = 4;
  if (this->glomsec() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->glomsec());
  }

  // float gloClkTimeBias = 5;
  if (this->gloclktimebias() != 0) {
    total_size += 1 + 4;
  }

  // float gloClkTimeUncMs = 6;
  if (this->gloclktimeuncms() != 0) {
    total_size += 1 + 4;
  }

  // uint32 refFCount = 7;
  if (this->reffcount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->reffcount());
  }

  // uint32 numClockResets = 8;
  if (this->numclockresets() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->numclockresets());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBLocApiGnssGloTimeStructType::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PBLocApiGnssGloTimeStructType)
  GOOGLE_DCHECK_NE(&from, this);
  const PBLocApiGnssGloTimeStructType* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PBLocApiGnssGloTimeStructType>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PBLocApiGnssGloTimeStructType)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PBLocApiGnssGloTimeStructType)
    MergeFrom(*source);
  }
}

void PBLocApiGnssGloTimeStructType::MergeFrom(const PBLocApiGnssGloTimeStructType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBLocApiGnssGloTimeStructType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.validitymask() != 0) {
    set_validitymask(from.validitymask());
  }
  if (from.glofouryear() != 0) {
    set_glofouryear(from.glofouryear());
  }
  if (from.glodays() != 0) {
    set_glodays(from.glodays());
  }
  if (from.glomsec() != 0) {
    set_glomsec(from.glomsec());
  }
  if (from.gloclktimebias() != 0) {
    set_gloclktimebias(from.gloclktimebias());
  }
  if (from.gloclktimeuncms() != 0) {
    set_gloclktimeuncms(from.gloclktimeuncms());
  }
  if (from.reffcount() != 0) {
    set_reffcount(from.reffcount());
  }
  if (from.numclockresets() != 0) {
    set_numclockresets(from.numclockresets());
  }
}

void PBLocApiGnssGloTimeStructType::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PBLocApiGnssGloTimeStructType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBLocApiGnssGloTimeStructType::CopyFrom(const PBLocApiGnssGloTimeStructType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBLocApiGnssGloTimeStructType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBLocApiGnssGloTimeStructType::IsInitialized() const {
  return true;
}

void PBLocApiGnssGloTimeStructType::Swap(PBLocApiGnssGloTimeStructType* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBLocApiGnssGloTimeStructType::InternalSwap(PBLocApiGnssGloTimeStructType* other) {
  std::swap(validitymask_, other->validitymask_);
  std::swap(glofouryear_, other->glofouryear_);
  std::swap(glodays_, other->glodays_);
  std::swap(glomsec_, other->glomsec_);
  std::swap(gloclktimebias_, other->gloclktimebias_);
  std::swap(gloclktimeuncms_, other->gloclktimeuncms_);
  std::swap(reffcount_, other->reffcount_);
  std::swap(numclockresets_, other->numclockresets_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PBLocApiGnssGloTimeStructType::GetMetadata() const {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PBLocApiGnssGloTimeStructType

// uint32 validityMask = 1;
void PBLocApiGnssGloTimeStructType::clear_validitymask() {
  validitymask_ = 0u;
}
::google::protobuf::uint32 PBLocApiGnssGloTimeStructType::validitymask() const {
  // @@protoc_insertion_point(field_get:PBLocApiGnssGloTimeStructType.validityMask)
  return validitymask_;
}
void PBLocApiGnssGloTimeStructType::set_validitymask(::google::protobuf::uint32 value) {

  validitymask_ = value;
  // @@protoc_insertion_point(field_set:PBLocApiGnssGloTimeStructType.validityMask)
}

// uint32 gloFourYear = 2;
void PBLocApiGnssGloTimeStructType::clear_glofouryear() {
  glofouryear_ = 0u;
}
::google::protobuf::uint32 PBLocApiGnssGloTimeStructType::glofouryear() const {
  // @@protoc_insertion_point(field_get:PBLocApiGnssGloTimeStructType.gloFourYear)
  return glofouryear_;
}
void PBLocApiGnssGloTimeStructType::set_glofouryear(::google::protobuf::uint32 value) {

  glofouryear_ = value;
  // @@protoc_insertion_point(field_set:PBLocApiGnssGloTimeStructType.gloFourYear)
}

// uint32 gloDays = 3;
void PBLocApiGnssGloTimeStructType::clear_glodays() {
  glodays_ = 0u;
}
::google::protobuf::uint32 PBLocApiGnssGloTimeStructType::glodays() const {
  // @@protoc_insertion_point(field_get:PBLocApiGnssGloTimeStructType.gloDays)
  return glodays_;
}
void PBLocApiGnssGloTimeStructType::set_glodays(::google::protobuf::uint32 value) {

  glodays_ = value;
  // @@protoc_insertion_point(field_set:PBLocApiGnssGloTimeStructType.gloDays)
}

// uint32 gloMsec = 4;
void PBLocApiGnssGloTimeStructType::clear_glomsec() {
  glomsec_ = 0u;
}
::google::protobuf::uint32 PBLocApiGnssGloTimeStructType::glomsec() const {
  // @@protoc_insertion_point(field_get:PBLocApiGnssGloTimeStructType.gloMsec)
  return glomsec_;
}
void PBLocApiGnssGloTimeStructType::set_glomsec(::google::protobuf::uint32 value) {

  glomsec_ = value;
  // @@protoc_insertion_point(field_set:PBLocApiGnssGloTimeStructType.gloMsec)
}

// float gloClkTimeBias = 5;
void PBLocApiGnssGloTimeStructType::clear_gloclktimebias() {
  gloclktimebias_ = 0;
}
float PBLocApiGnssGloTimeStructType::gloclktimebias() const {
  // @@protoc_insertion_point(field_get:PBLocApiGnssGloTimeStructType.gloClkTimeBias)
  return gloclktimebias_;
}
void PBLocApiGnssGloTimeStructType::set_gloclktimebias(float value) {

  gloclktimebias_ = value;
  // @@protoc_insertion_point(field_set:PBLocApiGnssGloTimeStructType.gloClkTimeBias)
}

// float gloClkTimeUncMs = 6;
void PBLocApiGnssGloTimeStructType::clear_gloclktimeuncms() {
  gloclktimeuncms_ = 0;
}
float PBLocApiGnssGloTimeStructType::gloclktimeuncms() const {
  // @@protoc_insertion_point(field_get:PBLocApiGnssGloTimeStructType.gloClkTimeUncMs)
  return gloclktimeuncms_;
}
void PBLocApiGnssGloTimeStructType::set_gloclktimeuncms(float value) {

  gloclktimeuncms_ = value;
  // @@protoc_insertion_point(field_set:PBLocApiGnssGloTimeStructType.gloClkTimeUncMs)
}

// uint32 refFCount = 7;
void PBLocApiGnssGloTimeStructType::clear_reffcount() {
  reffcount_ = 0u;
}
::google::protobuf::uint32 PBLocApiGnssGloTimeStructType::reffcount() const {
  // @@protoc_insertion_point(field_get:PBLocApiGnssGloTimeStructType.refFCount)
  return reffcount_;
}
void PBLocApiGnssGloTimeStructType::set_reffcount(::google::protobuf::uint32 value) {

  reffcount_ = value;
  // @@protoc_insertion_point(field_set:PBLocApiGnssGloTimeStructType.refFCount)
}

// uint32 numClockResets = 8;
void PBLocApiGnssGloTimeStructType::clear_numclockresets() {
  numclockresets_ = 0u;
}
::google::protobuf::uint32 PBLocApiGnssGloTimeStructType::numclockresets() const {
  // @@protoc_insertion_point(field_get:PBLocApiGnssGloTimeStructType.numClockResets)
  return numclockresets_;
}
void PBLocApiGnssGloTimeStructType::set_numclockresets(::google::protobuf::uint32 value) {

  numclockresets_ = value;
  // @@protoc_insertion_point(field_set:PBLocApiGnssGloTimeStructType.numClockResets)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PBLLAInfo::kLatitudeFieldNumber;
const int PBLLAInfo::kLongitudeFieldNumber;
const int PBLLAInfo::kAltitudeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PBLLAInfo::PBLLAInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_LocationApiDataTypes_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBLLAInfo)
}
PBLLAInfo::PBLLAInfo(const PBLLAInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&latitude_, &from.latitude_,
    reinterpret_cast<char*>(&altitude_) -
    reinterpret_cast<char*>(&latitude_) + sizeof(altitude_));
  // @@protoc_insertion_point(copy_constructor:PBLLAInfo)
}

void PBLLAInfo::SharedCtor() {
  ::memset(&latitude_, 0, reinterpret_cast<char*>(&altitude_) -
    reinterpret_cast<char*>(&latitude_) + sizeof(altitude_));
  _cached_size_ = 0;
}

PBLLAInfo::~PBLLAInfo() {
  // @@protoc_insertion_point(destructor:PBLLAInfo)
  SharedDtor();
}

void PBLLAInfo::SharedDtor() {
}

void PBLLAInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBLLAInfo::descriptor() {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PBLLAInfo& PBLLAInfo::default_instance() {
  protobuf_LocationApiDataTypes_2eproto::InitDefaults();
  return *internal_default_instance();
}

PBLLAInfo* PBLLAInfo::New(::google::protobuf::Arena* arena) const {
  PBLLAInfo* n = new PBLLAInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBLLAInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PBLLAInfo)
  ::memset(&latitude_, 0, reinterpret_cast<char*>(&altitude_) -
    reinterpret_cast<char*>(&latitude_) + sizeof(altitude_));
}

bool PBLLAInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBLLAInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double latitude = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double longitude = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float altitude = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &altitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBLLAInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBLLAInfo)
  return false;
#undef DO_
}

void PBLLAInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBLLAInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double latitude = 1;
  if (this->latitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->latitude(), output);
  }

  // double longitude = 2;
  if (this->longitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->longitude(), output);
  }

  // float altitude = 3;
  if (this->altitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->altitude(), output);
  }

  // @@protoc_insertion_point(serialize_end:PBLLAInfo)
}

::google::protobuf::uint8* PBLLAInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBLLAInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double latitude = 1;
  if (this->latitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->latitude(), target);
  }

  // double longitude = 2;
  if (this->longitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->longitude(), target);
  }

  // float altitude = 3;
  if (this->altitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->altitude(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PBLLAInfo)
  return target;
}

size_t PBLLAInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBLLAInfo)
  size_t total_size = 0;

  // double latitude = 1;
  if (this->latitude() != 0) {
    total_size += 1 + 8;
  }

  // double longitude = 2;
  if (this->longitude() != 0) {
    total_size += 1 + 8;
  }

  // float altitude = 3;
  if (this->altitude() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBLLAInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PBLLAInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PBLLAInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PBLLAInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PBLLAInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PBLLAInfo)
    MergeFrom(*source);
  }
}

void PBLLAInfo::MergeFrom(const PBLLAInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBLLAInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.latitude() != 0) {
    set_latitude(from.latitude());
  }
  if (from.longitude() != 0) {
    set_longitude(from.longitude());
  }
  if (from.altitude() != 0) {
    set_altitude(from.altitude());
  }
}

void PBLLAInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PBLLAInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBLLAInfo::CopyFrom(const PBLLAInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBLLAInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBLLAInfo::IsInitialized() const {
  return true;
}

void PBLLAInfo::Swap(PBLLAInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBLLAInfo::InternalSwap(PBLLAInfo* other) {
  std::swap(latitude_, other->latitude_);
  std::swap(longitude_, other->longitude_);
  std::swap(altitude_, other->altitude_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PBLLAInfo::GetMetadata() const {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PBLLAInfo

// double latitude = 1;
void PBLLAInfo::clear_latitude() {
  latitude_ = 0;
}
double PBLLAInfo::latitude() const {
  // @@protoc_insertion_point(field_get:PBLLAInfo.latitude)
  return latitude_;
}
void PBLLAInfo::set_latitude(double value) {

  latitude_ = value;
  // @@protoc_insertion_point(field_set:PBLLAInfo.latitude)
}

// double longitude = 2;
void PBLLAInfo::clear_longitude() {
  longitude_ = 0;
}
double PBLLAInfo::longitude() const {
  // @@protoc_insertion_point(field_get:PBLLAInfo.longitude)
  return longitude_;
}
void PBLLAInfo::set_longitude(double value) {

  longitude_ = value;
  // @@protoc_insertion_point(field_set:PBLLAInfo.longitude)
}

// float altitude = 3;
void PBLLAInfo::clear_altitude() {
  altitude_ = 0;
}
float PBLLAInfo::altitude() const {
  // @@protoc_insertion_point(field_get:PBLLAInfo.altitude)
  return altitude_;
}
void PBLLAInfo::set_altitude(float value) {

  altitude_ = value;
  // @@protoc_insertion_point(field_set:PBLLAInfo.altitude)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PBLeapSecondSystemInfo::kLeapSecondInfoMaskFieldNumber;
const int PBLeapSecondSystemInfo::kLeapSecondCurrentFieldNumber;
const int PBLeapSecondSystemInfo::kLeapSecondChangeInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PBLeapSecondSystemInfo::PBLeapSecondSystemInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_LocationApiDataTypes_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBLeapSecondSystemInfo)
}
PBLeapSecondSystemInfo::PBLeapSecondSystemInfo(const PBLeapSecondSystemInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_leapsecondchangeinfo()) {
    leapsecondchangeinfo_ = new ::PBLeapSecondChangeInfo(*from.leapsecondchangeinfo_);
  } else {
    leapsecondchangeinfo_ = NULL;
  }
  ::memcpy(&leapsecondinfomask_, &from.leapsecondinfomask_,
    reinterpret_cast<char*>(&leapsecondcurrent_) -
    reinterpret_cast<char*>(&leapsecondinfomask_) + sizeof(leapsecondcurrent_));
  // @@protoc_insertion_point(copy_constructor:PBLeapSecondSystemInfo)
}

void PBLeapSecondSystemInfo::SharedCtor() {
  ::memset(&leapsecondchangeinfo_, 0, reinterpret_cast<char*>(&leapsecondcurrent_) -
    reinterpret_cast<char*>(&leapsecondchangeinfo_) + sizeof(leapsecondcurrent_));
  _cached_size_ = 0;
}

PBLeapSecondSystemInfo::~PBLeapSecondSystemInfo() {
  // @@protoc_insertion_point(destructor:PBLeapSecondSystemInfo)
  SharedDtor();
}

void PBLeapSecondSystemInfo::SharedDtor() {
  if (this != internal_default_instance()) {
    delete leapsecondchangeinfo_;
  }
}

void PBLeapSecondSystemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBLeapSecondSystemInfo::descriptor() {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PBLeapSecondSystemInfo& PBLeapSecondSystemInfo::default_instance() {
  protobuf_LocationApiDataTypes_2eproto::InitDefaults();
  return *internal_default_instance();
}

PBLeapSecondSystemInfo* PBLeapSecondSystemInfo::New(::google::protobuf::Arena* arena) const {
  PBLeapSecondSystemInfo* n = new PBLeapSecondSystemInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBLeapSecondSystemInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PBLeapSecondSystemInfo)
  if (GetArenaNoVirtual() == NULL && leapsecondchangeinfo_ != NULL) {
    delete leapsecondchangeinfo_;
  }
  leapsecondchangeinfo_ = NULL;
  ::memset(&leapsecondinfomask_, 0, reinterpret_cast<char*>(&leapsecondcurrent_) -
    reinterpret_cast<char*>(&leapsecondinfomask_) + sizeof(leapsecondcurrent_));
}

bool PBLeapSecondSystemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBLeapSecondSystemInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 leapSecondInfoMask = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leapsecondinfomask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 leapSecondCurrent = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leapsecondcurrent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .PBLeapSecondChangeInfo leapSecondChangeInfo = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_leapsecondchangeinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBLeapSecondSystemInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBLeapSecondSystemInfo)
  return false;
#undef DO_
}

void PBLeapSecondSystemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBLeapSecondSystemInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 leapSecondInfoMask = 1;
  if (this->leapsecondinfomask() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->leapsecondinfomask(), output);
  }

  // uint32 leapSecondCurrent = 2;
  if (this->leapsecondcurrent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->leapsecondcurrent(), output);
  }

  // .PBLeapSecondChangeInfo leapSecondChangeInfo = 3;
  if (this->has_leapsecondchangeinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->leapsecondchangeinfo_, output);
  }

  // @@protoc_insertion_point(serialize_end:PBLeapSecondSystemInfo)
}

::google::protobuf::uint8* PBLeapSecondSystemInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBLeapSecondSystemInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 leapSecondInfoMask = 1;
  if (this->leapsecondinfomask() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->leapsecondinfomask(), target);
  }

  // uint32 leapSecondCurrent = 2;
  if (this->leapsecondcurrent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->leapsecondcurrent(), target);
  }

  // .PBLeapSecondChangeInfo leapSecondChangeInfo = 3;
  if (this->has_leapsecondchangeinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->leapsecondchangeinfo_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PBLeapSecondSystemInfo)
  return target;
}

size_t PBLeapSecondSystemInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBLeapSecondSystemInfo)
  size_t total_size = 0;

  // .PBLeapSecondChangeInfo leapSecondChangeInfo = 3;
  if (this->has_leapsecondchangeinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->leapsecondchangeinfo_);
  }

  // uint32 leapSecondInfoMask = 1;
  if (this->leapsecondinfomask() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->leapsecondinfomask());
  }

  // uint32 leapSecondCurrent = 2;
  if (this->leapsecondcurrent() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->leapsecondcurrent());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBLeapSecondSystemInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PBLeapSecondSystemInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PBLeapSecondSystemInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PBLeapSecondSystemInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PBLeapSecondSystemInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PBLeapSecondSystemInfo)
    MergeFrom(*source);
  }
}

void PBLeapSecondSystemInfo::MergeFrom(const PBLeapSecondSystemInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBLeapSecondSystemInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_leapsecondchangeinfo()) {
    mutable_leapsecondchangeinfo()->::PBLeapSecondChangeInfo::MergeFrom(from.leapsecondchangeinfo());
  }
  if (from.leapsecondinfomask() != 0) {
    set_leapsecondinfomask(from.leapsecondinfomask());
  }
  if (from.leapsecondcurrent() != 0) {
    set_leapsecondcurrent(from.leapsecondcurrent());
  }
}

void PBLeapSecondSystemInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PBLeapSecondSystemInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBLeapSecondSystemInfo::CopyFrom(const PBLeapSecondSystemInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBLeapSecondSystemInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBLeapSecondSystemInfo::IsInitialized() const {
  return true;
}

void PBLeapSecondSystemInfo::Swap(PBLeapSecondSystemInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBLeapSecondSystemInfo::InternalSwap(PBLeapSecondSystemInfo* other) {
  std::swap(leapsecondchangeinfo_, other->leapsecondchangeinfo_);
  std::swap(leapsecondinfomask_, other->leapsecondinfomask_);
  std::swap(leapsecondcurrent_, other->leapsecondcurrent_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PBLeapSecondSystemInfo::GetMetadata() const {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PBLeapSecondSystemInfo

// uint32 leapSecondInfoMask = 1;
void PBLeapSecondSystemInfo::clear_leapsecondinfomask() {
  leapsecondinfomask_ = 0u;
}
::google::protobuf::uint32 PBLeapSecondSystemInfo::leapsecondinfomask() const {
  // @@protoc_insertion_point(field_get:PBLeapSecondSystemInfo.leapSecondInfoMask)
  return leapsecondinfomask_;
}
void PBLeapSecondSystemInfo::set_leapsecondinfomask(::google::protobuf::uint32 value) {

  leapsecondinfomask_ = value;
  // @@protoc_insertion_point(field_set:PBLeapSecondSystemInfo.leapSecondInfoMask)
}

// uint32 leapSecondCurrent = 2;
void PBLeapSecondSystemInfo::clear_leapsecondcurrent() {
  leapsecondcurrent_ = 0u;
}
::google::protobuf::uint32 PBLeapSecondSystemInfo::leapsecondcurrent() const {
  // @@protoc_insertion_point(field_get:PBLeapSecondSystemInfo.leapSecondCurrent)
  return leapsecondcurrent_;
}
void PBLeapSecondSystemInfo::set_leapsecondcurrent(::google::protobuf::uint32 value) {

  leapsecondcurrent_ = value;
  // @@protoc_insertion_point(field_set:PBLeapSecondSystemInfo.leapSecondCurrent)
}

// .PBLeapSecondChangeInfo leapSecondChangeInfo = 3;
bool PBLeapSecondSystemInfo::has_leapsecondchangeinfo() const {
  return this != internal_default_instance() && leapsecondchangeinfo_ != NULL;
}
void PBLeapSecondSystemInfo::clear_leapsecondchangeinfo() {
  if (GetArenaNoVirtual() == NULL && leapsecondchangeinfo_ != NULL) delete leapsecondchangeinfo_;
  leapsecondchangeinfo_ = NULL;
}
const ::PBLeapSecondChangeInfo& PBLeapSecondSystemInfo::leapsecondchangeinfo() const {
  // @@protoc_insertion_point(field_get:PBLeapSecondSystemInfo.leapSecondChangeInfo)
  return leapsecondchangeinfo_ != NULL ? *leapsecondchangeinfo_
                         : *::PBLeapSecondChangeInfo::internal_default_instance();
}
::PBLeapSecondChangeInfo* PBLeapSecondSystemInfo::mutable_leapsecondchangeinfo() {

  if (leapsecondchangeinfo_ == NULL) {
    leapsecondchangeinfo_ = new ::PBLeapSecondChangeInfo;
  }
  // @@protoc_insertion_point(field_mutable:PBLeapSecondSystemInfo.leapSecondChangeInfo)
  return leapsecondchangeinfo_;
}
::PBLeapSecondChangeInfo* PBLeapSecondSystemInfo::release_leapsecondchangeinfo() {
  // @@protoc_insertion_point(field_release:PBLeapSecondSystemInfo.leapSecondChangeInfo)

  ::PBLeapSecondChangeInfo* temp = leapsecondchangeinfo_;
  leapsecondchangeinfo_ = NULL;
  return temp;
}
void PBLeapSecondSystemInfo::set_allocated_leapsecondchangeinfo(::PBLeapSecondChangeInfo* leapsecondchangeinfo) {
  delete leapsecondchangeinfo_;
  leapsecondchangeinfo_ = leapsecondchangeinfo;
  if (leapsecondchangeinfo) {

  } else {

  }
  // @@protoc_insertion_point(field_set_allocated:PBLeapSecondSystemInfo.leapSecondChangeInfo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PBLeapSecondChangeInfo::kGpsTimestampLsChangeFieldNumber;
const int PBLeapSecondChangeInfo::kLeapSecondsBeforeChangeFieldNumber;
const int PBLeapSecondChangeInfo::kLeapSecondsAfterChangeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PBLeapSecondChangeInfo::PBLeapSecondChangeInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_LocationApiDataTypes_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBLeapSecondChangeInfo)
}
PBLeapSecondChangeInfo::PBLeapSecondChangeInfo(const PBLeapSecondChangeInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_gpstimestamplschange()) {
    gpstimestamplschange_ = new ::PBLocApiGnssSystemTimeStructType(*from.gpstimestamplschange_);
  } else {
    gpstimestamplschange_ = NULL;
  }
  ::memcpy(&leapsecondsbeforechange_, &from.leapsecondsbeforechange_,
    reinterpret_cast<char*>(&leapsecondsafterchange_) -
    reinterpret_cast<char*>(&leapsecondsbeforechange_) + sizeof(leapsecondsafterchange_));
  // @@protoc_insertion_point(copy_constructor:PBLeapSecondChangeInfo)
}

void PBLeapSecondChangeInfo::SharedCtor() {
  ::memset(&gpstimestamplschange_, 0, reinterpret_cast<char*>(&leapsecondsafterchange_) -
    reinterpret_cast<char*>(&gpstimestamplschange_) + sizeof(leapsecondsafterchange_));
  _cached_size_ = 0;
}

PBLeapSecondChangeInfo::~PBLeapSecondChangeInfo() {
  // @@protoc_insertion_point(destructor:PBLeapSecondChangeInfo)
  SharedDtor();
}

void PBLeapSecondChangeInfo::SharedDtor() {
  if (this != internal_default_instance()) {
    delete gpstimestamplschange_;
  }
}

void PBLeapSecondChangeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBLeapSecondChangeInfo::descriptor() {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PBLeapSecondChangeInfo& PBLeapSecondChangeInfo::default_instance() {
  protobuf_LocationApiDataTypes_2eproto::InitDefaults();
  return *internal_default_instance();
}

PBLeapSecondChangeInfo* PBLeapSecondChangeInfo::New(::google::protobuf::Arena* arena) const {
  PBLeapSecondChangeInfo* n = new PBLeapSecondChangeInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBLeapSecondChangeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PBLeapSecondChangeInfo)
  if (GetArenaNoVirtual() == NULL && gpstimestamplschange_ != NULL) {
    delete gpstimestamplschange_;
  }
  gpstimestamplschange_ = NULL;
  ::memset(&leapsecondsbeforechange_, 0, reinterpret_cast<char*>(&leapsecondsafterchange_) -
    reinterpret_cast<char*>(&leapsecondsbeforechange_) + sizeof(leapsecondsafterchange_));
}

bool PBLeapSecondChangeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBLeapSecondChangeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .PBLocApiGnssSystemTimeStructType gpsTimestampLsChange = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gpstimestamplschange()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 leapSecondsBeforeChange = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leapsecondsbeforechange_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 leapSecondsAfterChange = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leapsecondsafterchange_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBLeapSecondChangeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBLeapSecondChangeInfo)
  return false;
#undef DO_
}

void PBLeapSecondChangeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBLeapSecondChangeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .PBLocApiGnssSystemTimeStructType gpsTimestampLsChange = 1;
  if (this->has_gpstimestamplschange()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->gpstimestamplschange_, output);
  }

  // uint32 leapSecondsBeforeChange = 2;
  if (this->leapsecondsbeforechange() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->leapsecondsbeforechange(), output);
  }

  // uint32 leapSecondsAfterChange = 3;
  if (this->leapsecondsafterchange() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->leapsecondsafterchange(), output);
  }

  // @@protoc_insertion_point(serialize_end:PBLeapSecondChangeInfo)
}

::google::protobuf::uint8* PBLeapSecondChangeInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBLeapSecondChangeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .PBLocApiGnssSystemTimeStructType gpsTimestampLsChange = 1;
  if (this->has_gpstimestamplschange()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->gpstimestamplschange_, deterministic, target);
  }

  // uint32 leapSecondsBeforeChange = 2;
  if (this->leapsecondsbeforechange() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->leapsecondsbeforechange(), target);
  }

  // uint32 leapSecondsAfterChange = 3;
  if (this->leapsecondsafterchange() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->leapsecondsafterchange(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PBLeapSecondChangeInfo)
  return target;
}

size_t PBLeapSecondChangeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBLeapSecondChangeInfo)
  size_t total_size = 0;

  // .PBLocApiGnssSystemTimeStructType gpsTimestampLsChange = 1;
  if (this->has_gpstimestamplschange()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->gpstimestamplschange_);
  }

  // uint32 leapSecondsBeforeChange = 2;
  if (this->leapsecondsbeforechange() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->leapsecondsbeforechange());
  }

  // uint32 leapSecondsAfterChange = 3;
  if (this->leapsecondsafterchange() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->leapsecondsafterchange());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBLeapSecondChangeInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PBLeapSecondChangeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PBLeapSecondChangeInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PBLeapSecondChangeInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PBLeapSecondChangeInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PBLeapSecondChangeInfo)
    MergeFrom(*source);
  }
}

void PBLeapSecondChangeInfo::MergeFrom(const PBLeapSecondChangeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBLeapSecondChangeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_gpstimestamplschange()) {
    mutable_gpstimestamplschange()->::PBLocApiGnssSystemTimeStructType::MergeFrom(from.gpstimestamplschange());
  }
  if (from.leapsecondsbeforechange() != 0) {
    set_leapsecondsbeforechange(from.leapsecondsbeforechange());
  }
  if (from.leapsecondsafterchange() != 0) {
    set_leapsecondsafterchange(from.leapsecondsafterchange());
  }
}

void PBLeapSecondChangeInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PBLeapSecondChangeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBLeapSecondChangeInfo::CopyFrom(const PBLeapSecondChangeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBLeapSecondChangeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBLeapSecondChangeInfo::IsInitialized() const {
  return true;
}

void PBLeapSecondChangeInfo::Swap(PBLeapSecondChangeInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBLeapSecondChangeInfo::InternalSwap(PBLeapSecondChangeInfo* other) {
  std::swap(gpstimestamplschange_, other->gpstimestamplschange_);
  std::swap(leapsecondsbeforechange_, other->leapsecondsbeforechange_);
  std::swap(leapsecondsafterchange_, other->leapsecondsafterchange_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PBLeapSecondChangeInfo::GetMetadata() const {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PBLeapSecondChangeInfo

// .PBLocApiGnssSystemTimeStructType gpsTimestampLsChange = 1;
bool PBLeapSecondChangeInfo::has_gpstimestamplschange() const {
  return this != internal_default_instance() && gpstimestamplschange_ != NULL;
}
void PBLeapSecondChangeInfo::clear_gpstimestamplschange() {
  if (GetArenaNoVirtual() == NULL && gpstimestamplschange_ != NULL) delete gpstimestamplschange_;
  gpstimestamplschange_ = NULL;
}
const ::PBLocApiGnssSystemTimeStructType& PBLeapSecondChangeInfo::gpstimestamplschange() const {
  // @@protoc_insertion_point(field_get:PBLeapSecondChangeInfo.gpsTimestampLsChange)
  return gpstimestamplschange_ != NULL ? *gpstimestamplschange_
                         : *::PBLocApiGnssSystemTimeStructType::internal_default_instance();
}
::PBLocApiGnssSystemTimeStructType* PBLeapSecondChangeInfo::mutable_gpstimestamplschange() {

  if (gpstimestamplschange_ == NULL) {
    gpstimestamplschange_ = new ::PBLocApiGnssSystemTimeStructType;
  }
  // @@protoc_insertion_point(field_mutable:PBLeapSecondChangeInfo.gpsTimestampLsChange)
  return gpstimestamplschange_;
}
::PBLocApiGnssSystemTimeStructType* PBLeapSecondChangeInfo::release_gpstimestamplschange() {
  // @@protoc_insertion_point(field_release:PBLeapSecondChangeInfo.gpsTimestampLsChange)

  ::PBLocApiGnssSystemTimeStructType* temp = gpstimestamplschange_;
  gpstimestamplschange_ = NULL;
  return temp;
}
void PBLeapSecondChangeInfo::set_allocated_gpstimestamplschange(::PBLocApiGnssSystemTimeStructType* gpstimestamplschange) {
  delete gpstimestamplschange_;
  gpstimestamplschange_ = gpstimestamplschange;
  if (gpstimestamplschange) {

  } else {

  }
  // @@protoc_insertion_point(field_set_allocated:PBLeapSecondChangeInfo.gpsTimestampLsChange)
}

// uint32 leapSecondsBeforeChange = 2;
void PBLeapSecondChangeInfo::clear_leapsecondsbeforechange() {
  leapsecondsbeforechange_ = 0u;
}
::google::protobuf::uint32 PBLeapSecondChangeInfo::leapsecondsbeforechange() const {
  // @@protoc_insertion_point(field_get:PBLeapSecondChangeInfo.leapSecondsBeforeChange)
  return leapsecondsbeforechange_;
}
void PBLeapSecondChangeInfo::set_leapsecondsbeforechange(::google::protobuf::uint32 value) {

  leapsecondsbeforechange_ = value;
  // @@protoc_insertion_point(field_set:PBLeapSecondChangeInfo.leapSecondsBeforeChange)
}

// uint32 leapSecondsAfterChange = 3;
void PBLeapSecondChangeInfo::clear_leapsecondsafterchange() {
  leapsecondsafterchange_ = 0u;
}
::google::protobuf::uint32 PBLeapSecondChangeInfo::leapsecondsafterchange() const {
  // @@protoc_insertion_point(field_get:PBLeapSecondChangeInfo.leapSecondsAfterChange)
  return leapsecondsafterchange_;
}
void PBLeapSecondChangeInfo::set_leapsecondsafterchange(::google::protobuf::uint32 value) {

  leapsecondsafterchange_ = value;
  // @@protoc_insertion_point(field_set:PBLeapSecondChangeInfo.leapSecondsAfterChange)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PBLocationSystemInfo::kSystemInfoMaskFieldNumber;
const int PBLocationSystemInfo::kLeapSecondSysInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PBLocationSystemInfo::PBLocationSystemInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_LocationApiDataTypes_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBLocationSystemInfo)
}
PBLocationSystemInfo::PBLocationSystemInfo(const PBLocationSystemInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_leapsecondsysinfo()) {
    leapsecondsysinfo_ = new ::PBLeapSecondSystemInfo(*from.leapsecondsysinfo_);
  } else {
    leapsecondsysinfo_ = NULL;
  }
  systeminfomask_ = from.systeminfomask_;
  // @@protoc_insertion_point(copy_constructor:PBLocationSystemInfo)
}

void PBLocationSystemInfo::SharedCtor() {
  ::memset(&leapsecondsysinfo_, 0, reinterpret_cast<char*>(&systeminfomask_) -
    reinterpret_cast<char*>(&leapsecondsysinfo_) + sizeof(systeminfomask_));
  _cached_size_ = 0;
}

PBLocationSystemInfo::~PBLocationSystemInfo() {
  // @@protoc_insertion_point(destructor:PBLocationSystemInfo)
  SharedDtor();
}

void PBLocationSystemInfo::SharedDtor() {
  if (this != internal_default_instance()) {
    delete leapsecondsysinfo_;
  }
}

void PBLocationSystemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBLocationSystemInfo::descriptor() {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PBLocationSystemInfo& PBLocationSystemInfo::default_instance() {
  protobuf_LocationApiDataTypes_2eproto::InitDefaults();
  return *internal_default_instance();
}

PBLocationSystemInfo* PBLocationSystemInfo::New(::google::protobuf::Arena* arena) const {
  PBLocationSystemInfo* n = new PBLocationSystemInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBLocationSystemInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PBLocationSystemInfo)
  if (GetArenaNoVirtual() == NULL && leapsecondsysinfo_ != NULL) {
    delete leapsecondsysinfo_;
  }
  leapsecondsysinfo_ = NULL;
  systeminfomask_ = 0u;
}

bool PBLocationSystemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBLocationSystemInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 systemInfoMask = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &systeminfomask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .PBLeapSecondSystemInfo leapSecondSysInfo = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_leapsecondsysinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBLocationSystemInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBLocationSystemInfo)
  return false;
#undef DO_
}

void PBLocationSystemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBLocationSystemInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 systemInfoMask = 1;
  if (this->systeminfomask() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->systeminfomask(), output);
  }

  // .PBLeapSecondSystemInfo leapSecondSysInfo = 2;
  if (this->has_leapsecondsysinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->leapsecondsysinfo_, output);
  }

  // @@protoc_insertion_point(serialize_end:PBLocationSystemInfo)
}

::google::protobuf::uint8* PBLocationSystemInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBLocationSystemInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 systemInfoMask = 1;
  if (this->systeminfomask() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->systeminfomask(), target);
  }

  // .PBLeapSecondSystemInfo leapSecondSysInfo = 2;
  if (this->has_leapsecondsysinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->leapsecondsysinfo_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PBLocationSystemInfo)
  return target;
}

size_t PBLocationSystemInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBLocationSystemInfo)
  size_t total_size = 0;

  // .PBLeapSecondSystemInfo leapSecondSysInfo = 2;
  if (this->has_leapsecondsysinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->leapsecondsysinfo_);
  }

  // uint32 systemInfoMask = 1;
  if (this->systeminfomask() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->systeminfomask());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBLocationSystemInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PBLocationSystemInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PBLocationSystemInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PBLocationSystemInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PBLocationSystemInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PBLocationSystemInfo)
    MergeFrom(*source);
  }
}

void PBLocationSystemInfo::MergeFrom(const PBLocationSystemInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBLocationSystemInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_leapsecondsysinfo()) {
    mutable_leapsecondsysinfo()->::PBLeapSecondSystemInfo::MergeFrom(from.leapsecondsysinfo());
  }
  if (from.systeminfomask() != 0) {
    set_systeminfomask(from.systeminfomask());
  }
}

void PBLocationSystemInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PBLocationSystemInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBLocationSystemInfo::CopyFrom(const PBLocationSystemInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBLocationSystemInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBLocationSystemInfo::IsInitialized() const {
  return true;
}

void PBLocationSystemInfo::Swap(PBLocationSystemInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBLocationSystemInfo::InternalSwap(PBLocationSystemInfo* other) {
  std::swap(leapsecondsysinfo_, other->leapsecondsysinfo_);
  std::swap(systeminfomask_, other->systeminfomask_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PBLocationSystemInfo::GetMetadata() const {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PBLocationSystemInfo

// uint32 systemInfoMask = 1;
void PBLocationSystemInfo::clear_systeminfomask() {
  systeminfomask_ = 0u;
}
::google::protobuf::uint32 PBLocationSystemInfo::systeminfomask() const {
  // @@protoc_insertion_point(field_get:PBLocationSystemInfo.systemInfoMask)
  return systeminfomask_;
}
void PBLocationSystemInfo::set_systeminfomask(::google::protobuf::uint32 value) {

  systeminfomask_ = value;
  // @@protoc_insertion_point(field_set:PBLocationSystemInfo.systemInfoMask)
}

// .PBLeapSecondSystemInfo leapSecondSysInfo = 2;
bool PBLocationSystemInfo::has_leapsecondsysinfo() const {
  return this != internal_default_instance() && leapsecondsysinfo_ != NULL;
}
void PBLocationSystemInfo::clear_leapsecondsysinfo() {
  if (GetArenaNoVirtual() == NULL && leapsecondsysinfo_ != NULL) delete leapsecondsysinfo_;
  leapsecondsysinfo_ = NULL;
}
const ::PBLeapSecondSystemInfo& PBLocationSystemInfo::leapsecondsysinfo() const {
  // @@protoc_insertion_point(field_get:PBLocationSystemInfo.leapSecondSysInfo)
  return leapsecondsysinfo_ != NULL ? *leapsecondsysinfo_
                         : *::PBLeapSecondSystemInfo::internal_default_instance();
}
::PBLeapSecondSystemInfo* PBLocationSystemInfo::mutable_leapsecondsysinfo() {

  if (leapsecondsysinfo_ == NULL) {
    leapsecondsysinfo_ = new ::PBLeapSecondSystemInfo;
  }
  // @@protoc_insertion_point(field_mutable:PBLocationSystemInfo.leapSecondSysInfo)
  return leapsecondsysinfo_;
}
::PBLeapSecondSystemInfo* PBLocationSystemInfo::release_leapsecondsysinfo() {
  // @@protoc_insertion_point(field_release:PBLocationSystemInfo.leapSecondSysInfo)

  ::PBLeapSecondSystemInfo* temp = leapsecondsysinfo_;
  leapsecondsysinfo_ = NULL;
  return temp;
}
void PBLocationSystemInfo::set_allocated_leapsecondsysinfo(::PBLeapSecondSystemInfo* leapsecondsysinfo) {
  delete leapsecondsysinfo_;
  leapsecondsysinfo_ = leapsecondsysinfo;
  if (leapsecondsysinfo) {

  } else {

  }
  // @@protoc_insertion_point(field_set_allocated:PBLocationSystemInfo.leapSecondSysInfo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PBGnssConfigRobustLocationVersion::kMajorFieldNumber;
const int PBGnssConfigRobustLocationVersion::kMinorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PBGnssConfigRobustLocationVersion::PBGnssConfigRobustLocationVersion()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_LocationApiDataTypes_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBGnssConfigRobustLocationVersion)
}
PBGnssConfigRobustLocationVersion::PBGnssConfigRobustLocationVersion(const PBGnssConfigRobustLocationVersion& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&major_, &from.major_,
    reinterpret_cast<char*>(&minor_) -
    reinterpret_cast<char*>(&major_) + sizeof(minor_));
  // @@protoc_insertion_point(copy_constructor:PBGnssConfigRobustLocationVersion)
}

void PBGnssConfigRobustLocationVersion::SharedCtor() {
  ::memset(&major_, 0, reinterpret_cast<char*>(&minor_) -
    reinterpret_cast<char*>(&major_) + sizeof(minor_));
  _cached_size_ = 0;
}

PBGnssConfigRobustLocationVersion::~PBGnssConfigRobustLocationVersion() {
  // @@protoc_insertion_point(destructor:PBGnssConfigRobustLocationVersion)
  SharedDtor();
}

void PBGnssConfigRobustLocationVersion::SharedDtor() {
}

void PBGnssConfigRobustLocationVersion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBGnssConfigRobustLocationVersion::descriptor() {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PBGnssConfigRobustLocationVersion& PBGnssConfigRobustLocationVersion::default_instance() {
  protobuf_LocationApiDataTypes_2eproto::InitDefaults();
  return *internal_default_instance();
}

PBGnssConfigRobustLocationVersion* PBGnssConfigRobustLocationVersion::New(::google::protobuf::Arena* arena) const {
  PBGnssConfigRobustLocationVersion* n = new PBGnssConfigRobustLocationVersion;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBGnssConfigRobustLocationVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:PBGnssConfigRobustLocationVersion)
  ::memset(&major_, 0, reinterpret_cast<char*>(&minor_) -
    reinterpret_cast<char*>(&major_) + sizeof(minor_));
}

bool PBGnssConfigRobustLocationVersion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBGnssConfigRobustLocationVersion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 major = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &major_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 minor = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBGnssConfigRobustLocationVersion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBGnssConfigRobustLocationVersion)
  return false;
#undef DO_
}

void PBGnssConfigRobustLocationVersion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBGnssConfigRobustLocationVersion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 major = 1;
  if (this->major() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->major(), output);
  }

  // uint32 minor = 2;
  if (this->minor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->minor(), output);
  }

  // @@protoc_insertion_point(serialize_end:PBGnssConfigRobustLocationVersion)
}

::google::protobuf::uint8* PBGnssConfigRobustLocationVersion::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBGnssConfigRobustLocationVersion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 major = 1;
  if (this->major() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->major(), target);
  }

  // uint32 minor = 2;
  if (this->minor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->minor(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PBGnssConfigRobustLocationVersion)
  return target;
}

size_t PBGnssConfigRobustLocationVersion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBGnssConfigRobustLocationVersion)
  size_t total_size = 0;

  // uint32 major = 1;
  if (this->major() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->major());
  }

  // uint32 minor = 2;
  if (this->minor() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->minor());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBGnssConfigRobustLocationVersion::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PBGnssConfigRobustLocationVersion)
  GOOGLE_DCHECK_NE(&from, this);
  const PBGnssConfigRobustLocationVersion* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PBGnssConfigRobustLocationVersion>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PBGnssConfigRobustLocationVersion)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PBGnssConfigRobustLocationVersion)
    MergeFrom(*source);
  }
}

void PBGnssConfigRobustLocationVersion::MergeFrom(const PBGnssConfigRobustLocationVersion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBGnssConfigRobustLocationVersion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.major() != 0) {
    set_major(from.major());
  }
  if (from.minor() != 0) {
    set_minor(from.minor());
  }
}

void PBGnssConfigRobustLocationVersion::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PBGnssConfigRobustLocationVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBGnssConfigRobustLocationVersion::CopyFrom(const PBGnssConfigRobustLocationVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBGnssConfigRobustLocationVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBGnssConfigRobustLocationVersion::IsInitialized() const {
  return true;
}

void PBGnssConfigRobustLocationVersion::Swap(PBGnssConfigRobustLocationVersion* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBGnssConfigRobustLocationVersion::InternalSwap(PBGnssConfigRobustLocationVersion* other) {
  std::swap(major_, other->major_);
  std::swap(minor_, other->minor_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PBGnssConfigRobustLocationVersion::GetMetadata() const {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PBGnssConfigRobustLocationVersion

// uint32 major = 1;
void PBGnssConfigRobustLocationVersion::clear_major() {
  major_ = 0u;
}
::google::protobuf::uint32 PBGnssConfigRobustLocationVersion::major() const {
  // @@protoc_insertion_point(field_get:PBGnssConfigRobustLocationVersion.major)
  return major_;
}
void PBGnssConfigRobustLocationVersion::set_major(::google::protobuf::uint32 value) {

  major_ = value;
  // @@protoc_insertion_point(field_set:PBGnssConfigRobustLocationVersion.major)
}

// uint32 minor = 2;
void PBGnssConfigRobustLocationVersion::clear_minor() {
  minor_ = 0u;
}
::google::protobuf::uint32 PBGnssConfigRobustLocationVersion::minor() const {
  // @@protoc_insertion_point(field_get:PBGnssConfigRobustLocationVersion.minor)
  return minor_;
}
void PBGnssConfigRobustLocationVersion::set_minor(::google::protobuf::uint32 value) {

  minor_ = value;
  // @@protoc_insertion_point(field_set:PBGnssConfigRobustLocationVersion.minor)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PBGnssConfigRobustLocation::kValidMaskFieldNumber;
const int PBGnssConfigRobustLocation::kEnabledFieldNumber;
const int PBGnssConfigRobustLocation::kEnabledForE911FieldNumber;
const int PBGnssConfigRobustLocation::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PBGnssConfigRobustLocation::PBGnssConfigRobustLocation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_LocationApiDataTypes_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBGnssConfigRobustLocation)
}
PBGnssConfigRobustLocation::PBGnssConfigRobustLocation(const PBGnssConfigRobustLocation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_version()) {
    version_ = new ::PBGnssConfigRobustLocationVersion(*from.version_);
  } else {
    version_ = NULL;
  }
  ::memcpy(&validmask_, &from.validmask_,
    reinterpret_cast<char*>(&enabledfore911_) -
    reinterpret_cast<char*>(&validmask_) + sizeof(enabledfore911_));
  // @@protoc_insertion_point(copy_constructor:PBGnssConfigRobustLocation)
}

void PBGnssConfigRobustLocation::SharedCtor() {
  ::memset(&version_, 0, reinterpret_cast<char*>(&enabledfore911_) -
    reinterpret_cast<char*>(&version_) + sizeof(enabledfore911_));
  _cached_size_ = 0;
}

PBGnssConfigRobustLocation::~PBGnssConfigRobustLocation() {
  // @@protoc_insertion_point(destructor:PBGnssConfigRobustLocation)
  SharedDtor();
}

void PBGnssConfigRobustLocation::SharedDtor() {
  if (this != internal_default_instance()) {
    delete version_;
  }
}

void PBGnssConfigRobustLocation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBGnssConfigRobustLocation::descriptor() {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PBGnssConfigRobustLocation& PBGnssConfigRobustLocation::default_instance() {
  protobuf_LocationApiDataTypes_2eproto::InitDefaults();
  return *internal_default_instance();
}

PBGnssConfigRobustLocation* PBGnssConfigRobustLocation::New(::google::protobuf::Arena* arena) const {
  PBGnssConfigRobustLocation* n = new PBGnssConfigRobustLocation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBGnssConfigRobustLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:PBGnssConfigRobustLocation)
  if (GetArenaNoVirtual() == NULL && version_ != NULL) {
    delete version_;
  }
  version_ = NULL;
  ::memset(&validmask_, 0, reinterpret_cast<char*>(&enabledfore911_) -
    reinterpret_cast<char*>(&validmask_) + sizeof(enabledfore911_));
}

bool PBGnssConfigRobustLocation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBGnssConfigRobustLocation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 validMask = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &validmask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool enabled = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool enabledForE911 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabledfore911_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .PBGnssConfigRobustLocationVersion version = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBGnssConfigRobustLocation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBGnssConfigRobustLocation)
  return false;
#undef DO_
}

void PBGnssConfigRobustLocation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBGnssConfigRobustLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 validMask = 1;
  if (this->validmask() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->validmask(), output);
  }

  // bool enabled = 2;
  if (this->enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->enabled(), output);
  }

  // bool enabledForE911 = 3;
  if (this->enabledfore911() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->enabledfore911(), output);
  }

  // .PBGnssConfigRobustLocationVersion version = 4;
  if (this->has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->version_, output);
  }

  // @@protoc_insertion_point(serialize_end:PBGnssConfigRobustLocation)
}

::google::protobuf::uint8* PBGnssConfigRobustLocation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBGnssConfigRobustLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 validMask = 1;
  if (this->validmask() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->validmask(), target);
  }

  // bool enabled = 2;
  if (this->enabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->enabled(), target);
  }

  // bool enabledForE911 = 3;
  if (this->enabledfore911() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->enabledfore911(), target);
  }

  // .PBGnssConfigRobustLocationVersion version = 4;
  if (this->has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->version_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PBGnssConfigRobustLocation)
  return target;
}

size_t PBGnssConfigRobustLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBGnssConfigRobustLocation)
  size_t total_size = 0;

  // .PBGnssConfigRobustLocationVersion version = 4;
  if (this->has_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->version_);
  }

  // uint32 validMask = 1;
  if (this->validmask() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->validmask());
  }

  // bool enabled = 2;
  if (this->enabled() != 0) {
    total_size += 1 + 1;
  }

  // bool enabledForE911 = 3;
  if (this->enabledfore911() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBGnssConfigRobustLocation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PBGnssConfigRobustLocation)
  GOOGLE_DCHECK_NE(&from, this);
  const PBGnssConfigRobustLocation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PBGnssConfigRobustLocation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PBGnssConfigRobustLocation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PBGnssConfigRobustLocation)
    MergeFrom(*source);
  }
}

void PBGnssConfigRobustLocation::MergeFrom(const PBGnssConfigRobustLocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBGnssConfigRobustLocation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_version()) {
    mutable_version()->::PBGnssConfigRobustLocationVersion::MergeFrom(from.version());
  }
  if (from.validmask() != 0) {
    set_validmask(from.validmask());
  }
  if (from.enabled() != 0) {
    set_enabled(from.enabled());
  }
  if (from.enabledfore911() != 0) {
    set_enabledfore911(from.enabledfore911());
  }
}

void PBGnssConfigRobustLocation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PBGnssConfigRobustLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBGnssConfigRobustLocation::CopyFrom(const PBGnssConfigRobustLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBGnssConfigRobustLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBGnssConfigRobustLocation::IsInitialized() const {
  return true;
}

void PBGnssConfigRobustLocation::Swap(PBGnssConfigRobustLocation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBGnssConfigRobustLocation::InternalSwap(PBGnssConfigRobustLocation* other) {
  std::swap(version_, other->version_);
  std::swap(validmask_, other->validmask_);
  std::swap(enabled_, other->enabled_);
  std::swap(enabledfore911_, other->enabledfore911_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PBGnssConfigRobustLocation::GetMetadata() const {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PBGnssConfigRobustLocation

// uint32 validMask = 1;
void PBGnssConfigRobustLocation::clear_validmask() {
  validmask_ = 0u;
}
::google::protobuf::uint32 PBGnssConfigRobustLocation::validmask() const {
  // @@protoc_insertion_point(field_get:PBGnssConfigRobustLocation.validMask)
  return validmask_;
}
void PBGnssConfigRobustLocation::set_validmask(::google::protobuf::uint32 value) {

  validmask_ = value;
  // @@protoc_insertion_point(field_set:PBGnssConfigRobustLocation.validMask)
}

// bool enabled = 2;
void PBGnssConfigRobustLocation::clear_enabled() {
  enabled_ = false;
}
bool PBGnssConfigRobustLocation::enabled() const {
  // @@protoc_insertion_point(field_get:PBGnssConfigRobustLocation.enabled)
  return enabled_;
}
void PBGnssConfigRobustLocation::set_enabled(bool value) {

  enabled_ = value;
  // @@protoc_insertion_point(field_set:PBGnssConfigRobustLocation.enabled)
}

// bool enabledForE911 = 3;
void PBGnssConfigRobustLocation::clear_enabledfore911() {
  enabledfore911_ = false;
}
bool PBGnssConfigRobustLocation::enabledfore911() const {
  // @@protoc_insertion_point(field_get:PBGnssConfigRobustLocation.enabledForE911)
  return enabledfore911_;
}
void PBGnssConfigRobustLocation::set_enabledfore911(bool value) {

  enabledfore911_ = value;
  // @@protoc_insertion_point(field_set:PBGnssConfigRobustLocation.enabledForE911)
}

// .PBGnssConfigRobustLocationVersion version = 4;
bool PBGnssConfigRobustLocation::has_version() const {
  return this != internal_default_instance() && version_ != NULL;
}
void PBGnssConfigRobustLocation::clear_version() {
  if (GetArenaNoVirtual() == NULL && version_ != NULL) delete version_;
  version_ = NULL;
}
const ::PBGnssConfigRobustLocationVersion& PBGnssConfigRobustLocation::version() const {
  // @@protoc_insertion_point(field_get:PBGnssConfigRobustLocation.version)
  return version_ != NULL ? *version_
                         : *::PBGnssConfigRobustLocationVersion::internal_default_instance();
}
::PBGnssConfigRobustLocationVersion* PBGnssConfigRobustLocation::mutable_version() {

  if (version_ == NULL) {
    version_ = new ::PBGnssConfigRobustLocationVersion;
  }
  // @@protoc_insertion_point(field_mutable:PBGnssConfigRobustLocation.version)
  return version_;
}
::PBGnssConfigRobustLocationVersion* PBGnssConfigRobustLocation::release_version() {
  // @@protoc_insertion_point(field_release:PBGnssConfigRobustLocation.version)

  ::PBGnssConfigRobustLocationVersion* temp = version_;
  version_ = NULL;
  return temp;
}
void PBGnssConfigRobustLocation::set_allocated_version(::PBGnssConfigRobustLocationVersion* version) {
  delete version_;
  version_ = version;
  if (version) {

  } else {

  }
  // @@protoc_insertion_point(field_set_allocated:PBGnssConfigRobustLocation.version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PBGnssSvTypeConfig::kEnabledSvTypesMaskFieldNumber;
const int PBGnssSvTypeConfig::kBlacklistedSvTypesMaskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PBGnssSvTypeConfig::PBGnssSvTypeConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_LocationApiDataTypes_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBGnssSvTypeConfig)
}
PBGnssSvTypeConfig::PBGnssSvTypeConfig(const PBGnssSvTypeConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&enabledsvtypesmask_, &from.enabledsvtypesmask_,
    reinterpret_cast<char*>(&blacklistedsvtypesmask_) -
    reinterpret_cast<char*>(&enabledsvtypesmask_) + sizeof(blacklistedsvtypesmask_));
  // @@protoc_insertion_point(copy_constructor:PBGnssSvTypeConfig)
}

void PBGnssSvTypeConfig::SharedCtor() {
  ::memset(&enabledsvtypesmask_, 0, reinterpret_cast<char*>(&blacklistedsvtypesmask_) -
    reinterpret_cast<char*>(&enabledsvtypesmask_) + sizeof(blacklistedsvtypesmask_));
  _cached_size_ = 0;
}

PBGnssSvTypeConfig::~PBGnssSvTypeConfig() {
  // @@protoc_insertion_point(destructor:PBGnssSvTypeConfig)
  SharedDtor();
}

void PBGnssSvTypeConfig::SharedDtor() {
}

void PBGnssSvTypeConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBGnssSvTypeConfig::descriptor() {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PBGnssSvTypeConfig& PBGnssSvTypeConfig::default_instance() {
  protobuf_LocationApiDataTypes_2eproto::InitDefaults();
  return *internal_default_instance();
}

PBGnssSvTypeConfig* PBGnssSvTypeConfig::New(::google::protobuf::Arena* arena) const {
  PBGnssSvTypeConfig* n = new PBGnssSvTypeConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBGnssSvTypeConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:PBGnssSvTypeConfig)
  ::memset(&enabledsvtypesmask_, 0, reinterpret_cast<char*>(&blacklistedsvtypesmask_) -
    reinterpret_cast<char*>(&enabledsvtypesmask_) + sizeof(blacklistedsvtypesmask_));
}

bool PBGnssSvTypeConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBGnssSvTypeConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 enabledSvTypesMask = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &enabledsvtypesmask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 blacklistedSvTypesMask = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &blacklistedsvtypesmask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBGnssSvTypeConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBGnssSvTypeConfig)
  return false;
#undef DO_
}

void PBGnssSvTypeConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBGnssSvTypeConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 enabledSvTypesMask = 1;
  if (this->enabledsvtypesmask() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->enabledsvtypesmask(), output);
  }

  // uint64 blacklistedSvTypesMask = 2;
  if (this->blacklistedsvtypesmask() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->blacklistedsvtypesmask(), output);
  }

  // @@protoc_insertion_point(serialize_end:PBGnssSvTypeConfig)
}

::google::protobuf::uint8* PBGnssSvTypeConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBGnssSvTypeConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 enabledSvTypesMask = 1;
  if (this->enabledsvtypesmask() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->enabledsvtypesmask(), target);
  }

  // uint64 blacklistedSvTypesMask = 2;
  if (this->blacklistedsvtypesmask() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->blacklistedsvtypesmask(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PBGnssSvTypeConfig)
  return target;
}

size_t PBGnssSvTypeConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBGnssSvTypeConfig)
  size_t total_size = 0;

  // uint64 enabledSvTypesMask = 1;
  if (this->enabledsvtypesmask() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->enabledsvtypesmask());
  }

  // uint64 blacklistedSvTypesMask = 2;
  if (this->blacklistedsvtypesmask() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->blacklistedsvtypesmask());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBGnssSvTypeConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PBGnssSvTypeConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PBGnssSvTypeConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PBGnssSvTypeConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PBGnssSvTypeConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PBGnssSvTypeConfig)
    MergeFrom(*source);
  }
}

void PBGnssSvTypeConfig::MergeFrom(const PBGnssSvTypeConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBGnssSvTypeConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.enabledsvtypesmask() != 0) {
    set_enabledsvtypesmask(from.enabledsvtypesmask());
  }
  if (from.blacklistedsvtypesmask() != 0) {
    set_blacklistedsvtypesmask(from.blacklistedsvtypesmask());
  }
}

void PBGnssSvTypeConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PBGnssSvTypeConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBGnssSvTypeConfig::CopyFrom(const PBGnssSvTypeConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBGnssSvTypeConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBGnssSvTypeConfig::IsInitialized() const {
  return true;
}

void PBGnssSvTypeConfig::Swap(PBGnssSvTypeConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBGnssSvTypeConfig::InternalSwap(PBGnssSvTypeConfig* other) {
  std::swap(enabledsvtypesmask_, other->enabledsvtypesmask_);
  std::swap(blacklistedsvtypesmask_, other->blacklistedsvtypesmask_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PBGnssSvTypeConfig::GetMetadata() const {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PBGnssSvTypeConfig

// uint64 enabledSvTypesMask = 1;
void PBGnssSvTypeConfig::clear_enabledsvtypesmask() {
  enabledsvtypesmask_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 PBGnssSvTypeConfig::enabledsvtypesmask() const {
  // @@protoc_insertion_point(field_get:PBGnssSvTypeConfig.enabledSvTypesMask)
  return enabledsvtypesmask_;
}
void PBGnssSvTypeConfig::set_enabledsvtypesmask(::google::protobuf::uint64 value) {

  enabledsvtypesmask_ = value;
  // @@protoc_insertion_point(field_set:PBGnssSvTypeConfig.enabledSvTypesMask)
}

// uint64 blacklistedSvTypesMask = 2;
void PBGnssSvTypeConfig::clear_blacklistedsvtypesmask() {
  blacklistedsvtypesmask_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 PBGnssSvTypeConfig::blacklistedsvtypesmask() const {
  // @@protoc_insertion_point(field_get:PBGnssSvTypeConfig.blacklistedSvTypesMask)
  return blacklistedsvtypesmask_;
}
void PBGnssSvTypeConfig::set_blacklistedsvtypesmask(::google::protobuf::uint64 value) {

  blacklistedsvtypesmask_ = value;
  // @@protoc_insertion_point(field_set:PBGnssSvTypeConfig.blacklistedSvTypesMask)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PBGnssSvIdConfig::kGloBlacklistSvMaskFieldNumber;
const int PBGnssSvIdConfig::kBdsBlacklistSvMaskFieldNumber;
const int PBGnssSvIdConfig::kQzssBlacklistSvMaskFieldNumber;
const int PBGnssSvIdConfig::kGalBlacklistSvMaskFieldNumber;
const int PBGnssSvIdConfig::kSbasBlacklistSvMaskFieldNumber;
const int PBGnssSvIdConfig::kNavicBlacklistSvMaskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PBGnssSvIdConfig::PBGnssSvIdConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_LocationApiDataTypes_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBGnssSvIdConfig)
}
PBGnssSvIdConfig::PBGnssSvIdConfig(const PBGnssSvIdConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&globlacklistsvmask_, &from.globlacklistsvmask_,
    reinterpret_cast<char*>(&navicblacklistsvmask_) -
    reinterpret_cast<char*>(&globlacklistsvmask_) + sizeof(navicblacklistsvmask_));
  // @@protoc_insertion_point(copy_constructor:PBGnssSvIdConfig)
}

void PBGnssSvIdConfig::SharedCtor() {
  ::memset(&globlacklistsvmask_, 0, reinterpret_cast<char*>(&navicblacklistsvmask_) -
    reinterpret_cast<char*>(&globlacklistsvmask_) + sizeof(navicblacklistsvmask_));
  _cached_size_ = 0;
}

PBGnssSvIdConfig::~PBGnssSvIdConfig() {
  // @@protoc_insertion_point(destructor:PBGnssSvIdConfig)
  SharedDtor();
}

void PBGnssSvIdConfig::SharedDtor() {
}

void PBGnssSvIdConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBGnssSvIdConfig::descriptor() {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PBGnssSvIdConfig& PBGnssSvIdConfig::default_instance() {
  protobuf_LocationApiDataTypes_2eproto::InitDefaults();
  return *internal_default_instance();
}

PBGnssSvIdConfig* PBGnssSvIdConfig::New(::google::protobuf::Arena* arena) const {
  PBGnssSvIdConfig* n = new PBGnssSvIdConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBGnssSvIdConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:PBGnssSvIdConfig)
  ::memset(&globlacklistsvmask_, 0, reinterpret_cast<char*>(&navicblacklistsvmask_) -
    reinterpret_cast<char*>(&globlacklistsvmask_) + sizeof(navicblacklistsvmask_));
}

bool PBGnssSvIdConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBGnssSvIdConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 gloBlacklistSvMask = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &globlacklistsvmask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 bdsBlacklistSvMask = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bdsblacklistsvmask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 qzssBlacklistSvMask = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &qzssblacklistsvmask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 galBlacklistSvMask = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &galblacklistsvmask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 sbasBlacklistSvMask = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sbasblacklistsvmask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 navicBlacklistSvMask = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &navicblacklistsvmask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBGnssSvIdConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBGnssSvIdConfig)
  return false;
#undef DO_
}

void PBGnssSvIdConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBGnssSvIdConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 gloBlacklistSvMask = 1;
  if (this->globlacklistsvmask() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->globlacklistsvmask(), output);
  }

  // uint64 bdsBlacklistSvMask = 2;
  if (this->bdsblacklistsvmask() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->bdsblacklistsvmask(), output);
  }

  // uint64 qzssBlacklistSvMask = 3;
  if (this->qzssblacklistsvmask() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->qzssblacklistsvmask(), output);
  }

  // uint64 galBlacklistSvMask = 4;
  if (this->galblacklistsvmask() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->galblacklistsvmask(), output);
  }

  // uint64 sbasBlacklistSvMask = 5;
  if (this->sbasblacklistsvmask() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->sbasblacklistsvmask(), output);
  }

  // uint64 navicBlacklistSvMask = 6;
  if (this->navicblacklistsvmask() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->navicblacklistsvmask(), output);
  }

  // @@protoc_insertion_point(serialize_end:PBGnssSvIdConfig)
}

::google::protobuf::uint8* PBGnssSvIdConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBGnssSvIdConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 gloBlacklistSvMask = 1;
  if (this->globlacklistsvmask() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->globlacklistsvmask(), target);
  }

  // uint64 bdsBlacklistSvMask = 2;
  if (this->bdsblacklistsvmask() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->bdsblacklistsvmask(), target);
  }

  // uint64 qzssBlacklistSvMask = 3;
  if (this->qzssblacklistsvmask() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->qzssblacklistsvmask(), target);
  }

  // uint64 galBlacklistSvMask = 4;
  if (this->galblacklistsvmask() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->galblacklistsvmask(), target);
  }

  // uint64 sbasBlacklistSvMask = 5;
  if (this->sbasblacklistsvmask() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->sbasblacklistsvmask(), target);
  }

  // uint64 navicBlacklistSvMask = 6;
  if (this->navicblacklistsvmask() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->navicblacklistsvmask(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PBGnssSvIdConfig)
  return target;
}

size_t PBGnssSvIdConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBGnssSvIdConfig)
  size_t total_size = 0;

  // uint64 gloBlacklistSvMask = 1;
  if (this->globlacklistsvmask() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->globlacklistsvmask());
  }

  // uint64 bdsBlacklistSvMask = 2;
  if (this->bdsblacklistsvmask() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->bdsblacklistsvmask());
  }

  // uint64 qzssBlacklistSvMask = 3;
  if (this->qzssblacklistsvmask() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->qzssblacklistsvmask());
  }

  // uint64 galBlacklistSvMask = 4;
  if (this->galblacklistsvmask() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->galblacklistsvmask());
  }

  // uint64 sbasBlacklistSvMask = 5;
  if (this->sbasblacklistsvmask() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->sbasblacklistsvmask());
  }

  // uint64 navicBlacklistSvMask = 6;
  if (this->navicblacklistsvmask() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->navicblacklistsvmask());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBGnssSvIdConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PBGnssSvIdConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PBGnssSvIdConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PBGnssSvIdConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PBGnssSvIdConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PBGnssSvIdConfig)
    MergeFrom(*source);
  }
}

void PBGnssSvIdConfig::MergeFrom(const PBGnssSvIdConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBGnssSvIdConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.globlacklistsvmask() != 0) {
    set_globlacklistsvmask(from.globlacklistsvmask());
  }
  if (from.bdsblacklistsvmask() != 0) {
    set_bdsblacklistsvmask(from.bdsblacklistsvmask());
  }
  if (from.qzssblacklistsvmask() != 0) {
    set_qzssblacklistsvmask(from.qzssblacklistsvmask());
  }
  if (from.galblacklistsvmask() != 0) {
    set_galblacklistsvmask(from.galblacklistsvmask());
  }
  if (from.sbasblacklistsvmask() != 0) {
    set_sbasblacklistsvmask(from.sbasblacklistsvmask());
  }
  if (from.navicblacklistsvmask() != 0) {
    set_navicblacklistsvmask(from.navicblacklistsvmask());
  }
}

void PBGnssSvIdConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PBGnssSvIdConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBGnssSvIdConfig::CopyFrom(const PBGnssSvIdConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBGnssSvIdConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBGnssSvIdConfig::IsInitialized() const {
  return true;
}

void PBGnssSvIdConfig::Swap(PBGnssSvIdConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBGnssSvIdConfig::InternalSwap(PBGnssSvIdConfig* other) {
  std::swap(globlacklistsvmask_, other->globlacklistsvmask_);
  std::swap(bdsblacklistsvmask_, other->bdsblacklistsvmask_);
  std::swap(qzssblacklistsvmask_, other->qzssblacklistsvmask_);
  std::swap(galblacklistsvmask_, other->galblacklistsvmask_);
  std::swap(sbasblacklistsvmask_, other->sbasblacklistsvmask_);
  std::swap(navicblacklistsvmask_, other->navicblacklistsvmask_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PBGnssSvIdConfig::GetMetadata() const {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PBGnssSvIdConfig

// uint64 gloBlacklistSvMask = 1;
void PBGnssSvIdConfig::clear_globlacklistsvmask() {
  globlacklistsvmask_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 PBGnssSvIdConfig::globlacklistsvmask() const {
  // @@protoc_insertion_point(field_get:PBGnssSvIdConfig.gloBlacklistSvMask)
  return globlacklistsvmask_;
}
void PBGnssSvIdConfig::set_globlacklistsvmask(::google::protobuf::uint64 value) {

  globlacklistsvmask_ = value;
  // @@protoc_insertion_point(field_set:PBGnssSvIdConfig.gloBlacklistSvMask)
}

// uint64 bdsBlacklistSvMask = 2;
void PBGnssSvIdConfig::clear_bdsblacklistsvmask() {
  bdsblacklistsvmask_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 PBGnssSvIdConfig::bdsblacklistsvmask() const {
  // @@protoc_insertion_point(field_get:PBGnssSvIdConfig.bdsBlacklistSvMask)
  return bdsblacklistsvmask_;
}
void PBGnssSvIdConfig::set_bdsblacklistsvmask(::google::protobuf::uint64 value) {

  bdsblacklistsvmask_ = value;
  // @@protoc_insertion_point(field_set:PBGnssSvIdConfig.bdsBlacklistSvMask)
}

// uint64 qzssBlacklistSvMask = 3;
void PBGnssSvIdConfig::clear_qzssblacklistsvmask() {
  qzssblacklistsvmask_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 PBGnssSvIdConfig::qzssblacklistsvmask() const {
  // @@protoc_insertion_point(field_get:PBGnssSvIdConfig.qzssBlacklistSvMask)
  return qzssblacklistsvmask_;
}
void PBGnssSvIdConfig::set_qzssblacklistsvmask(::google::protobuf::uint64 value) {

  qzssblacklistsvmask_ = value;
  // @@protoc_insertion_point(field_set:PBGnssSvIdConfig.qzssBlacklistSvMask)
}

// uint64 galBlacklistSvMask = 4;
void PBGnssSvIdConfig::clear_galblacklistsvmask() {
  galblacklistsvmask_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 PBGnssSvIdConfig::galblacklistsvmask() const {
  // @@protoc_insertion_point(field_get:PBGnssSvIdConfig.galBlacklistSvMask)
  return galblacklistsvmask_;
}
void PBGnssSvIdConfig::set_galblacklistsvmask(::google::protobuf::uint64 value) {

  galblacklistsvmask_ = value;
  // @@protoc_insertion_point(field_set:PBGnssSvIdConfig.galBlacklistSvMask)
}

// uint64 sbasBlacklistSvMask = 5;
void PBGnssSvIdConfig::clear_sbasblacklistsvmask() {
  sbasblacklistsvmask_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 PBGnssSvIdConfig::sbasblacklistsvmask() const {
  // @@protoc_insertion_point(field_get:PBGnssSvIdConfig.sbasBlacklistSvMask)
  return sbasblacklistsvmask_;
}
void PBGnssSvIdConfig::set_sbasblacklistsvmask(::google::protobuf::uint64 value) {

  sbasblacklistsvmask_ = value;
  // @@protoc_insertion_point(field_set:PBGnssSvIdConfig.sbasBlacklistSvMask)
}

// uint64 navicBlacklistSvMask = 6;
void PBGnssSvIdConfig::clear_navicblacklistsvmask() {
  navicblacklistsvmask_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 PBGnssSvIdConfig::navicblacklistsvmask() const {
  // @@protoc_insertion_point(field_get:PBGnssSvIdConfig.navicBlacklistSvMask)
  return navicblacklistsvmask_;
}
void PBGnssSvIdConfig::set_navicblacklistsvmask(::google::protobuf::uint64 value) {

  navicblacklistsvmask_ = value;
  // @@protoc_insertion_point(field_set:PBGnssSvIdConfig.navicBlacklistSvMask)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PBLIALeverArmParams::kForwardOffsetMetersFieldNumber;
const int PBLIALeverArmParams::kSidewaysOffsetMetersFieldNumber;
const int PBLIALeverArmParams::kUpOffsetMetersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PBLIALeverArmParams::PBLIALeverArmParams()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_LocationApiDataTypes_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBLIALeverArmParams)
}
PBLIALeverArmParams::PBLIALeverArmParams(const PBLIALeverArmParams& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&forwardoffsetmeters_, &from.forwardoffsetmeters_,
    reinterpret_cast<char*>(&upoffsetmeters_) -
    reinterpret_cast<char*>(&forwardoffsetmeters_) + sizeof(upoffsetmeters_));
  // @@protoc_insertion_point(copy_constructor:PBLIALeverArmParams)
}

void PBLIALeverArmParams::SharedCtor() {
  ::memset(&forwardoffsetmeters_, 0, reinterpret_cast<char*>(&upoffsetmeters_) -
    reinterpret_cast<char*>(&forwardoffsetmeters_) + sizeof(upoffsetmeters_));
  _cached_size_ = 0;
}

PBLIALeverArmParams::~PBLIALeverArmParams() {
  // @@protoc_insertion_point(destructor:PBLIALeverArmParams)
  SharedDtor();
}

void PBLIALeverArmParams::SharedDtor() {
}

void PBLIALeverArmParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBLIALeverArmParams::descriptor() {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PBLIALeverArmParams& PBLIALeverArmParams::default_instance() {
  protobuf_LocationApiDataTypes_2eproto::InitDefaults();
  return *internal_default_instance();
}

PBLIALeverArmParams* PBLIALeverArmParams::New(::google::protobuf::Arena* arena) const {
  PBLIALeverArmParams* n = new PBLIALeverArmParams;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBLIALeverArmParams::Clear() {
// @@protoc_insertion_point(message_clear_start:PBLIALeverArmParams)
  ::memset(&forwardoffsetmeters_, 0, reinterpret_cast<char*>(&upoffsetmeters_) -
    reinterpret_cast<char*>(&forwardoffsetmeters_) + sizeof(upoffsetmeters_));
}

bool PBLIALeverArmParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBLIALeverArmParams)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float forwardOffsetMeters = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &forwardoffsetmeters_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float sidewaysOffsetMeters = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sidewaysoffsetmeters_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float upOffsetMeters = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &upoffsetmeters_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBLIALeverArmParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBLIALeverArmParams)
  return false;
#undef DO_
}

void PBLIALeverArmParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBLIALeverArmParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float forwardOffsetMeters = 1;
  if (this->forwardoffsetmeters() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->forwardoffsetmeters(), output);
  }

  // float sidewaysOffsetMeters = 2;
  if (this->sidewaysoffsetmeters() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->sidewaysoffsetmeters(), output);
  }

  // float upOffsetMeters = 3;
  if (this->upoffsetmeters() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->upoffsetmeters(), output);
  }

  // @@protoc_insertion_point(serialize_end:PBLIALeverArmParams)
}

::google::protobuf::uint8* PBLIALeverArmParams::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBLIALeverArmParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float forwardOffsetMeters = 1;
  if (this->forwardoffsetmeters() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->forwardoffsetmeters(), target);
  }

  // float sidewaysOffsetMeters = 2;
  if (this->sidewaysoffsetmeters() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->sidewaysoffsetmeters(), target);
  }

  // float upOffsetMeters = 3;
  if (this->upoffsetmeters() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->upoffsetmeters(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PBLIALeverArmParams)
  return target;
}

size_t PBLIALeverArmParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBLIALeverArmParams)
  size_t total_size = 0;

  // float forwardOffsetMeters = 1;
  if (this->forwardoffsetmeters() != 0) {
    total_size += 1 + 4;
  }

  // float sidewaysOffsetMeters = 2;
  if (this->sidewaysoffsetmeters() != 0) {
    total_size += 1 + 4;
  }

  // float upOffsetMeters = 3;
  if (this->upoffsetmeters() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBLIALeverArmParams::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PBLIALeverArmParams)
  GOOGLE_DCHECK_NE(&from, this);
  const PBLIALeverArmParams* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PBLIALeverArmParams>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PBLIALeverArmParams)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PBLIALeverArmParams)
    MergeFrom(*source);
  }
}

void PBLIALeverArmParams::MergeFrom(const PBLIALeverArmParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBLIALeverArmParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.forwardoffsetmeters() != 0) {
    set_forwardoffsetmeters(from.forwardoffsetmeters());
  }
  if (from.sidewaysoffsetmeters() != 0) {
    set_sidewaysoffsetmeters(from.sidewaysoffsetmeters());
  }
  if (from.upoffsetmeters() != 0) {
    set_upoffsetmeters(from.upoffsetmeters());
  }
}

void PBLIALeverArmParams::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PBLIALeverArmParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBLIALeverArmParams::CopyFrom(const PBLIALeverArmParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBLIALeverArmParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBLIALeverArmParams::IsInitialized() const {
  return true;
}

void PBLIALeverArmParams::Swap(PBLIALeverArmParams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBLIALeverArmParams::InternalSwap(PBLIALeverArmParams* other) {
  std::swap(forwardoffsetmeters_, other->forwardoffsetmeters_);
  std::swap(sidewaysoffsetmeters_, other->sidewaysoffsetmeters_);
  std::swap(upoffsetmeters_, other->upoffsetmeters_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PBLIALeverArmParams::GetMetadata() const {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PBLIALeverArmParams

// float forwardOffsetMeters = 1;
void PBLIALeverArmParams::clear_forwardoffsetmeters() {
  forwardoffsetmeters_ = 0;
}
float PBLIALeverArmParams::forwardoffsetmeters() const {
  // @@protoc_insertion_point(field_get:PBLIALeverArmParams.forwardOffsetMeters)
  return forwardoffsetmeters_;
}
void PBLIALeverArmParams::set_forwardoffsetmeters(float value) {

  forwardoffsetmeters_ = value;
  // @@protoc_insertion_point(field_set:PBLIALeverArmParams.forwardOffsetMeters)
}

// float sidewaysOffsetMeters = 2;
void PBLIALeverArmParams::clear_sidewaysoffsetmeters() {
  sidewaysoffsetmeters_ = 0;
}
float PBLIALeverArmParams::sidewaysoffsetmeters() const {
  // @@protoc_insertion_point(field_get:PBLIALeverArmParams.sidewaysOffsetMeters)
  return sidewaysoffsetmeters_;
}
void PBLIALeverArmParams::set_sidewaysoffsetmeters(float value) {

  sidewaysoffsetmeters_ = value;
  // @@protoc_insertion_point(field_set:PBLIALeverArmParams.sidewaysOffsetMeters)
}

// float upOffsetMeters = 3;
void PBLIALeverArmParams::clear_upoffsetmeters() {
  upoffsetmeters_ = 0;
}
float PBLIALeverArmParams::upoffsetmeters() const {
  // @@protoc_insertion_point(field_get:PBLIALeverArmParams.upOffsetMeters)
  return upoffsetmeters_;
}
void PBLIALeverArmParams::set_upoffsetmeters(float value) {

  upoffsetmeters_ = value;
  // @@protoc_insertion_point(field_set:PBLIALeverArmParams.upOffsetMeters)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PBLIALeverArmConfigInfo::kLeverArmValidMaskFieldNumber;
const int PBLIALeverArmConfigInfo::kGnssToVRPFieldNumber;
const int PBLIALeverArmConfigInfo::kDrImuToGnssFieldNumber;
const int PBLIALeverArmConfigInfo::kVeppImuToGnssFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PBLIALeverArmConfigInfo::PBLIALeverArmConfigInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_LocationApiDataTypes_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBLIALeverArmConfigInfo)
}
PBLIALeverArmConfigInfo::PBLIALeverArmConfigInfo(const PBLIALeverArmConfigInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_gnsstovrp()) {
    gnsstovrp_ = new ::PBLIALeverArmParams(*from.gnsstovrp_);
  } else {
    gnsstovrp_ = NULL;
  }
  if (from.has_drimutognss()) {
    drimutognss_ = new ::PBLIALeverArmParams(*from.drimutognss_);
  } else {
    drimutognss_ = NULL;
  }
  if (from.has_veppimutognss()) {
    veppimutognss_ = new ::PBLIALeverArmParams(*from.veppimutognss_);
  } else {
    veppimutognss_ = NULL;
  }
  leverarmvalidmask_ = from.leverarmvalidmask_;
  // @@protoc_insertion_point(copy_constructor:PBLIALeverArmConfigInfo)
}

void PBLIALeverArmConfigInfo::SharedCtor() {
  ::memset(&gnsstovrp_, 0, reinterpret_cast<char*>(&leverarmvalidmask_) -
    reinterpret_cast<char*>(&gnsstovrp_) + sizeof(leverarmvalidmask_));
  _cached_size_ = 0;
}

PBLIALeverArmConfigInfo::~PBLIALeverArmConfigInfo() {
  // @@protoc_insertion_point(destructor:PBLIALeverArmConfigInfo)
  SharedDtor();
}

void PBLIALeverArmConfigInfo::SharedDtor() {
  if (this != internal_default_instance()) {
    delete gnsstovrp_;
  }
  if (this != internal_default_instance()) {
    delete drimutognss_;
  }
  if (this != internal_default_instance()) {
    delete veppimutognss_;
  }
}

void PBLIALeverArmConfigInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBLIALeverArmConfigInfo::descriptor() {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PBLIALeverArmConfigInfo& PBLIALeverArmConfigInfo::default_instance() {
  protobuf_LocationApiDataTypes_2eproto::InitDefaults();
  return *internal_default_instance();
}

PBLIALeverArmConfigInfo* PBLIALeverArmConfigInfo::New(::google::protobuf::Arena* arena) const {
  PBLIALeverArmConfigInfo* n = new PBLIALeverArmConfigInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBLIALeverArmConfigInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PBLIALeverArmConfigInfo)
  if (GetArenaNoVirtual() == NULL && gnsstovrp_ != NULL) {
    delete gnsstovrp_;
  }
  gnsstovrp_ = NULL;
  if (GetArenaNoVirtual() == NULL && drimutognss_ != NULL) {
    delete drimutognss_;
  }
  drimutognss_ = NULL;
  if (GetArenaNoVirtual() == NULL && veppimutognss_ != NULL) {
    delete veppimutognss_;
  }
  veppimutognss_ = NULL;
  leverarmvalidmask_ = 0u;
}

bool PBLIALeverArmConfigInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBLIALeverArmConfigInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 leverArmValidMask = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leverarmvalidmask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .PBLIALeverArmParams gnssToVRP = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gnsstovrp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .PBLIALeverArmParams drImuToGnss = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_drimutognss()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .PBLIALeverArmParams veppImuToGnss = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_veppimutognss()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBLIALeverArmConfigInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBLIALeverArmConfigInfo)
  return false;
#undef DO_
}

void PBLIALeverArmConfigInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBLIALeverArmConfigInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 leverArmValidMask = 1;
  if (this->leverarmvalidmask() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->leverarmvalidmask(), output);
  }

  // .PBLIALeverArmParams gnssToVRP = 2;
  if (this->has_gnsstovrp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->gnsstovrp_, output);
  }

  // .PBLIALeverArmParams drImuToGnss = 3;
  if (this->has_drimutognss()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->drimutognss_, output);
  }

  // .PBLIALeverArmParams veppImuToGnss = 4;
  if (this->has_veppimutognss()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->veppimutognss_, output);
  }

  // @@protoc_insertion_point(serialize_end:PBLIALeverArmConfigInfo)
}

::google::protobuf::uint8* PBLIALeverArmConfigInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBLIALeverArmConfigInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 leverArmValidMask = 1;
  if (this->leverarmvalidmask() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->leverarmvalidmask(), target);
  }

  // .PBLIALeverArmParams gnssToVRP = 2;
  if (this->has_gnsstovrp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->gnsstovrp_, deterministic, target);
  }

  // .PBLIALeverArmParams drImuToGnss = 3;
  if (this->has_drimutognss()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->drimutognss_, deterministic, target);
  }

  // .PBLIALeverArmParams veppImuToGnss = 4;
  if (this->has_veppimutognss()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->veppimutognss_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PBLIALeverArmConfigInfo)
  return target;
}

size_t PBLIALeverArmConfigInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBLIALeverArmConfigInfo)
  size_t total_size = 0;

  // .PBLIALeverArmParams gnssToVRP = 2;
  if (this->has_gnsstovrp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->gnsstovrp_);
  }

  // .PBLIALeverArmParams drImuToGnss = 3;
  if (this->has_drimutognss()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->drimutognss_);
  }

  // .PBLIALeverArmParams veppImuToGnss = 4;
  if (this->has_veppimutognss()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->veppimutognss_);
  }

  // uint32 leverArmValidMask = 1;
  if (this->leverarmvalidmask() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->leverarmvalidmask());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBLIALeverArmConfigInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PBLIALeverArmConfigInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PBLIALeverArmConfigInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PBLIALeverArmConfigInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PBLIALeverArmConfigInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PBLIALeverArmConfigInfo)
    MergeFrom(*source);
  }
}

void PBLIALeverArmConfigInfo::MergeFrom(const PBLIALeverArmConfigInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBLIALeverArmConfigInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_gnsstovrp()) {
    mutable_gnsstovrp()->::PBLIALeverArmParams::MergeFrom(from.gnsstovrp());
  }
  if (from.has_drimutognss()) {
    mutable_drimutognss()->::PBLIALeverArmParams::MergeFrom(from.drimutognss());
  }
  if (from.has_veppimutognss()) {
    mutable_veppimutognss()->::PBLIALeverArmParams::MergeFrom(from.veppimutognss());
  }
  if (from.leverarmvalidmask() != 0) {
    set_leverarmvalidmask(from.leverarmvalidmask());
  }
}

void PBLIALeverArmConfigInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PBLIALeverArmConfigInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBLIALeverArmConfigInfo::CopyFrom(const PBLIALeverArmConfigInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBLIALeverArmConfigInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBLIALeverArmConfigInfo::IsInitialized() const {
  return true;
}

void PBLIALeverArmConfigInfo::Swap(PBLIALeverArmConfigInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBLIALeverArmConfigInfo::InternalSwap(PBLIALeverArmConfigInfo* other) {
  std::swap(gnsstovrp_, other->gnsstovrp_);
  std::swap(drimutognss_, other->drimutognss_);
  std::swap(veppimutognss_, other->veppimutognss_);
  std::swap(leverarmvalidmask_, other->leverarmvalidmask_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PBLIALeverArmConfigInfo::GetMetadata() const {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PBLIALeverArmConfigInfo

// uint32 leverArmValidMask = 1;
void PBLIALeverArmConfigInfo::clear_leverarmvalidmask() {
  leverarmvalidmask_ = 0u;
}
::google::protobuf::uint32 PBLIALeverArmConfigInfo::leverarmvalidmask() const {
  // @@protoc_insertion_point(field_get:PBLIALeverArmConfigInfo.leverArmValidMask)
  return leverarmvalidmask_;
}
void PBLIALeverArmConfigInfo::set_leverarmvalidmask(::google::protobuf::uint32 value) {

  leverarmvalidmask_ = value;
  // @@protoc_insertion_point(field_set:PBLIALeverArmConfigInfo.leverArmValidMask)
}

// .PBLIALeverArmParams gnssToVRP = 2;
bool PBLIALeverArmConfigInfo::has_gnsstovrp() const {
  return this != internal_default_instance() && gnsstovrp_ != NULL;
}
void PBLIALeverArmConfigInfo::clear_gnsstovrp() {
  if (GetArenaNoVirtual() == NULL && gnsstovrp_ != NULL) delete gnsstovrp_;
  gnsstovrp_ = NULL;
}
const ::PBLIALeverArmParams& PBLIALeverArmConfigInfo::gnsstovrp() const {
  // @@protoc_insertion_point(field_get:PBLIALeverArmConfigInfo.gnssToVRP)
  return gnsstovrp_ != NULL ? *gnsstovrp_
                         : *::PBLIALeverArmParams::internal_default_instance();
}
::PBLIALeverArmParams* PBLIALeverArmConfigInfo::mutable_gnsstovrp() {

  if (gnsstovrp_ == NULL) {
    gnsstovrp_ = new ::PBLIALeverArmParams;
  }
  // @@protoc_insertion_point(field_mutable:PBLIALeverArmConfigInfo.gnssToVRP)
  return gnsstovrp_;
}
::PBLIALeverArmParams* PBLIALeverArmConfigInfo::release_gnsstovrp() {
  // @@protoc_insertion_point(field_release:PBLIALeverArmConfigInfo.gnssToVRP)

  ::PBLIALeverArmParams* temp = gnsstovrp_;
  gnsstovrp_ = NULL;
  return temp;
}
void PBLIALeverArmConfigInfo::set_allocated_gnsstovrp(::PBLIALeverArmParams* gnsstovrp) {
  delete gnsstovrp_;
  gnsstovrp_ = gnsstovrp;
  if (gnsstovrp) {

  } else {

  }
  // @@protoc_insertion_point(field_set_allocated:PBLIALeverArmConfigInfo.gnssToVRP)
}

// .PBLIALeverArmParams drImuToGnss = 3;
bool PBLIALeverArmConfigInfo::has_drimutognss() const {
  return this != internal_default_instance() && drimutognss_ != NULL;
}
void PBLIALeverArmConfigInfo::clear_drimutognss() {
  if (GetArenaNoVirtual() == NULL && drimutognss_ != NULL) delete drimutognss_;
  drimutognss_ = NULL;
}
const ::PBLIALeverArmParams& PBLIALeverArmConfigInfo::drimutognss() const {
  // @@protoc_insertion_point(field_get:PBLIALeverArmConfigInfo.drImuToGnss)
  return drimutognss_ != NULL ? *drimutognss_
                         : *::PBLIALeverArmParams::internal_default_instance();
}
::PBLIALeverArmParams* PBLIALeverArmConfigInfo::mutable_drimutognss() {

  if (drimutognss_ == NULL) {
    drimutognss_ = new ::PBLIALeverArmParams;
  }
  // @@protoc_insertion_point(field_mutable:PBLIALeverArmConfigInfo.drImuToGnss)
  return drimutognss_;
}
::PBLIALeverArmParams* PBLIALeverArmConfigInfo::release_drimutognss() {
  // @@protoc_insertion_point(field_release:PBLIALeverArmConfigInfo.drImuToGnss)

  ::PBLIALeverArmParams* temp = drimutognss_;
  drimutognss_ = NULL;
  return temp;
}
void PBLIALeverArmConfigInfo::set_allocated_drimutognss(::PBLIALeverArmParams* drimutognss) {
  delete drimutognss_;
  drimutognss_ = drimutognss;
  if (drimutognss) {

  } else {

  }
  // @@protoc_insertion_point(field_set_allocated:PBLIALeverArmConfigInfo.drImuToGnss)
}

// .PBLIALeverArmParams veppImuToGnss = 4;
bool PBLIALeverArmConfigInfo::has_veppimutognss() const {
  return this != internal_default_instance() && veppimutognss_ != NULL;
}
void PBLIALeverArmConfigInfo::clear_veppimutognss() {
  if (GetArenaNoVirtual() == NULL && veppimutognss_ != NULL) delete veppimutognss_;
  veppimutognss_ = NULL;
}
const ::PBLIALeverArmParams& PBLIALeverArmConfigInfo::veppimutognss() const {
  // @@protoc_insertion_point(field_get:PBLIALeverArmConfigInfo.veppImuToGnss)
  return veppimutognss_ != NULL ? *veppimutognss_
                         : *::PBLIALeverArmParams::internal_default_instance();
}
::PBLIALeverArmParams* PBLIALeverArmConfigInfo::mutable_veppimutognss() {

  if (veppimutognss_ == NULL) {
    veppimutognss_ = new ::PBLIALeverArmParams;
  }
  // @@protoc_insertion_point(field_mutable:PBLIALeverArmConfigInfo.veppImuToGnss)
  return veppimutognss_;
}
::PBLIALeverArmParams* PBLIALeverArmConfigInfo::release_veppimutognss() {
  // @@protoc_insertion_point(field_release:PBLIALeverArmConfigInfo.veppImuToGnss)

  ::PBLIALeverArmParams* temp = veppimutognss_;
  veppimutognss_ = NULL;
  return temp;
}
void PBLIALeverArmConfigInfo::set_allocated_veppimutognss(::PBLIALeverArmParams* veppimutognss) {
  delete veppimutognss_;
  veppimutognss_ = veppimutognss;
  if (veppimutognss) {

  } else {

  }
  // @@protoc_insertion_point(field_set_allocated:PBLIALeverArmConfigInfo.veppImuToGnss)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PBLIABodyToSensorMountParams::kRollOffsetFieldNumber;
const int PBLIABodyToSensorMountParams::kYawOffsetFieldNumber;
const int PBLIABodyToSensorMountParams::kPitchOffsetFieldNumber;
const int PBLIABodyToSensorMountParams::kOffsetUncFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PBLIABodyToSensorMountParams::PBLIABodyToSensorMountParams()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_LocationApiDataTypes_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBLIABodyToSensorMountParams)
}
PBLIABodyToSensorMountParams::PBLIABodyToSensorMountParams(const PBLIABodyToSensorMountParams& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&rolloffset_, &from.rolloffset_,
    reinterpret_cast<char*>(&offsetunc_) -
    reinterpret_cast<char*>(&rolloffset_) + sizeof(offsetunc_));
  // @@protoc_insertion_point(copy_constructor:PBLIABodyToSensorMountParams)
}

void PBLIABodyToSensorMountParams::SharedCtor() {
  ::memset(&rolloffset_, 0, reinterpret_cast<char*>(&offsetunc_) -
    reinterpret_cast<char*>(&rolloffset_) + sizeof(offsetunc_));
  _cached_size_ = 0;
}

PBLIABodyToSensorMountParams::~PBLIABodyToSensorMountParams() {
  // @@protoc_insertion_point(destructor:PBLIABodyToSensorMountParams)
  SharedDtor();
}

void PBLIABodyToSensorMountParams::SharedDtor() {
}

void PBLIABodyToSensorMountParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBLIABodyToSensorMountParams::descriptor() {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PBLIABodyToSensorMountParams& PBLIABodyToSensorMountParams::default_instance() {
  protobuf_LocationApiDataTypes_2eproto::InitDefaults();
  return *internal_default_instance();
}

PBLIABodyToSensorMountParams* PBLIABodyToSensorMountParams::New(::google::protobuf::Arena* arena) const {
  PBLIABodyToSensorMountParams* n = new PBLIABodyToSensorMountParams;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBLIABodyToSensorMountParams::Clear() {
// @@protoc_insertion_point(message_clear_start:PBLIABodyToSensorMountParams)
  ::memset(&rolloffset_, 0, reinterpret_cast<char*>(&offsetunc_) -
    reinterpret_cast<char*>(&rolloffset_) + sizeof(offsetunc_));
}

bool PBLIABodyToSensorMountParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBLIABodyToSensorMountParams)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float rollOffset = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rolloffset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float yawOffset = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yawoffset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float pitchOffset = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pitchoffset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float offsetUnc = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offsetunc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBLIABodyToSensorMountParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBLIABodyToSensorMountParams)
  return false;
#undef DO_
}

void PBLIABodyToSensorMountParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBLIABodyToSensorMountParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float rollOffset = 1;
  if (this->rolloffset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->rolloffset(), output);
  }

  // float yawOffset = 2;
  if (this->yawoffset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->yawoffset(), output);
  }

  // float pitchOffset = 3;
  if (this->pitchoffset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->pitchoffset(), output);
  }

  // float offsetUnc = 4;
  if (this->offsetunc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->offsetunc(), output);
  }

  // @@protoc_insertion_point(serialize_end:PBLIABodyToSensorMountParams)
}

::google::protobuf::uint8* PBLIABodyToSensorMountParams::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBLIABodyToSensorMountParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float rollOffset = 1;
  if (this->rolloffset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->rolloffset(), target);
  }

  // float yawOffset = 2;
  if (this->yawoffset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->yawoffset(), target);
  }

  // float pitchOffset = 3;
  if (this->pitchoffset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->pitchoffset(), target);
  }

  // float offsetUnc = 4;
  if (this->offsetunc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->offsetunc(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PBLIABodyToSensorMountParams)
  return target;
}

size_t PBLIABodyToSensorMountParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBLIABodyToSensorMountParams)
  size_t total_size = 0;

  // float rollOffset = 1;
  if (this->rolloffset() != 0) {
    total_size += 1 + 4;
  }

  // float yawOffset = 2;
  if (this->yawoffset() != 0) {
    total_size += 1 + 4;
  }

  // float pitchOffset = 3;
  if (this->pitchoffset() != 0) {
    total_size += 1 + 4;
  }

  // float offsetUnc = 4;
  if (this->offsetunc() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBLIABodyToSensorMountParams::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PBLIABodyToSensorMountParams)
  GOOGLE_DCHECK_NE(&from, this);
  const PBLIABodyToSensorMountParams* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PBLIABodyToSensorMountParams>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PBLIABodyToSensorMountParams)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PBLIABodyToSensorMountParams)
    MergeFrom(*source);
  }
}

void PBLIABodyToSensorMountParams::MergeFrom(const PBLIABodyToSensorMountParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBLIABodyToSensorMountParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.rolloffset() != 0) {
    set_rolloffset(from.rolloffset());
  }
  if (from.yawoffset() != 0) {
    set_yawoffset(from.yawoffset());
  }
  if (from.pitchoffset() != 0) {
    set_pitchoffset(from.pitchoffset());
  }
  if (from.offsetunc() != 0) {
    set_offsetunc(from.offsetunc());
  }
}

void PBLIABodyToSensorMountParams::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PBLIABodyToSensorMountParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBLIABodyToSensorMountParams::CopyFrom(const PBLIABodyToSensorMountParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBLIABodyToSensorMountParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBLIABodyToSensorMountParams::IsInitialized() const {
  return true;
}

void PBLIABodyToSensorMountParams::Swap(PBLIABodyToSensorMountParams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBLIABodyToSensorMountParams::InternalSwap(PBLIABodyToSensorMountParams* other) {
  std::swap(rolloffset_, other->rolloffset_);
  std::swap(yawoffset_, other->yawoffset_);
  std::swap(pitchoffset_, other->pitchoffset_);
  std::swap(offsetunc_, other->offsetunc_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PBLIABodyToSensorMountParams::GetMetadata() const {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PBLIABodyToSensorMountParams

// float rollOffset = 1;
void PBLIABodyToSensorMountParams::clear_rolloffset() {
  rolloffset_ = 0;
}
float PBLIABodyToSensorMountParams::rolloffset() const {
  // @@protoc_insertion_point(field_get:PBLIABodyToSensorMountParams.rollOffset)
  return rolloffset_;
}
void PBLIABodyToSensorMountParams::set_rolloffset(float value) {

  rolloffset_ = value;
  // @@protoc_insertion_point(field_set:PBLIABodyToSensorMountParams.rollOffset)
}

// float yawOffset = 2;
void PBLIABodyToSensorMountParams::clear_yawoffset() {
  yawoffset_ = 0;
}
float PBLIABodyToSensorMountParams::yawoffset() const {
  // @@protoc_insertion_point(field_get:PBLIABodyToSensorMountParams.yawOffset)
  return yawoffset_;
}
void PBLIABodyToSensorMountParams::set_yawoffset(float value) {

  yawoffset_ = value;
  // @@protoc_insertion_point(field_set:PBLIABodyToSensorMountParams.yawOffset)
}

// float pitchOffset = 3;
void PBLIABodyToSensorMountParams::clear_pitchoffset() {
  pitchoffset_ = 0;
}
float PBLIABodyToSensorMountParams::pitchoffset() const {
  // @@protoc_insertion_point(field_get:PBLIABodyToSensorMountParams.pitchOffset)
  return pitchoffset_;
}
void PBLIABodyToSensorMountParams::set_pitchoffset(float value) {

  pitchoffset_ = value;
  // @@protoc_insertion_point(field_set:PBLIABodyToSensorMountParams.pitchOffset)
}

// float offsetUnc = 4;
void PBLIABodyToSensorMountParams::clear_offsetunc() {
  offsetunc_ = 0;
}
float PBLIABodyToSensorMountParams::offsetunc() const {
  // @@protoc_insertion_point(field_get:PBLIABodyToSensorMountParams.offsetUnc)
  return offsetunc_;
}
void PBLIABodyToSensorMountParams::set_offsetunc(float value) {

  offsetunc_ = value;
  // @@protoc_insertion_point(field_set:PBLIABodyToSensorMountParams.offsetUnc)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PBDeadReckoningEngineConfig::kValidMaskFieldNumber;
const int PBDeadReckoningEngineConfig::kBodyToSensorMountParamsFieldNumber;
const int PBDeadReckoningEngineConfig::kVehicleSpeedScaleFactorFieldNumber;
const int PBDeadReckoningEngineConfig::kVehicleSpeedScaleFactorUncFieldNumber;
const int PBDeadReckoningEngineConfig::kGyroScaleFactorFieldNumber;
const int PBDeadReckoningEngineConfig::kGyroScaleFactorUncFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PBDeadReckoningEngineConfig::PBDeadReckoningEngineConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_LocationApiDataTypes_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:PBDeadReckoningEngineConfig)
}
PBDeadReckoningEngineConfig::PBDeadReckoningEngineConfig(const PBDeadReckoningEngineConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_bodytosensormountparams()) {
    bodytosensormountparams_ = new ::PBLIABodyToSensorMountParams(*from.bodytosensormountparams_);
  } else {
    bodytosensormountparams_ = NULL;
  }
  ::memcpy(&validmask_, &from.validmask_,
    reinterpret_cast<char*>(&gyroscalefactorunc_) -
    reinterpret_cast<char*>(&validmask_) + sizeof(gyroscalefactorunc_));
  // @@protoc_insertion_point(copy_constructor:PBDeadReckoningEngineConfig)
}

void PBDeadReckoningEngineConfig::SharedCtor() {
  ::memset(&bodytosensormountparams_, 0, reinterpret_cast<char*>(&gyroscalefactorunc_) -
    reinterpret_cast<char*>(&bodytosensormountparams_) + sizeof(gyroscalefactorunc_));
  _cached_size_ = 0;
}

PBDeadReckoningEngineConfig::~PBDeadReckoningEngineConfig() {
  // @@protoc_insertion_point(destructor:PBDeadReckoningEngineConfig)
  SharedDtor();
}

void PBDeadReckoningEngineConfig::SharedDtor() {
  if (this != internal_default_instance()) {
    delete bodytosensormountparams_;
  }
}

void PBDeadReckoningEngineConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBDeadReckoningEngineConfig::descriptor() {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PBDeadReckoningEngineConfig& PBDeadReckoningEngineConfig::default_instance() {
  protobuf_LocationApiDataTypes_2eproto::InitDefaults();
  return *internal_default_instance();
}

PBDeadReckoningEngineConfig* PBDeadReckoningEngineConfig::New(::google::protobuf::Arena* arena) const {
  PBDeadReckoningEngineConfig* n = new PBDeadReckoningEngineConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBDeadReckoningEngineConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:PBDeadReckoningEngineConfig)
  if (GetArenaNoVirtual() == NULL && bodytosensormountparams_ != NULL) {
    delete bodytosensormountparams_;
  }
  bodytosensormountparams_ = NULL;
  ::memset(&validmask_, 0, reinterpret_cast<char*>(&gyroscalefactorunc_) -
    reinterpret_cast<char*>(&validmask_) + sizeof(gyroscalefactorunc_));
}

bool PBDeadReckoningEngineConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PBDeadReckoningEngineConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 validMask = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &validmask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .PBLIABodyToSensorMountParams bodyToSensorMountParams = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bodytosensormountparams()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float vehicleSpeedScaleFactor = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vehiclespeedscalefactor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float vehicleSpeedScaleFactorUnc = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vehiclespeedscalefactorunc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float gyroScaleFactor = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gyroscalefactor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float gyroScaleFactorUnc = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gyroscalefactorunc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PBDeadReckoningEngineConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PBDeadReckoningEngineConfig)
  return false;
#undef DO_
}

void PBDeadReckoningEngineConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PBDeadReckoningEngineConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 validMask = 1;
  if (this->validmask() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->validmask(), output);
  }

  // .PBLIABodyToSensorMountParams bodyToSensorMountParams = 2;
  if (this->has_bodytosensormountparams()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->bodytosensormountparams_, output);
  }

  // float vehicleSpeedScaleFactor = 3;
  if (this->vehiclespeedscalefactor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->vehiclespeedscalefactor(), output);
  }

  // float vehicleSpeedScaleFactorUnc = 4;
  if (this->vehiclespeedscalefactorunc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->vehiclespeedscalefactorunc(), output);
  }

  // float gyroScaleFactor = 5;
  if (this->gyroscalefactor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->gyroscalefactor(), output);
  }

  // float gyroScaleFactorUnc = 6;
  if (this->gyroscalefactorunc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->gyroscalefactorunc(), output);
  }

  // @@protoc_insertion_point(serialize_end:PBDeadReckoningEngineConfig)
}

::google::protobuf::uint8* PBDeadReckoningEngineConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PBDeadReckoningEngineConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 validMask = 1;
  if (this->validmask() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->validmask(), target);
  }

  // .PBLIABodyToSensorMountParams bodyToSensorMountParams = 2;
  if (this->has_bodytosensormountparams()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->bodytosensormountparams_, deterministic, target);
  }

  // float vehicleSpeedScaleFactor = 3;
  if (this->vehiclespeedscalefactor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->vehiclespeedscalefactor(), target);
  }

  // float vehicleSpeedScaleFactorUnc = 4;
  if (this->vehiclespeedscalefactorunc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->vehiclespeedscalefactorunc(), target);
  }

  // float gyroScaleFactor = 5;
  if (this->gyroscalefactor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->gyroscalefactor(), target);
  }

  // float gyroScaleFactorUnc = 6;
  if (this->gyroscalefactorunc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->gyroscalefactorunc(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PBDeadReckoningEngineConfig)
  return target;
}

size_t PBDeadReckoningEngineConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PBDeadReckoningEngineConfig)
  size_t total_size = 0;

  // .PBLIABodyToSensorMountParams bodyToSensorMountParams = 2;
  if (this->has_bodytosensormountparams()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->bodytosensormountparams_);
  }

  // uint64 validMask = 1;
  if (this->validmask() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->validmask());
  }

  // float vehicleSpeedScaleFactor = 3;
  if (this->vehiclespeedscalefactor() != 0) {
    total_size += 1 + 4;
  }

  // float vehicleSpeedScaleFactorUnc = 4;
  if (this->vehiclespeedscalefactorunc() != 0) {
    total_size += 1 + 4;
  }

  // float gyroScaleFactor = 5;
  if (this->gyroscalefactor() != 0) {
    total_size += 1 + 4;
  }

  // float gyroScaleFactorUnc = 6;
  if (this->gyroscalefactorunc() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBDeadReckoningEngineConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PBDeadReckoningEngineConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PBDeadReckoningEngineConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PBDeadReckoningEngineConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PBDeadReckoningEngineConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PBDeadReckoningEngineConfig)
    MergeFrom(*source);
  }
}

void PBDeadReckoningEngineConfig::MergeFrom(const PBDeadReckoningEngineConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PBDeadReckoningEngineConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_bodytosensormountparams()) {
    mutable_bodytosensormountparams()->::PBLIABodyToSensorMountParams::MergeFrom(from.bodytosensormountparams());
  }
  if (from.validmask() != 0) {
    set_validmask(from.validmask());
  }
  if (from.vehiclespeedscalefactor() != 0) {
    set_vehiclespeedscalefactor(from.vehiclespeedscalefactor());
  }
  if (from.vehiclespeedscalefactorunc() != 0) {
    set_vehiclespeedscalefactorunc(from.vehiclespeedscalefactorunc());
  }
  if (from.gyroscalefactor() != 0) {
    set_gyroscalefactor(from.gyroscalefactor());
  }
  if (from.gyroscalefactorunc() != 0) {
    set_gyroscalefactorunc(from.gyroscalefactorunc());
  }
}

void PBDeadReckoningEngineConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PBDeadReckoningEngineConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBDeadReckoningEngineConfig::CopyFrom(const PBDeadReckoningEngineConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PBDeadReckoningEngineConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBDeadReckoningEngineConfig::IsInitialized() const {
  return true;
}

void PBDeadReckoningEngineConfig::Swap(PBDeadReckoningEngineConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBDeadReckoningEngineConfig::InternalSwap(PBDeadReckoningEngineConfig* other) {
  std::swap(bodytosensormountparams_, other->bodytosensormountparams_);
  std::swap(validmask_, other->validmask_);
  std::swap(vehiclespeedscalefactor_, other->vehiclespeedscalefactor_);
  std::swap(vehiclespeedscalefactorunc_, other->vehiclespeedscalefactorunc_);
  std::swap(gyroscalefactor_, other->gyroscalefactor_);
  std::swap(gyroscalefactorunc_, other->gyroscalefactorunc_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PBDeadReckoningEngineConfig::GetMetadata() const {
  protobuf_LocationApiDataTypes_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LocationApiDataTypes_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PBDeadReckoningEngineConfig

// uint64 validMask = 1;
void PBDeadReckoningEngineConfig::clear_validmask() {
  validmask_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 PBDeadReckoningEngineConfig::validmask() const {
  // @@protoc_insertion_point(field_get:PBDeadReckoningEngineConfig.validMask)
  return validmask_;
}
void PBDeadReckoningEngineConfig::set_validmask(::google::protobuf::uint64 value) {

  validmask_ = value;
  // @@protoc_insertion_point(field_set:PBDeadReckoningEngineConfig.validMask)
}

// .PBLIABodyToSensorMountParams bodyToSensorMountParams = 2;
bool PBDeadReckoningEngineConfig::has_bodytosensormountparams() const {
  return this != internal_default_instance() && bodytosensormountparams_ != NULL;
}
void PBDeadReckoningEngineConfig::clear_bodytosensormountparams() {
  if (GetArenaNoVirtual() == NULL && bodytosensormountparams_ != NULL) delete bodytosensormountparams_;
  bodytosensormountparams_ = NULL;
}
const ::PBLIABodyToSensorMountParams& PBDeadReckoningEngineConfig::bodytosensormountparams() const {
  // @@protoc_insertion_point(field_get:PBDeadReckoningEngineConfig.bodyToSensorMountParams)
  return bodytosensormountparams_ != NULL ? *bodytosensormountparams_
                         : *::PBLIABodyToSensorMountParams::internal_default_instance();
}
::PBLIABodyToSensorMountParams* PBDeadReckoningEngineConfig::mutable_bodytosensormountparams() {

  if (bodytosensormountparams_ == NULL) {
    bodytosensormountparams_ = new ::PBLIABodyToSensorMountParams;
  }
  // @@protoc_insertion_point(field_mutable:PBDeadReckoningEngineConfig.bodyToSensorMountParams)
  return bodytosensormountparams_;
}
::PBLIABodyToSensorMountParams* PBDeadReckoningEngineConfig::release_bodytosensormountparams() {
  // @@protoc_insertion_point(field_release:PBDeadReckoningEngineConfig.bodyToSensorMountParams)

  ::PBLIABodyToSensorMountParams* temp = bodytosensormountparams_;
  bodytosensormountparams_ = NULL;
  return temp;
}
void PBDeadReckoningEngineConfig::set_allocated_bodytosensormountparams(::PBLIABodyToSensorMountParams* bodytosensormountparams) {
  delete bodytosensormountparams_;
  bodytosensormountparams_ = bodytosensormountparams;
  if (bodytosensormountparams) {

  } else {

  }
  // @@protoc_insertion_point(field_set_allocated:PBDeadReckoningEngineConfig.bodyToSensorMountParams)
}

// float vehicleSpeedScaleFactor = 3;
void PBDeadReckoningEngineConfig::clear_vehiclespeedscalefactor() {
  vehiclespeedscalefactor_ = 0;
}
float PBDeadReckoningEngineConfig::vehiclespeedscalefactor() const {
  // @@protoc_insertion_point(field_get:PBDeadReckoningEngineConfig.vehicleSpeedScaleFactor)
  return vehiclespeedscalefactor_;
}
void PBDeadReckoningEngineConfig::set_vehiclespeedscalefactor(float value) {

  vehiclespeedscalefactor_ = value;
  // @@protoc_insertion_point(field_set:PBDeadReckoningEngineConfig.vehicleSpeedScaleFactor)
}

// float vehicleSpeedScaleFactorUnc = 4;
void PBDeadReckoningEngineConfig::clear_vehiclespeedscalefactorunc() {
  vehiclespeedscalefactorunc_ = 0;
}
float PBDeadReckoningEngineConfig::vehiclespeedscalefactorunc() const {
  // @@protoc_insertion_point(field_get:PBDeadReckoningEngineConfig.vehicleSpeedScaleFactorUnc)
  return vehiclespeedscalefactorunc_;
}
void PBDeadReckoningEngineConfig::set_vehiclespeedscalefactorunc(float value) {

  vehiclespeedscalefactorunc_ = value;
  // @@protoc_insertion_point(field_set:PBDeadReckoningEngineConfig.vehicleSpeedScaleFactorUnc)
}

// float gyroScaleFactor = 5;
void PBDeadReckoningEngineConfig::clear_gyroscalefactor() {
  gyroscalefactor_ = 0;
}
float PBDeadReckoningEngineConfig::gyroscalefactor() const {
  // @@protoc_insertion_point(field_get:PBDeadReckoningEngineConfig.gyroScaleFactor)
  return gyroscalefactor_;
}
void PBDeadReckoningEngineConfig::set_gyroscalefactor(float value) {

  gyroscalefactor_ = value;
  // @@protoc_insertion_point(field_set:PBDeadReckoningEngineConfig.gyroScaleFactor)
}

// float gyroScaleFactorUnc = 6;
void PBDeadReckoningEngineConfig::clear_gyroscalefactorunc() {
  gyroscalefactorunc_ = 0;
}
float PBDeadReckoningEngineConfig::gyroscalefactorunc() const {
  // @@protoc_insertion_point(field_get:PBDeadReckoningEngineConfig.gyroScaleFactorUnc)
  return gyroscalefactorunc_;
}
void PBDeadReckoningEngineConfig::set_gyroscalefactorunc(float value) {

  gyroscalefactorunc_ = value;
  // @@protoc_insertion_point(field_set:PBDeadReckoningEngineConfig.gyroScaleFactorUnc)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
